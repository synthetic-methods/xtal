








namespace _detail
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

using namespace _retail::_detail;


////////////////////////////////////////////////////////////////////////////////

template <class T>
struct aligned
{
	class type {alignas(alignof(T)) _std::byte data[sizeof(T)];};

	XTAL_DEF_(return,inline,set) size() noexcept -> decltype(auto) {return sizeof(type);}

};
template <class T             >	using          aligned_t =  typename aligned<T >::type;
template <         class ...Ts>	auto constexpr aligned_n =  (size_type{0} +...+ aligned<Ts>::size());
template <         class ...Ts>	auto constexpr aligned_m =  aligned_n<Ts...> - one;

template <class T>
XTAL_DEF_(return,inline,let)
maligned_f(auto &i)
noexcept -> auto
{
	using I = XTAL_ALL_(i);
	I constexpr N = aligned_n<T> << 3U;
	I constexpr M = N - 1;
	i += M; i &= ~M; auto const j = i; i += M; return j >> 3U;
};


////////////////////////////////////////////////////////////////////////////////

template <template <class ...Us> class T>
struct initialize
{
//	NOTE: Can't define the default since it forces resolution of `objective_f` too early. \

	template <class V=void, class ...Xs>
	XTAL_DEF_(return,inline,set)
	via(Xs &&...xs)
	noexcept -> auto
	{
		XTAL_IF0
		XTAL_0IF (complete_q<V>) {
			auto constexpr f = invoke_n<V>;
			using          F = invoke_t<V>;
			using          U = common_t<return_t<F, Xs>...>;
			auto constexpr N = sizeof...(xs);
			if constexpr (automorphism_p<F, U>) {
				return T<U[N]>{ (XTAL_REF_(xs))...};
			}
			else {
				return T<U[N]>{f(XTAL_REF_(xs))...};
			}
		}
		XTAL_0IF (incomplete_q<V>) {
			return via<decltype([] XTAL_0FN_(alias) (objective_f))>(XTAL_REF_(xs)...);
		}
	}

};


////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
