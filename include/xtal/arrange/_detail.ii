








namespace _detail
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

using namespace _retail::_detail;


////////////////////////////////////////////////////////////////////////////////

template <class T>
struct aligned
{
	class type {alignas(alignof(T)) _std::byte data[sizeof(T)];};

	XTAL_DEF_(short,static)
	XTAL_LET size() noexcept -> size_type {return sizeof(type);}

};
template <class T             >	using    aligned_t	=       typename aligned<T >::type;
template <         class ...Ts>	XTAL_LET aligned_n	=  (size_0 +...+ aligned<Ts>::size());
template <         class ...Ts>	XTAL_LET aligned_m	=  aligned_n<Ts...> - size_1;

template <class T>
XTAL_DEF_(short)
XTAL_LET maligned_f(auto &i)
noexcept -> auto
{
	using I = XTAL_ALL_(i);
	I constexpr N = aligned_n<T> << 3U;
	I constexpr M = N - 1;
	i += M; i &= ~M; auto const j = i; i += M; return j >> 3U;
};


////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
