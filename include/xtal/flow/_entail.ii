#include "../cell/_entail.ii"








//line namespace _entail
//////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
///\
Defines an `inferred` tuple from `...As`. \

template <class ...Ts>	struct   packed   : inferred<bond::tag<packed>, Ts...> {};
template <class ...Ts>	using    packed_t = typename packed<Ts...>::type;
template <class ...Ts>	concept  packed_q = bond::tag_p<packed, Ts...>;
template <class ...Ts>
XTAL_DEF_(return,inline,let)
packed_f(Ts &&...ts)
noexcept -> auto
{
	return packed_t<Ts...>(XTAL_REF_(ts)...);
}

///\
Defines an `inferred` tuple from `...Ts`, \
or `bond::seek_front_t<Ts...>` if `any_q<Ts...>` and `1 == sizeof...(Ts)`. \

template <class ...Ts>	struct   packet    : packed<Ts...> {};
template <any_q    T >	struct   packet<T> : identity_t<T> {};
template <class ...Ts>	using    packet_t = typename packet<Ts...>::type;
template <class ...Ts>
XTAL_DEF_(return,inline,let)
packet_f(Ts &&...ts)
noexcept -> auto
{
	return packet_t<Ts...>(XTAL_REF_(ts)...);
}

///\
Defines a `conferred` value from `T`, \
or `T` if `any_q<T>`. \

template <class   ...Ts>	struct   let : let<either_t<Ts...>> {};
template <class      T >	struct   let<T>       {using type = conferred_t<T>;};
template <any_q      T >	struct   let<T>       {using type =             T ;};
template <             >	struct   let< >       {using type =  confined_t< >;};
template <class   ...Ts>	using    let_t      = typename let<Ts...>::type;

///\returns `w` if `any_q<decltype(w)>`, otherwise proxies `w` using `conferred_t`.

template <class   ...Ts>
XTAL_DEF_(return,inline,let)
let_f(Ts &&...ts)
noexcept -> decltype(auto)
{
	return let_t<Ts...>(XTAL_REF_(ts)...);
}


////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
