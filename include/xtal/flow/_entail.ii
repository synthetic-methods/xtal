#include "../cell/_entail.ii"








//line namespace _entail
//////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
///\
Defines an `inferred` tuple from `...As`. \

template <class ...Ts>	struct    packed;
template <class ...Ts>	using     packed_t = typename packed<Ts...>::type;
template <class ...Ts>	concept   packed_q = bond::tagged_with_p<packed, Ts...>;
template <class ...Ts>	concept unpacked_q = not packed_q<Ts...>;

XTAL_DEF_(let) packed_f = []<class ...Ts> (Ts &&...ts)
XTAL_0FN_(to) (packed_t<Ts...>(static_cast<Ts &&> (ts)...));

template <class ...Ts>
struct   packed
{
	//\
	using superkind = inferred<Ts...>;
	using superkind = inferred<bond::tag<packed>, Ts...>;

	template <class S>
	class subtype : public bond::compose_s<S, superkind>
	{
		using S_ = bond::compose_s<S, superkind>;

	public:// CONSTRUCT
		using S_::S_;

		XTAL_DEF_(return,inline,let)
		operator, (auto &&w) const
		noexcept -> auto
		{
		//	auto const then = bond::repack_f<packed_t>(S_::self().pack());
			if constexpr (packed_q<decltype(w)>) {
				return bond::repack_f<packed_t>(S_::self().pack(),        XTAL_REF_(w).pack());
			}
			else {
				return bond::repack_f<packed_t>(S_::self().pack(), bond::pack_f(XTAL_REF_(w)));
			}
		}
		template <unpacked_q U>
		XTAL_DEF_(return,inline,met)
		operator, (U &&u, subtype      &&s)
		noexcept -> auto
		{
			return (packed_f(XTAL_REF_(u)), XTAL_MOV_(s).self());
		}
		template <unpacked_q U>
		XTAL_DEF_(return,inline,met)
		operator, (U &&u, subtype const &s)
		noexcept -> auto
		{
			return (packed_f(XTAL_REF_(u)), XTAL_REF_(s).self());
		}


	};
	using type = subtype<any_type>;

};

///\
Defines an `inferred` tuple from `...Ts`, \
or `bond::seek_front_t<Ts...>` if `any_q<Ts...>` and `1 == sizeof...(Ts)`. \

template <class ...Ts>	struct  packet    : packed<Ts...> {};
template <any_q    T >	struct  packet<T> : identity_t<T> {};
template <class ...Ts>	using   packet_t = typename packet<Ts...>::type;

XTAL_DEF_(let) packet_f = []<class ...Ts> (Ts &&...ts)
XTAL_0FN_(to) (packet_t<Ts...>(static_cast<Ts &&> (ts)...));

///\
Defines a `conferred` value from `T`, \
or `T` if `any_q<T>`. \

template <class ...Ts>	struct  let : let<either_t<Ts...>> {};
template <class    T >	struct  let<T>  {using type = conferred_t<T>;};
template <any_q    T >	struct  let<T>  {using type =             T ;};
template <           >	struct  let< >  {using type =  confined_t< >;};
template <class ...Ts>	using   let_t = typename let<Ts...>::type;

/*/
XTAL_DEF_(let) let_f = []<class ...Ts> (Ts &&...ts)
XTAL_0FN_(to) (let_t<Ts...>(static_cast<Ts &&> (ts)...));
/*/
template <class   ...Ts>
XTAL_DEF_(return,inline,let)
let_f(Ts &&...ts)
noexcept -> decltype(auto)
{
	return let_t<Ts...>(XTAL_REF_(ts)...);
}
/***/


////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
