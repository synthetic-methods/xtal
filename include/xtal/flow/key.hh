#pragma once
#include "./any.hh"

#include "../cell/header.hh"




XTAL_ENV_(push)
namespace xtal::flow
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/*!
\brief
Wrapper used to index an existing type with `signed`.

\details
Uses for indexing both events and voices in `processor::polymer.`
*/
template <class ..._s>	struct  key;
template <class ..._s>	using   key_s = bond::compose_s<let_t< _s...>, key<>>;
template <class ..._s>	concept key_q = bond::tag_as_p<key_s, _s...>;
template <           >	struct  key<> : cell::header<signed, bond::tag<key_s>> {};


////////////////////////////////////////////////////////////////////////////////

XTAL_DEF_(let) key_f = [] XTAL_1FN_(call) (key_s<>);


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
XTAL_ENV_(pop)

