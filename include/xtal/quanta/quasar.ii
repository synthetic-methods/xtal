#pragma once
#include "./any.ii"
#include "./fusor.ii"
#include "./phasor.ii"
#include "./pulsar.ii"
#include "../quantum/quartz.ii"


XTAL_ENV_(push)
namespace xtal::quanta
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

template <                     typename ..._s> XTAL_NYM quasar;
template <                     typename ..._s> XTAL_ASK quasar_q = bond::tagged_p<quasar, _s...>;
template <array_q W=size_t[2], typename ...As> XTAL_USE quasar_t = confined_t<quasar<W>, As...>;


////////////////////////////////////////////////////////////////////////////////
///\

template <size_t N, class U, typename ...As>
struct quasar<U[N], As...>
{
	using W = U[N];

	using U_phasor = phasor_t<W, As...>;
	using U_pulsar = pulsar_t<W, As...>;
	
	using V_phase = quantum::phase_value_t<U>;
	using V_pulse = quantum::pulse_value_t<U>;

	using W_quartz = quantum::quartz_t<U>[N];
	using subkind = bond::compose<bond::tag<quasar>, As..., fusor<W_quartz>>;

	template <class S>
	class subtype: public bond::compose_s<S, subkind>
	{
		using S_ = bond::compose_s<S, subkind>;
	
	public:
		using S_::S_;
		using S_::self;
		using S_::head;
		using S_::subscript;

		///\
		Access by name/index (dynamic). \
		
		XTAL_TO4_(XTAL_TN2 phase(size_t i), subscript(i).phase())
		XTAL_TO4_(XTAL_TN2 pulse(size_t i), subscript(i).pulse())

		///\
		Access by name/index (static). \
		
		XTAL_TO4_(template <size_t I> XTAL_TN2 phase(), _std::get<I>(head()).phase())
		XTAL_TO4_(template <size_t I> XTAL_TN2 pulse(), _std::get<I>(head()).pulse())

		///\
		Projection to components by name. \

		XTAL_TN2 phasor() XTAL_0FX {return [this]<auto ...I>(bond::seek_t<I...>) XTAL_0FN_(U_phasor(phase<I>()...)) (bond::seek_f<N>{});}
		XTAL_TN2 pulsar() XTAL_0FX {return [this]<auto ...I>(bond::seek_t<I...>) XTAL_0FN_(U_pulsar(pulse<I>()...)) (bond::seek_f<N>{});}
		
		///\
		Projection to initial component by type. \

		XTAL_DO4_(XTAL_OP0_(explicit) V_pulse(), {return pulse<0>();})
		XTAL_DO4_(XTAL_OP0_(explicit) V_phase(), {return phase<0>();})

	};
};


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
XTAL_ENV_(pop)
