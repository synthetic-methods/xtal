#pragma once
#include "./any.hpp"






XTAL_ENV_(push)
namespace xtal::context
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////

template <typename ...>
struct voice;

template <typename U>
struct voice<U>
:	lift<U, any<tag<voice>>>
{
};
template <constant_q U>
struct voice<U>
{
	template <typename S>
	class subtype: public S
	{
		XTAL_LET_(U) capacity();

	public:
		using S::S;

	};
};
template <typename S=confined_t<>, typename U=_std::ptrdiff_t>
using voice_s = compose_s<S, voice<U>>;


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
XTAL_ENV_(pop)
