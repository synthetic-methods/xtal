








namespace _xtd
{///////////////////////////////////////////////////////////////////////////////
//using namespace _std::experimental;

#if XTAL_VER_(ranges == 3)
namespace ranges        {using namespace      ::ranges;}
namespace ranges::views {using namespace      ::ranges::views;}
#endif

#if XTAL_VER_(ranges != 3)
namespace ranges        {using namespace ::std::ranges;}
namespace ranges::views {using namespace ::std::ranges::views;}

namespace ranges
{
using  _std::make_reverse_iterator;
using  _std::   make_move_iterator;
//\
using  _std::           accumulate;
using ::ranges::        accumulate;
using ::ranges::          any_view;
using ::ranges::       repeat_view;
using ::ranges::    get_categories;
}
namespace ranges::views
{
/*/
XTAL_DEF_(let) zip       = [] XTAL_0FN_(call) (::ranges::views::zip);
XTAL_DEF_(let) zip_with  = [] XTAL_0FN_(call) (::ranges::views::zip_with);
XTAL_DEF_(let) transform = [] XTAL_0FN_(call) (::ranges::views::transform);
/*/
XTAL_DEF_(let) zip       = [] XTAL_0FN_(call) (zip_view);
XTAL_DEF_(let) zip_with  = [] XTAL_0FN_(call) (zip_transform_view);
/***/
XTAL_DEF_(let) generate  = [] XTAL_0FN_(call) (::ranges::views::generate);
}
#endif


////////////////////////////////////////////////////////////////////////////////

template <class S, class T >	struct  transfer_reference                           {using type = T                  ;};
template <class S, class T >	struct  transfer_reference  <S                 &, T> {using type = T                 &;};
template <class S, class T >	struct  transfer_reference  <S                &&, T> {using type = T                &&;};
template <class S, class T >	using   transfer_reference_t = typename transfer_reference     <S, T>::type;

template <class S, class T >	struct  transfer_volatile                            {using type = T                  ;};
template <class S, class T >	struct  transfer_volatile   <S       volatile   , T> {using type = T       volatile   ;};
template <class S, class T >	using   transfer_volatile_t  = typename transfer_volatile      <S, T>::type;

template <class S, class T >	struct  transfer_const                               {using type = T                  ;};
template <class S, class T >	struct  transfer_const      <S const            , T> {using type = T const            ;};
template <class S, class T >	using   transfer_const_t     = typename transfer_const         <S, T>::type;

template <class S, class T >	struct  transfer_cv                                  {using type = T                  ;};
template <class S, class T >	struct  transfer_cv         <S const            , T> {using type = T const            ;};
template <class S, class T >	struct  transfer_cv         <S       volatile   , T> {using type = T       volatile   ;};
template <class S, class T >	struct  transfer_cv         <S const volatile   , T> {using type = T const volatile   ;};
template <class S, class T >	using   transfer_cv_t        = typename transfer_cv            <S, T>::type;

template <class S, class T >	struct  transfer_cvref                               {using type = T                  ;};
template <class S, class T >	struct  transfer_cvref      <S const            , T> {using type = T const            ;};
template <class S, class T >	struct  transfer_cvref      <S                &&, T> {using type = T                &&;};
template <class S, class T >	struct  transfer_cvref      <S const          &&, T> {using type = T const          &&;};
template <class S, class T >	struct  transfer_cvref      <S                 &, T> {using type = T                 &;};
template <class S, class T >	struct  transfer_cvref      <S const           &, T> {using type = T const           &;};
template <class S, class T >	struct  transfer_cvref      <S       volatile   , T> {using type = T       volatile   ;};
template <class S, class T >	struct  transfer_cvref      <S const volatile   , T> {using type = T const volatile   ;};
template <class S, class T >	struct  transfer_cvref      <S       volatile &&, T> {using type = T       volatile &&;};
template <class S, class T >	struct  transfer_cvref      <S const volatile &&, T> {using type = T const volatile &&;};
template <class S, class T >	struct  transfer_cvref      <S       volatile  &, T> {using type = T       volatile  &;};
template <class S, class T >	struct  transfer_cvref      <S const volatile  &, T> {using type = T const volatile  &;};
template <class S, class T >	using   transfer_cvref_t     = typename transfer_cvref         <S, T>::type;


////////////////////////////////////////////////////////////////////////////////
/*!
\internal
Replaces the correspond `std` definitions,
overcoming the discrepancies between `LLVM` and `GNUC` (particularly for zero-length arrays).
*/
template <class T              >	struct  remove_all_extents : transfer_cvref<T, _std::remove_all_extents_t<_std::remove_cvref_t<T>>> {};
#if XTAL_VER_(MSVC == 0)
template <class U              >	struct  remove_all_extents<U   [0]> : remove_all_extents<U  > {};
template <class U              >	struct  remove_all_extents<U(&)[0]> : remove_all_extents<U &> {};
#endif
template <class U,     auto N  >	struct  remove_all_extents<U   [N]> : remove_all_extents<U  > {};
template <class U,     auto N  >	struct  remove_all_extents<U(&)[N]> : remove_all_extents<U &> {};
template <class T              >	using   remove_all_extents_t = typename remove_all_extents<T>::type;

template <class T              >	struct  remove_extent : transfer_cvref<T, _std::remove_extent_t<_std::remove_cvref_t<T>>> {};
#if XTAL_VER_(MSVC == 0)
template <class U              >	struct  remove_extent<U   [0]> {using type = U  ;};
template <class U              >	struct  remove_extent<U(&)[0]> {using type = U &;};
#endif
template <class U,     auto N  >	struct  remove_extent<U   [N]> {using type = U  ;};
template <class U,     auto N  >	struct  remove_extent<U(&)[N]> {using type = U &;};
template <class T              >	using   remove_extent_t = typename remove_extent<T>::type;

template <class T              >	struct        _extent          : _std::integral_constant<_std::size_t, 0> {};
#if XTAL_VER_(MSVC == 0)
template <class U              >	struct        _extent<U   [0]> : _std::integral_constant<_std::size_t, 0> {};
template <class U              >	struct        _extent<U(&)[0]> : _std::integral_constant<_std::size_t, 0> {};
#endif
template <class U,     auto N  >	struct        _extent<U   [N]> : _std::integral_constant<_std::size_t, N> {};
template <class U,     auto N  >	struct        _extent<U(&)[N]> : _std::integral_constant<_std::size_t, N> {};

template <class T, unsigned N=0>	struct         extent          :  extent<remove_extent_t<T>, N - 1> {};
template <class T              >	struct         extent<T, 0U>   : _extent<T> {};
template <class T, unsigned N=0>	auto constexpr extent_v =         extent<T, N>::value;


////////////////////////////////////////////////////////////////////////////////

template <class T> concept nominally_initializable = _std::               default_initializable  <T>;
//\
template <class T> concept nominally_destructible  = _std::            is_nothrow_destructible_v <T>;
template <class T> concept nominally_destructible  = _std::                       destructible   <T>;
template <class T> concept nominally_copyable      = _std::                       copyable       <T>;
template <class T> concept nominally_movable       = _std::                       movable        <T>;

template <class T> concept trivially_initializable = _std:: is_trivially_default_constructible_v <T>;
template <class T> concept trivially_destructible  = _std:: is_trivially_destructible_v          <T>;
template <class T> concept trivially_copyable      = _std:: is_trivially_copyable_v              <T>;
template <class T> concept trivially_movable       = _std:: is_trivially_move_constructible_v    <T>\
                                                 and _std:: is_trivially_move_assignable_v       <T>;

template <class T> concept nominally_constructible = nominally_copyable<T> and nominally_movable<T>;
template <class T> concept trivially_constructible = trivially_copyable<T> and trivially_movable<T>;

template <class T> concept nominally_instructible  = nominally_destructible<T> and nominally_initializable<T>;
template <class T> concept trivially_instructible  = trivially_destructible<T> and trivially_initializable<T>;

template <class T> concept nominal                 = nominally_instructible<T> and nominally_constructible<T>;
template <class T> concept trivial                 = trivially_instructible<T> and trivially_constructible<T>;


////////////////////////////////////////////////////////////////////////////////

template <class T, class S> concept             derived_from =                             _std::derived_from<T, S>;
template <class T, class S> concept    strictly_derived_from = not _std::same_as<T, S> and _std::derived_from<T, S>;


////////////////////////////////////////////////////////////////////////////////

template <class T           > concept              reference = _std::       is_reference_v<T>;
template <class T           > concept       rvalue_reference = _std::is_rvalue_reference_v<T>;
template <class T           > concept       lvalue_reference = _std::is_lvalue_reference_v<T>;

template <class T           > struct        remove_reference    : _std::remove_reference<T> {};
template <class T           > struct remove_rvalue_reference                 {using type = T;};
template <class T           > struct remove_lvalue_reference                 {using type = T;};
template <rvalue_reference T> struct remove_rvalue_reference<T> :       remove_reference<T> {};
template <lvalue_reference T> struct remove_lvalue_reference<T> :       remove_reference<T> {};

template <class T           > using         remove_reference_t = typename        remove_reference<T>::type;
template <class T           > using  remove_rvalue_reference_t = typename remove_rvalue_reference<T>::type;
template <class T           > using  remove_lvalue_reference_t = typename remove_lvalue_reference<T>::type;

static_assert(_std::same_as<remove_rvalue_reference_t<const float(&&)[2]>, const float    [2]>);
static_assert(_std::same_as<remove_lvalue_reference_t<const float(&&)[2]>, const float(&&)[2]>);
static_assert(_std::same_as<remove_rvalue_reference_t<const float( &)[2]>, const float( &)[2]>);
static_assert(_std::same_as<remove_lvalue_reference_t<const float( &)[2]>, const float    [2]>);


template <class T> concept      nominal_value_reference = nominal<_std::remove_cvref_t<T>> or  rvalue_reference<T>;
template <class T> concept     nominal_rvalue_reference = nominal<_std::remove_cvref_t<T>> and rvalue_reference<T>;
template <class T> concept     nominal_lvalue_reference = nominal<_std::remove_cvref_t<T>> and lvalue_reference<T>;

template <class T> concept      trivial_value_reference = trivial<_std::remove_cvref_t<T>> or  rvalue_reference<T>;
template <class T> concept     trivial_rvalue_reference = trivial<_std::remove_cvref_t<T>> and rvalue_reference<T>;
template <class T> concept     trivial_lvalue_reference = trivial<_std::remove_cvref_t<T>> and lvalue_reference<T>;


template <class T>
struct    decay_value
{
	using value_type = _std::remove_cvref_t<T>;
	using       type = _std::remove_cvref_t<T>;

};
template <class T>
struct decay_value_reference : decay_value<T>
{
};
template <lvalue_reference T>
struct decay_value_reference<T>
{
	//\
	using value_type = _std::shared_ptr<XTAL_NOM_(T)>;
	using value_type = decltype(&XTAL_ANY_(T));
	using       type = T;

};
template <                   class T>	struct decay_nominal_value_reference    : decay_value_reference <T> {};
template <nominal_lvalue_reference T>	struct decay_nominal_value_reference<T> : decay_value           <T> {};

template <                   class T>	struct decay_trivial_value_reference    : decay_value_reference <T> {};
template <trivial_lvalue_reference T>	struct decay_trivial_value_reference<T> : decay_value           <T> {};

template <class T           > using                    decay_value_t = typename                   decay_value<T>::type;
template <class T           > using          decay_value_reference_t = typename         decay_value_reference<T>::type;
template <class T           > using  decay_nominal_value_reference_t = typename decay_nominal_value_reference<T>::type;
template <class T           > using  decay_trivial_value_reference_t = typename decay_trivial_value_reference<T>::type;


////////////////////////////////////////////////////////////////////////////////

#if XTAL_VER_(STD < 2300) or XTAL_VER_(MSVC < 1700)// Replace with `constexpr __builtin`s...
template <class T>
XTAL_DEF_(let)
bit_cast = [] (auto s)
XTAL_0FN requires requires {_std::bit_cast<T>(s);}
{
	return __builtin_bit_cast(T, s);
};
XTAL_DEF_(let)
copysign = [] (auto t, auto s)
XTAL_0FN requires requires {_std::copysign(t, s);}
{
	return __builtin_copysign(t, s);
};
#else
using _std::bit_cast;
using _std::copysign;
#endif


////////////////////////////////////////////////////////////////////////////////

template <class F, class ...Xs> concept            invocable = requires {XTAL_ANY_(F) (XTAL_ANY_(Xs)...);};
template <class F, class ...Xs> concept   constant_invocable = trivially_initializable<F> and invocable<F, Xs...>;
template <class F             > concept constant_equivocable = not _std::integral<F> and constant_invocable<F> and requires {F{} == F{}();};


////////////////////////////////////////////////////////////////////////////////

template <class T>     using   make_signed   = _std::  make_signed  <T>;
template <class T>     using   make_signed_t = _std::  make_signed_t<T>;
template <class T>     using make_unsigned   = _std::make_unsigned  <T>;
template <class T>     using make_unsigned_t = _std::make_unsigned_t<T>;
//\
XTAL_DEF_(return,inline,let) XTAL_(make_signed_f) (_std::  signed_integral auto i) noexcept -> auto {return i;}
XTAL_DEF_(return,inline,let) XTAL_(make_signed_f) (                        auto i) noexcept -> auto {return i;}
XTAL_DEF_(return,inline,let) XTAL_(make_signed_f) (_std::unsigned_integral auto i) noexcept -> auto {return bit_cast<  make_signed_t<decltype(i)>>(i);}
XTAL_DEF_(return,inline,let) XTAL_(make_signed_f) (constant_equivocable    auto f) noexcept -> auto {return   make_signed_f(f());}

XTAL_DEF_(return,inline,let) XTAL_(make_unsigned_f) (_std::  signed_integral auto i) noexcept -> auto {return bit_cast<make_unsigned_t<decltype(i)>>(i);}
XTAL_DEF_(return,inline,let) XTAL_(make_unsigned_f) (_std::unsigned_integral auto i) noexcept -> auto {return i;}
XTAL_DEF_(return,inline,let) XTAL_(make_unsigned_f) (constant_equivocable    auto f) noexcept -> auto {return make_unsigned_f(f());}

XTAL_DEF_(let)   make_signed_f = [] XTAL_1FN_(call) (XTAL_(  make_signed_f));
XTAL_DEF_(let) make_unsigned_f = [] XTAL_1FN_(call) (XTAL_(make_unsigned_f));


////////////////////////////////////////////////////////////////////////////////
/*!
\returns
The result of `w + x*(y*...*ys)`, using `fma` where possible.
*/
XTAL_DEF_(return,inline,let)
plus_multiplies(auto &&w, auto &&x, auto &&y)
noexcept -> auto
{
	using Z = XTAL_ALL_(w + x*y);
	XTAL_IF0
	XTAL_0IF_(consteval) {
		return               XTAL_REF_(y)*XTAL_REF_(x) + XTAL_REF_(w) ;
	}
#if   XTAL_SYS_(FMA) and XTAL_SYS_(builtin)
	XTAL_0IF (requires {_std::fma(y, x, w);}) {
		return static_cast<Z>(__builtin_fma(XTAL_REF_(y), XTAL_REF_(x), XTAL_REF_(w)));
	}
#endif
#if   XTAL_SYS_(FMA)
	XTAL_0IF (requires {fma(y, x, w);}) {
		return static_cast<Z>(          fma(XTAL_REF_(y), XTAL_REF_(x), XTAL_REF_(w)));
	}
#endif
	XTAL_0IF_(else) {
		return               XTAL_REF_(y)*XTAL_REF_(x) + XTAL_REF_(w) ;
	}
}
template <class V>
XTAL_DEF_(return,inline,let)
plus_multiplies(V w, _std::complex<V> x, V y)
noexcept -> _std::complex<V>
{
	return {plus_multiplies(w, x.real(), y), x.imag()*y};
}
template <class V>
XTAL_DEF_(return,inline,let)
plus_multiplies(V w, V x, _std::complex<V> y)
noexcept -> _std::complex<V>
{
	return {plus_multiplies(w, x, y.real()), x*y.imag()};
}
template <class V>
XTAL_DEF_(return,inline,let)
plus_multiplies(V w, _std::complex<V> x, _std::complex<V> y)
noexcept -> _std::complex<V>
{
	if constexpr (requires {fma(y, x, w);}) {
		return fma(y, x, w);
	}
	else {
		/*/
		auto const z_re = plus_multiplies(plus_multiplies(w, x.real(),y.real()), -x.imag(),y.imag());
		auto const z_im = plus_multiplies(                   x.imag()*y.real() ,  x.real(),y.imag());
		return {z_re, z_im};
		/*/
		return y*x + w;
		/***/
	}
}

template <class V>
XTAL_DEF_(return,inline,let)
plus_multiplies(_std::complex<V> w, V x, V y)
noexcept -> _std::complex<V>
{
	return {plus_multiplies(w.real(), x, y), w.imag()};
}
template <class V>
XTAL_DEF_(return,inline,let)
plus_multiplies(_std::complex<V> w, _std::complex<V> x, V y)
noexcept -> _std::complex<V>
{
	return {plus_multiplies(w.real(), x.real(), y), plus_multiplies(w.imag(), x.imag(), y)};
}
template <class V>
XTAL_DEF_(return,inline,let)
plus_multiplies(_std::complex<V> w, V x, _std::complex<V> y)
noexcept -> _std::complex<V>
{
	return {plus_multiplies(w.real(), x, y.real()), plus_multiplies(w.imag(), x, y.imag())};
}

template <class V>
XTAL_DEF_(return,inline,let)
plus_multiplies(_std::complex<V> w, _std::complex<V> x, _std::complex<V> y)
noexcept -> _std::complex<V>
{
	if constexpr (requires {fma(y, x, w);}) {
		return fma(y, x, w);
	}
	else {
		/*/
		auto const z_re = plus_multiplies(plus_multiplies(w.real(), x.real(),y.real()), -x.imag(),y.imag());
		auto const z_im = plus_multiplies(plus_multiplies(w.imag(), x.imag(),y.real()),  x.real(),y.imag());
		return {z_re, z_im};
		/*/
		return y*x + w;
		/***/
	}
}

XTAL_DEF_(return,inline,let)
plus_multiplies(auto &&w, auto &&x, auto &&y, auto &&...ys)
noexcept -> auto
requires (1 <= sizeof...(ys))
{
	return plus_multiplies(XTAL_REF_(w), XTAL_REF_(x), (XTAL_REF_(y) *...* XTAL_REF_(ys)));
}


////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
