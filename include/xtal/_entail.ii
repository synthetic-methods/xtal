namespace _std = ::std;
namespace _xtd
{
#if XTAL_VER_(ranges == 3)
namespace ranges        {using namespace      ::ranges;}
namespace ranges::views {using namespace      ::ranges::views;}
#elif
namespace ranges        {using namespace ::std::ranges;}
namespace ranges::views {using namespace ::std::ranges::views;}
#endif
}


namespace _entail
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
//\
Prelude...

class    void_type	;
using    null_type	= XTAL_STD_(null_type);
using    unit_type	= XTAL_STD_(unit_type);
using    size_type	= XTAL_STD_(size_type);
using  signum_type	= XTAL_ALL_(true - false);
using integer_type	= XTAL_STD_(integer_type);

XTAL_LET_(size_type) size_0{0};
XTAL_LET_(size_type) size_1{1};
XTAL_LET_(size_type) size_2{2};
XTAL_LET_(size_type) size_3{3};

template <class T>
concept  atomic_q = _std::is_trivially_copyable_v<T>
	and _std::is_copy_constructible_v<T> and _std::is_copy_assignable_v<T>
	and _std::is_move_constructible_v<T> and _std::is_move_assignable_v<T>;

template <class T>
concept  molecular_q = _std::is_standard_layout_v<T>;


////////////////////////////////////////////////////////////////////////////////

template <auto  N, signum_type  Z=0 >	XTAL_LET       signum_n	= (0 < N) - (N < 0) + (N == 0)*Z;
template <auto  N, XTAL_ALL_(N) L   >	XTAL_LET       modulo_n	= ((N%L) + L)%L;
template <auto  N, XTAL_ALL_(N) M=0 >	XTAL_LET        upper_n	= (M <= N)? N: M;
template <auto  N, XTAL_ALL_(N) M=0 >	XTAL_LET        lower_n	= (N <= M)? N: M;
template <auto  N, XTAL_ALL_(N) M=0 >	XTAL_LET        above_n	= (M <  N)? N: M + 1;
template <auto  N, XTAL_ALL_(N) M=0 >	XTAL_LET        below_n	= (N <  M)? N: M - 1;
static_assert(0 == below_n<(size_type)  0, (1<<2)>);
static_assert(1 == below_n<(size_type)  1, (1<<2)>);
static_assert(2 == below_n<(size_type)  2, (1<<2)>);
static_assert(3 == below_n<(size_type)  3, (1<<2)>);
static_assert(3 == below_n<(size_type)  4, (1<<2)>);
static_assert(3 == below_n<(size_type) -1, (1<<2)>);

template <class          ...Ts>	concept          some_q	= 0 < sizeof...(Ts);
template <auto           ...Ns>	concept          some_n	= 0 < sizeof...(Ns);
template <class          ...Ts>	concept          none_q	= not some_q<Ts...>;
template <auto           ...Ns>	concept          none_n	= not some_n<Ns...>;
template <auto  N,  auto ...Ms>	concept            in_n	= ((none_n<Ms...> and !!N) or...or (N == Ms));
template <auto  N,  auto ...Ms>	concept            un_n	= ((none_n<Ms...> and  !N) or...or (N != Ms));

template <class T             >	using           based_t	= _std::remove_cvref_t<T>;
//\
template <class T             >	concept         based_q	= molecular_q<based_t<T>>;
template <class T             >	concept         based_q	=    atomic_q<based_t<T>>;
template <class T             >	concept       unbased_q	=         not based_q<T> ;

template <class F, class ...Xs>	using          return_t	= _std::invoke_result_t<F, Xs...>;
template <class F, class ...Xs>	concept        return_p	= _std::invocable      <F, Xs...>;
template <         class ...Ts>	using          common_t	=                                      _std::common_type_t<Ts...>;
template <         class ...Ts>	concept        common_q	= some_q<Ts...> and requires {typename _std::common_type_t<Ts...>;};

template <class T                  >	concept    incomplete_q	= not requires {typename _std::void_t<decltype(sizeof(T))>;};
template <class T                  >	concept      complete_q	=     requires {typename _std::void_t<decltype(sizeof(T))>;};
template <              class ...Ts>	struct       complete              {class type { };};
template <complete_q T, class ...Ts>	struct       complete<T, Ts...>    {using type = T;};
template <class      T, class ...Ts>	struct       complete<T, Ts...>  : complete<Ts...> {};
template <              class ...Ts>	using        complete_t	= typename complete<Ts...>::type;
static_assert(incomplete_q           <void     > );
static_assert(incomplete_q           <void_type> );
static_assert(  complete_q<complete_t<void     >>);
static_assert(  complete_q<complete_t<void_type>>);

template <auto  t                  >	struct       constant	;
template <auto  t                  >	using        constant_t	=  constant<t>;
template <auto  t                  >	using        constant_s	= _std::integral_constant<XTAL_ALL_(t), t>;
template <class T                  >	concept      constant_q	= _std::derived_from<based_t<T>, constant_s<T::value>>;
template <auto  t                  >	struct       constant : constant_s<t> {};
template <auto  t                  >
requires _std::invocable<decltype(t)>
struct   constant<t> : constant_s<t>
{
	using        type = constant;
	using  value_type = XTAL_ALL_(t);
	using return_type = XTAL_ALL_(t());

	XTAL_DEF_(alias)    operator()                                         () const {return t();}
	XTAL_DEF_(implicit) operator _std::constructible_from<return_type> auto() const {return t();}

};


////////////////////////////////////////////////////////////////////////////////

template <class T             >	concept       logical_o	= _std::     same_as<bool, based_t<T>>;
template <class T             >	concept       ordinal_o	= _std::   signed_integral<based_t<T>>;
template <class T             >	concept      cardinal_o	= _std:: unsigned_integral<based_t<T>>;
template <class T             >	concept      integral_o	= _std::          integral<based_t<T>>;

template <class T             >	concept       logical_q	= constant_q<T> and  logical_o<typename T::value_type> or  logical_o<T>;
template <class T             >	concept       ordinal_q	= constant_q<T> and  ordinal_o<typename T::value_type> or  ordinal_o<T>;
template <class T             >	concept      cardinal_q	= constant_q<T> and cardinal_o<typename T::value_type> or cardinal_o<T>;
template <class T             >	concept      integral_q	= constant_q<T> and integral_o<typename T::value_type> or integral_o<T>;

template <class T, class ...Xs>	concept       logical_p	= _std::invocable<T, Xs...> and  logical_q<_std::invoke_result_t<T, Xs...>>;
template <class T, class ...Xs>	concept       ordinal_p	= _std::invocable<T, Xs...> and  ordinal_q<_std::invoke_result_t<T, Xs...>>;
template <class T, class ...Xs>	concept      cardinal_p	= _std::invocable<T, Xs...> and cardinal_q<_std::invoke_result_t<T, Xs...>>;
template <class T, class ...Xs>	concept      integral_p	= _std::invocable<T, Xs...> and integral_q<_std::invoke_result_t<T, Xs...>>;

template <class T             >	concept       natural_q	= constant_q<T> and 0 <= T::value;
template <class T             >	concept     unnatural_q	= constant_q<T> and not ~T::value;
template <class T             >	concept       liminal_q	= constant_q<T> and 0 != T::value;
template <class T             >	concept      terminal_q	= constant_q<T> and 0 == T::value;
template <class S             >	using      subliminal_s	= constant_t<S::value - signum_n<S::value>>;
template <class S             >	using    superliminal_s	= constant_t<S::value + signum_n<S::value>>;

static_assert(    integral_q<constant_t<1>>);
static_assert(    integral_q<  int>);
static_assert(not integral_q<float>);


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Structural...

template <class T             >	struct       identity                         {using type = _std::type_identity<T>;};
template <class U             >	struct       identity<_std::type_identity<U>> {using type = _std::type_identity<U>;};
template <class T             >	using        identity_t	= typename identity<T>::type;
template <class T             >	using        identity_u	= typename identity<T>::type::type;
template <auto  N             >	using        identity_n	= identity_t<constant_t<N>>;
template <class T             >	concept      identity_q	= _std::same_as<identity_t<T>, T>;


template <         class ...Ts>	struct      identical	;// `is_same`

template <         class ...Ts>	struct      isotropic	;// `is_same` modulo qualifiers
template <         class ...Ts>	struct      epitropic	;// `is_constructible`
template <         class ...Ts>	struct    anisotropic	: _std::negate< isotropic<Ts...>> {};
template <         class ...Ts>	struct    anepitropic	: _std::negate< epitropic<Ts...>> {};

template <         class ...Ts>	concept     isotropic_q	=	   isotropic<Ts...>::value;
template <         class ...Ts>	concept     epitropic_q	=	   epitropic<Ts...>::value;
template <         class ...Ts>	concept   anisotropic_q	=	 anisotropic<Ts...>::value;
template <         class ...Ts>	concept   anepitropic_q	=	 anepitropic<Ts...>::value;

template <         class ...Ts>	struct     isomorphic	:  isotropic<Ts...> {};
template <         class ...Ts>	struct     epimorphic	:  epitropic<Ts...> {};
template <         class ...Ts>	struct   anisomorphic	: _std::negate<isomorphic<Ts...>> {};
template <         class ...Ts>	struct   anepimorphic	: _std::negate<epimorphic<Ts...>> {};

template <         class ...Ts>	concept    isomorphic_q	=	  isomorphic<Ts...>::value;
template <         class ...Ts>	concept    epimorphic_q	=	  epimorphic<Ts...>::value;
template <         class ...Ts>	concept  anisomorphic_q	=	anisomorphic<Ts...>::value;
template <         class ...Ts>	concept  anepimorphic_q	=	anepimorphic<Ts...>::value;


template <class T, class ...Ts>	struct      identical	<T, Ts...> : _std::conjunction<_std::is_same<Ts, T>...> {};
template <class T, class ...Ts>	struct      isotropic	<T, Ts...> : _std::conjunction<_std::is_same<based_t<Ts>, based_t<T>>...> {};
template <class T, class ...Ts>	struct      epitropic	<T, Ts...> : _std::conjunction<_std::is_constructible<Ts, T>...> {};
template <         class ...Ts>	concept            id_q	=  identical<Ts...>::value;
template <         class ...Ts>	concept            is_q	=  isotropic<Ts...>::value;
template <         class ...Ts>	concept            as_q	=  epitropic<Ts...>::value;
template <class T, class ...Us>	concept            as_p	= _std::constructible_from<T, Us...>;

template <         class ...Ts>	struct       fungible              : _std::false_type                                                    {};
template <class T, class ...Ts>	struct       fungible<T, Ts...>    : _std::conjunction<fungible<T, Ts>...>                               {};
template <class T, class    T1>	struct       fungible<T, T1   >    : _std::disjunction<_std::is_base_of<T, T1>, _std::is_base_of<T1, T>> {};
template <         class ...Ts>	concept      fungible_q	=      fungible<XTAL_RAW_(Ts)...>::value;
template <         class ...Ts>	concept    infungible_q	=  not fungible<XTAL_RAW_(Ts)...>::value;

template <class X, class F    >	concept    idempotent_q	=  is_q<return_t<F, X>, X>;


////////////////////////////////////////////////////////////////////////////////

template <class T             >	XTAL_LET  tuple_sized_n	=              _std::tuple_size_v<based_t<T>> ;
template <class T             >	using     tuple_sized_t	=              _std::tuple_size  <based_t<T>> ;
template <class T             >	concept   tuple_sized_q	=   complete_q<_std::tuple_size  <based_t<T>>>;

template <class T             >	XTAL_LET  array_sized_n	=              _std::    extent_v<based_t<T>> ;
template <class T             >	using     array_sized_t	=              _std::    extent  <based_t<T>> ;
template <class T             >	concept   array_sized_q	=              _std::  is_array_v<based_t<T>>;

template <class T             >	struct    based_sized	;
template <identity_q    T     >	struct    based_sized	<T> {XTAL_DEF_(short) XTAL_SET size() noexcept -> size_type {return identity_u<T>::value;};};
template <tuple_sized_q T     >	struct    based_sized	<T>                 : based_sized<identity_t<tuple_sized_t<T>>> {};
template <array_sized_q T     >	struct    based_sized	<T>                 : based_sized<identity_t<array_sized_t<T>>> {};
template <class  U            >	struct    based_sized	<_std::complex<U>>  : based_sized<identity_t<constant_t<size_2>>> {};
template <class T             >	concept   based_sized_q = complete_q<based_sized<based_t<T>>>;

template <class T             >	struct    fixed_sized	;
template <based_sized_q T     >	struct    fixed_sized	<T> : based_sized<based_t<T>> {};
template <class T             >	XTAL_LET  fixed_sized_n =  fixed_sized<T>::size();
template <class T             >	using     fixed_sized_t =  constant_t<fixed_sized_n<T>>;
template <class T             >	concept   fixed_sized_q =  complete_q<fixed_sized  <T>>;

template <class T=void        >	struct    fluid_sized	     : fixed_sized<identity_t<constant_t<size_0>>> {};
template <fixed_sized_q  T    >	struct    fluid_sized	<T>  : fixed_sized<T> {};
template <class T             >	XTAL_LET  fluid_sized_n	=  fluid_sized<T>::size();
template <class T             >	concept   fluid_sized_q =  complete_q<fluid_sized  <T>>;
template <class T             >	using     fluid_sized_t =  constant_t<fluid_sized_n<T>>;


template <class T, class U    >	using    const_valued_u	= _std::conditional_t<_std::is_const_v<T>, const U, U>;

template <class T             >	using    array_valued_u	=  const_valued_u<T, _std::remove_extent_t<T>>;
template <class T             >	concept  array_valued_q	=                 _std::is_array_v<based_t<T>>;

template <class T             >	using    inner_valued_u	=  const_valued_u<T, typename _std::remove_reference_t<T>::value_type>;
template <class T             >	concept  inner_valued_q	=  requires         {typename _std::remove_reference_t<T>::value_type;};

template <class T             >	using    under_valued_u	=  const_valued_u<T, _std::underlying_type_t<T>>;
template <class T             >	concept  under_valued_q	=         complete_q<_std::underlying_type_t<based_t<T>>>;

template <class T             >	struct   fixed_valued	;
template <     identity_q T   >	struct   fixed_valued	<T> {using value_type =     identity_u<T>;};
template < array_valued_q T   >	struct   fixed_valued	<T> {using value_type = array_valued_u<T>;};
template < inner_valued_q T   >	struct   fixed_valued	<T> {using value_type = inner_valued_u<T>;};
template < under_valued_q T   >	struct   fixed_valued	<T> {using value_type = under_valued_u<T>;};
template <class T             >	using    fixed_valued_u	= typename   fixed_valued<T>::value_type;
template <class T             >	concept  fixed_valued_q	= complete_q<fixed_valued<T>>;


template <class T             >	struct  scalar_valued	;
template <class T             >	concept scalar_valued_o	= not fixed_valued_q<T> and complete_q<typename based_t<T>::scalar_type>  ;
template <class T             >	concept Scalar_valued_o	= not fixed_valued_q<T> and complete_q<typename based_t<T>::Scalar     >  ;
template <scalar_valued_o T   >	struct  scalar_valued<T> {using value_type = const_valued_u<T, typename based_t<T>::scalar_type>;};
template <Scalar_valued_o T   >	struct  scalar_valued<T> {using value_type = const_valued_u<T, typename based_t<T>::Scalar     >;};
template <class T             >	using   scalar_valued_u	= typename   scalar_valued<T>::value_type;
template <class T             >	concept scalar_valued_q	= complete_q<scalar_valued<T>>;

template <class T             >	struct   fluid_valued   :  fixed_valued<identity_t<T>> {};
template < fixed_valued_q T   >	struct   fluid_valued<T>:  fixed_valued<T> {};
template <scalar_valued_q T   >	struct   fluid_valued<T>: scalar_valued<T> {};
template <class T             >	using    fluid_valued_u	= typename   fluid_valued<T>::value_type;
template <class T             >	concept  fluid_valued_q	= complete_q<fluid_valued<T>>;


template <class          T    >	struct   apart;
template <class T             >	concept  apart_q        = fixed_valued_q<T> and fixed_sized_q<T>;
template <class T             >	using    apart_t        = typename apart<T>::array_type;
template <class T             >	using    apart_u        = typename apart<T>::value_type;
template <class T             >	XTAL_LET apart_n        =          apart<T>::size();

template <class          T    >	struct   apart	       : virtual fluid_sized<T>, virtual fluid_valued<T> {using array_type = T;};
template <fixed_valued_q T    >	struct   apart	<T   > : fixed_sized<T> {using array_type = fixed_valued_u<T>   [fixed_sized_n<T>]; using value_type = fixed_valued_u<T>  ;};
template <fixed_valued_q T    >	struct   apart	<T &&> : fixed_sized<T> {using array_type = fixed_valued_u<T>   [fixed_sized_n<T>]; using value_type = fixed_valued_u<T>  ;};
template <fixed_valued_q T    >	struct   apart	<T  &> : fixed_sized<T> {using array_type = fixed_valued_u<T>(&)[fixed_sized_n<T>]; using value_type = fixed_valued_u<T> &;};
static_assert(id_q<const float(&)[2],     apart_t<        const float(&)[2]   >>);
static_assert(id_q<      float(&)[2],     apart_t<              float(&)[2]   >>);
static_assert(id_q<const float   [2],     apart_t<        const float   [2]   >>);
static_assert(id_q<      float   [2],     apart_t<              float   [2]   >>);
static_assert(id_q<const float(&)[2],     apart_t<_std::complex<float> const &>>);
static_assert(id_q<      float(&)[2],     apart_t<_std::complex<float>       &>>);
static_assert(id_q<const float   [2],     apart_t<_std::complex<float> const  >>);
static_assert(id_q<      float   [2],     apart_t<_std::complex<float>        >>);


template <class U,        int ...Ns>	struct    arrayed;
template <class U,        int ...Ns>	using     arrayed_t = typename arrayed<U, Ns...>::array_type;
template <                int ...Ns>	XTAL_LET  arrayed_n = (some_n<Ns...> *...* upper_n<Ns>);

template <class U,        int ...Ns>	struct    arrayed                 {using array_type = U;};
template <class U, int N, int ...Ns>	struct    arrayed<U   , N, Ns...> {using array_type = const_valued_u<U, arrayed_t<U, Ns...>>   [N];};
template <class U, int N, int ...Ns>	struct    arrayed<U &&, N, Ns...> {using array_type = const_valued_u<U, arrayed_t<U, Ns...>>   [N];};
template <class U, int N, int ...Ns>	struct    arrayed<U  &, N, Ns...> {using array_type = const_valued_u<U, arrayed_t<U, Ns...>>(&)[N];};

template <class   T,      int ...Ns>	struct   devolved           : virtual arrayed<T, Ns...>, virtual fluid_valued<T>, virtual fluid_sized<identity_n<arrayed_n<Ns...>>> {};
template <apart_q T,      int ...Ns>	struct   devolved<T, Ns...> : devolved<apart_u<T> , Ns..., apart_n<T>> {};
template <class T                  >	using    devolved_u	       = based_t<typename devolved<T>::value_type>;
template <class T                  >	using    devolved_t	       =         typename devolved<T>::array_type ;
template <class T                  >	XTAL_LET devolved_n	       =                  devolved<T>::size()     ;

static_assert(id_q<      float   [2],           devolved_t<      _std::complex<float>  >>);
static_assert(id_q<      float(&)[2],           devolved_t<      _std::complex<float> &>>);
static_assert(id_q<const float   [2],           devolved_t<const _std::complex<float>  >>);
static_assert(id_q<const float(&)[2],           devolved_t<const _std::complex<float> &>>);
static_assert(id_q<      float,                 devolved_u<      _std::complex<float>  >>);
static_assert(id_q<      float,                 devolved_u<      _std::complex<float> &>>);
static_assert(id_q<      float,                 devolved_u<const _std::complex<float>  >>);
static_assert(id_q<      float,                 devolved_u<const _std::complex<float> &>>);


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Ranged...

template <class T             >	concept        column_q	= _std::is_array_v<based_t<T>> and not _std::is_array_v<_std::remove_extent_t<based_t<T>>>;
template <class T             >	concept         array_q	= _std::is_array_v<T> or fungible_q<T, _std::array<inner_valued_u<T>, tuple_sized_n<T>>>;

template <class T             >	concept       annexed_q	= requires (T t) { t(XTAL_ANY_(int));};
template <class T             >	concept       indexed_q	= requires (T t) { t[XTAL_ANY_(int)];};
template <class T             >	concept       pointed_q	= requires (T t) {*t;};
template <class T             >	using         annexed_u	= _std::remove_reference_t<decltype( XTAL_ANY_(T)(XTAL_ANY_(int)))>;
template <class T             >	using         indexed_u	= _std::remove_reference_t<decltype( XTAL_ANY_(T)[XTAL_ANY_(int)])>;
template <class T             >	using         pointed_u	= _std::remove_reference_t<decltype(*XTAL_ANY_(T))>;


template <class T             >	struct    initializer	;
template <class T             >	struct       iteratee	;
template <class T             >	struct       iterated	;
template <class T             >	struct       iterator	;
template <class T             >	struct       sentinel	;
template <class T             >	struct       distance	;
template <class T             >	struct        counted	;
template <class T             >	struct        counter	;

template <class T             >	using     initializer_u	= typename initializer<T>::value_type;
template <class T             >	using     initializer_t	= typename initializer<T>::type;
template <class T             >	using        iteratee_t	= typename    iteratee<T>::type;
template <class T             >	using        iterated_t	= typename    iterated<T>::type;
template <class T             >	using        iterator_t	= typename    iterator<T>::type;
template <class T             >	using        sentinel_t	= typename    sentinel<T>::type;
template <class T             >	using        distance_t	= typename    distance<T>::type;
template <class T             >	using         counted_t	= typename     counted<T>::type;
template <class T             >	using         counter_t	= typename     counter<T>::type;

template <class T             >	using      reiterated_t	= _xtd::ranges::subrange<iterator_t<T>, sentinel_t<T>>;
template <class T             >	using        arranged_t	= _xtd::ranges::view_interface<T>;
template <class U, class V=U  >	using        interval_t	= _xtd::ranges::iota_view<U, V>;
template <class T             >	concept      interval_q	= is_q<interval_t<iteratee_t<T>>, T>;

template <class T             >	concept      collated_q	= indexed_q<T> and annexed_q<T>;
template <class T             >	concept    correlated_q	= collated_q<T> and     is_q<annexed_u<T>, indexed_u<T>>;
template <class T             >	concept  uncorrelated_q	= collated_q<T> and not is_q<annexed_u<T>, indexed_u<T>>;

template <class T             >	concept   initializer_q	= not is_q<T, initializer_u<T>>;
template <class T             >	concept      iteratee_q	= true;
template <class T             >	concept      iterable_q	= requires (T t) {t.begin();};
template <class T             >	concept      iterated_q	= requires (T t) {t.begin(); t.size();};
template <class T             >	concept      iterator_q	= requires (T t) {*++t;};
template <class T             >	concept      sentinel_q	= iterator_q<T>;
template <class T             >	concept      distance_q	= integral_q<T>;//TODO: Expand to accommodate `counted_t<size_type>{}.size()`.
template <class T             >	concept       counter_q	= integral_q<T>;
template <class T             >	concept       counted_q	= iterated_q<T> and _std::convertible_to<T, interval_t<iteratee_t<T>>>;


template <class      T        >	                             	struct initializer    {using value_type =                   T  ; using type = _std::initializer_list<value_type>;};
template <apart_q    T        >	requires      annexed_q<T> 	struct initializer<T> {using value_type = based_t<annexed_u<T>>; using type = _std::initializer_list<value_type>;};
template <apart_q    T        >	requires un_n<annexed_q<T>>	struct initializer<T> {using value_type = based_t<  apart_u<T>>; using type = _std::initializer_list<value_type>;};

template <class      T        >	struct       iteratee    {using type =                    apart_u<T> ;};
template <iterable_q T        >	struct       iteratee<T> {using type =       pointed_u<iterator_t<T>>;};
template <iterator_q T        >	struct       iteratee<T> {using type =       pointed_u           <T> ;};
template < counter_q T        >	struct       iteratee<T> {using type =   _std::remove_reference_t<T> ;};

template <iterated_q T        >	struct       iterated<T> {using type =   _std::remove_reference_t<T> ;};
template <iterator_q T        >	struct       iterated<T> {using type =                          void ;};
template < counter_q T        >	struct       iterated<T> {using type =                 interval_t<T> ;};

template <iterable_q T        >	struct       iterator<T> {using type = decltype(XTAL_ANY_(T).begin());};
template <iterator_q T        >	struct       iterator<T> {using type =                            T  ;};
template < counter_q T        >	struct       iterator<T> {using type =      iterator_t<interval_t<T>>;};

template <iterable_q T        >	struct       sentinel<T> {using type =   decltype(XTAL_ANY_(T).end());};
template <iterator_q T        >	struct       sentinel<T> {using type =                            T  ;};

template <class      T        >	struct       distance    {using type =      distance_t<iterator_t<T>>;};
template <iterator_q T        >	struct       distance<T> {using type = XTAL_ALL_(_std::distance(XTAL_ANY_(T), XTAL_ANY_(T)));};

template <counted_q  T        >	struct        counted<T> {using type =    based_t<T>;};
template <counter_q  T        >	struct        counted<T> {using type = iterated_t<T>;};

template <counted_q  T        >	struct        counter<T> {using type = iteratee_t<T>;};
template <counter_q  T        >	struct        counter<T> {using type =    based_t<T>;};


////////////////////////////////////////////////////////////////////////////////

template <    iterated_q ...Ts>	struct     isomorphic	<Ts...> : isomorphic<iteratee_t<Ts>...> {};
template <    iterator_q ...Ts>	struct     isomorphic	<Ts...> : isomorphic<iteratee_t<Ts>...> {};

template <    iterated_q ...Ts>	struct     epimorphic	<Ts...> : epimorphic<iteratee_t<Ts>...> {};
template <    iterator_q ...Ts>	struct     epimorphic	<Ts...> : epimorphic<iteratee_t<Ts>...> {};


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Arithmetic...

template <class T             >	concept          boolean_q	=   logical_q<T>;
template <class T             >	concept          integer_q	=  integral_q<T>;
template <class T             >	concept      real_number_q	= _std::floating_point<based_t<T>>;
template <class T             >	concept   complex_number_q	=  fungible_q<T, _std::complex<inner_valued_u<T>>> and real_number_q<inner_valued_u<T>>;
template <class T             >	concept   simplex_number_q	=  integer_q<T> or real_number_q<T>;
template <class T             >	concept           number_q	=  integer_q<T> or real_number_q<T> or complex_number_q<T>;


////////////////////////////////////////////////////////////////////////////////

template <size_type N, class T, class U=T>
concept equality_p = requires (based_t<T> t, based_t<U> u)
{
	requires N == 2;
	{t == u} -> is_q<bool>;
	{t != u} -> is_q<bool>;
};
template <size_type N, class T, class U=T>
concept inequality_p = equality_p<N, T> and requires (based_t<T> t, based_t<U> u)
{
	requires N == 2;
	{t <= u} -> is_q<bool>;
	{t <  u} -> is_q<bool>;
	{t >= u} -> is_q<bool>;
	{t >  u} -> is_q<bool>;
};
template <size_type N, class T, class U=T>
concept quality_p = equality_p<N, T> and inequality_p<N, T>;


template <size_type N, class T, class U=T>
concept boolean_quantity_p = requires (based_t<T> t, based_t<U> u)
{
	requires N == 2 or requires
	{
		{!u} -> is_q<T>;
	};
	requires N == 1 or requires
	{
		{t || u} -> is_q<T>;
		{t && u} -> is_q<T>;
	};
};
template <size_type N, class T, class U=T>
concept binary_quantity_p = requires (based_t<T> t, based_t<U> u)
{
	requires N == 2 or requires
	{
		{   ~  u} -> is_q<T>;
		{t  ^= u} -> is_q<T>;
		{t  |= u} -> is_q<T>;
		{t  &= u} -> is_q<T>;
	};
	requires N == 1 or requires
	{
		{t  ^  u} -> is_q<T>;
		{t  |  u} -> is_q<T>;
		{t  &  u} -> is_q<T>;
	};
};


template <size_type N, class T, class U=T>
concept multiplicative_group_p = requires (based_t<T> t, based_t<U> u)
{
	requires N == 2 or requires
	{
		{t  *= u};// -> is_q<T>;
		{t  /= u};// -> is_q<T>;
	};
	requires N == 1 or requires
	{
		{t  *  u};// -> is_q<T>;
		{t  /  u};// -> is_q<T>;
	};
};
template <size_type N, class T, class U=T>
concept quotient_group_p = requires (based_t<T> t, based_t<U> u)
{
	requires N == 2 or requires
	{
		{t  %= u};// -> is_q<T>;
	};
	requires N == 1 or requires
	{
		{t  %  u};// -> is_q<T>;
	};
};
template <size_type N, class T, class U=T>
concept additive_group_p = requires (based_t<T> &t, based_t<U> &u)
{
	requires N == 2 or requires
	{
		{t  += u};// -> is_q<T>;
		{t  -= u};// -> is_q<T>;
		{   -  u};// -> is_q<T>;
	};
	requires N == 1 or requires
	{
		{t  +  u};// -> is_q<T>;
		{t  -  u};// -> is_q<T>;
	};
};
template <size_type N, class T, class U=T>
concept discrete_group_p = requires (based_t<T> t, based_t<U> u)
{
	requires N == 2 or requires
	{
		{t++} -> is_q<T>; {++u} -> is_q<T>;
		{t--} -> is_q<T>; {--u} -> is_q<T>;
	};
};
template <size_type N, class T, class U=T>
concept integral_group_p = integer_q<T> or discrete_group_p<N, T, U> and quotient_group_p<N, T, U>;


template <size_type N, class T, class U=T>
concept contiguous_group_p = multiplicative_group_p<N, T, U>  or additive_group_p<N, T, U>;

template <size_type N, class T, class U=T>
concept contiguous_field_p = multiplicative_group_p<N, T, U> and additive_group_p<N, T, U>;

template <size_type N, class T, class U=T>
concept continuous_field_p = contiguous_field_p<N, T, U> and not integral_group_p<0, T, U>;


template <size_type N, class T, class U=T>
concept complex_field_p = complex_number_q<T> or continuous_field_p<2, T, U> and requires (based_t<T> t)
{
	{t.real()} -> anisotropic_q<T>;
	{t.imag()} -> anisotropic_q<T>;
};
template <size_type N, class T, class U=T>
concept simplex_field_p = continuous_field_p<N, T, U> and not complex_field_p<N, T>;


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

template <class T>
XTAL_DEF_(short)
XTAL_LET lateral_f(T n)
noexcept -> auto
{
	return n;
}
template <class T>
XTAL_DEF_(short)
XTAL_LET lateral_f(T n, T m, auto ...ms)
noexcept -> auto
{
	XTAL_LET N_count = 1 + 1 + sizeof...(ms);
	XTAL_LET N_width = sizeof(T)/N_count;
	XTAL_LET N_depth = N_width << 3U;
	static_assert(N_width*N_count == sizeof(T));
	return lateral_f<T>(m|(n<<N_depth), ms...);
}

template <class T, auto ...Ms>
using lateral = constant_t<lateral_f<T>(Ms...)>;


}//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
