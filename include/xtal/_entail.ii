namespace _entail
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Standard...

using null_t = XTAL_STD_(null_t);
using unit_t = XTAL_STD_(unit_t);
using sign_t = XTAL_STD_(sign_t);
using byte_t = XTAL_STD_(byte_t);
using size_t = XTAL_STD_(size_t);
using size_s = XTAL_STD_(size_s);
using real_s = XTAL_STD_(real_s);

XTAL_LET_(size_t) size_0{0};
XTAL_LET_(size_t) size_1{1};

template <auto N_0=0>
XTAL_LET    sign_f(auto &&i)
XTAL_0EX -> sign_t
{
	XTAL_IF0
	XTAL_0IF (N_0 ==  0) {return (0 <  i) - (i <  0);}
	XTAL_0IF (N_0 == +1) {return (0 <= i) - (i <  0);}
	XTAL_0IF (N_0 == -1) {return (0 <  i) - (i <= 0);}
}

template <auto N, auto  ...Ms>	XTAL_ASK      exclusive_q =	(...and (N != Ms));
template <auto N, auto  ...Ms>	XTAL_ASK      inclusive_q =	(...or  (N == Ms));
template <auto N, auto  N_0=0>	XTAL_ASK           sign_p =	inclusive_q<N, -1, N_0, 1>;
template <auto N, auto  N_0=0>	XTAL_LET           sign_n =	sign_f<N_0>(N);

template <class         ...Ts>	XTAL_ASK           some_q =	0 < sizeof...(Ts);
template <auto          ...Ns>	XTAL_ASK           some_n =	0 < sizeof...(Ns);
template <class         ...Ts>	XTAL_ASK           none_q =	not some_q<Ts...>;
template <auto          ...Ns>	XTAL_ASK           none_n =	not some_n<Ns...>;


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Structural...

template <class               ...Ts>	XTAL_ASK         common_q =	requires {typename _std::common_type_t<Ts...>;};
template <class               ...Ts>	XTAL_USE         common_t =	                   _std::common_type_t<Ts...>;

template <class  T                 >	XTAL_ASK        mutable_q =	not _std::     is_const_v<T>;
template <class  T                 >	XTAL_ASK      immutable_q =	    _std::     is_const_v<T>;
template <class  T                 >	XTAL_USE        mutable_t =	    _std:: remove_const_t<T>;
template <class  T                 >	XTAL_USE      immutable_t =	    _std::    add_const_t<T>;



////////////////////////////////////////////////////////////////////////////////

template <              class ...Ts>	XTAL_TYP      identical;// `is_same`
template <              class ...Ts>	XTAL_TYP      isotropic;// `is_same` modulo qualifiers
template <              class ...Ts>	XTAL_TYP      epitropic;// `is_constructible`

template <class      T, class ...Ts>	XTAL_TYP      identical<T, Ts...> : _std::conjunction<_std::is_same<Ts, T>...> {};
template <class      T, class ...Ts>	XTAL_TYP      isotropic<T, Ts...> : _std::conjunction<_std::is_same<_std::remove_cvref_t<Ts>, _std::remove_cvref_t<T>>...> {};
template <class      T, class ...Ts>	XTAL_TYP      epitropic<T, Ts...> : _std::conjunction<_std::is_constructible<Ts, T>...> {};

template <              class ...Ts>	XTAL_ASK      isotropic_q =	    isotropic<Ts...>::value;
template <              class ...Ts>	XTAL_ASK      epitropic_q =	    epitropic<Ts...>::value;
template <              class ...Ts>	XTAL_ASK    anisotropic_q =	not isotropic<Ts...>::value;
template <              class ...Ts>	XTAL_ASK    anepitropic_q =	not epitropic<Ts...>::value;

template <              class ...Ts>	XTAL_ASK             id_q =	identical<Ts...>::value;
template <              class ...Ts>	XTAL_ASK             is_q =	isotropic<Ts...>::value;
template <              class ...Ts>	XTAL_ASK             as_q =	epitropic<Ts...>::value;
template <class      T, class ...Ys>	XTAL_ASK             as_p =	_std::constructible_from<T, Ys...>;
template <class      T, class    Y >	XTAL_ASK       fungible_q =	_std::derived_from<_std::remove_cvref_t<T>, _std::remove_cvref_t<Y>> or _std::derived_from<_std::remove_cvref_t<Y>, _std::remove_cvref_t<T>>;
template <class      T, class    Y >	XTAL_ASK     infungible_q =	not fungible_q<T, Y>;

template <class      X, class    F >	XTAL_ASK     idempotent_p =	is_q<XTAL_TYP_(XTAL_VAL_(F) (XTAL_VAL_(X))), X>;


////////////////////////////////////////////////////////////////////////////////

template <class         T >	XTAL_ASK        Nominal_q =	_std::derived_from<T, _std::integral_constant<typename T::type::value_type, T::type::value>>;
template <auto          N >	XTAL_USE        Nominal_t =	_std::integral_constant<decltype(N), N>;
template <auto          N >	XTAL_USE        Logical_t =	_std::integral_constant<bool,        N>;
template <auto          N >	XTAL_USE        Ordinal_t =	_std::integral_constant<int,         N>;
template <auto          N >	XTAL_USE       Cardinal_t =	_std::integral_constant<size_t,      N>;
template <auto          N >	XTAL_USE       Integral_t =	_std::integral_constant<int,         N>;

template <class         T >	XTAL_ASK        logical_  =	_std::        same_as<_std::decay_t<T>, bool>;
template <class         T >	XTAL_ASK        ordinal_  =	_std::    is_signed_v<_std::decay_t<T>>;
template <class         T >	XTAL_ASK       cardinal_  =	_std::  is_unsigned_v<_std::decay_t<T>>;
template <class         T >	XTAL_ASK       integral_  =	_std::     integral  <_std::decay_t<T>>;

template <class         T >	XTAL_ASK        Logical_q =	 Nominal_q<T> and   logical_<typename T::value_type>;
template <class         T >	XTAL_ASK        Ordinal_q =	 Nominal_q<T> and   ordinal_<typename T::value_type>;
template <class         T >	XTAL_ASK       Cardinal_q =	 Nominal_q<T> and  cardinal_<typename T::value_type>;
template <class         T >	XTAL_ASK       Integral_q =	 Nominal_q<T> and  integral_<typename T::value_type>;

template <class         T >	XTAL_ASK        logical_q =	 Logical_q<T>  or   logical_<T>;
template <class         T >	XTAL_ASK        ordinal_q =	 Ordinal_q<T>  or   ordinal_<T>;
template <class         T >	XTAL_ASK       cardinal_q =	Cardinal_q<T>  or  cardinal_<T>;
template <class         T >	XTAL_ASK       integral_q =	Integral_q<T>  or  integral_<T>;

template <class         T >	XTAL_ASK       Terminal_q =	Integral_q<T> and 0 == T::value;
template <class         T >	XTAL_ASK        Liminal_q =	Integral_q<T> and 0 != T::value;
template <Liminal_q     T >	XTAL_USE     Subliminal_s =	Nominal_t<(T{} - sign_n<T{}>)>;
template <Liminal_q     T >	XTAL_USE    Semiliminal_s =	Nominal_t<(T{} >> 1)>;

template <int N           >	XTAL_TYP     Bisordinal   :	Nominal_t<N> {XTAL_TO4_(XTAL_OP0_(implicit) real_s(), N * real_s(0.5));};
template <int N, int ...Ns>	XTAL_TYP     Fractional    	             {XTAL_TO4_(XTAL_OP0_(implicit) real_s(), N + real_s(1.0)/Fractional<Ns...>{});};
template <int N           >	XTAL_TYP     Fractional<N>:	Nominal_t<N> {XTAL_TO4_(XTAL_OP0_(implicit) real_s(), N);};

template <       size_t N >	XTAL_TYP      Factorial   :	Nominal_t<N * Factorial<N - 1>{}> {};
template <                >	XTAL_TYP      Factorial<0>:	Nominal_t<1> {};

static_assert(Factorial <5      >{} == 120);
static_assert(Fractional<2      >{} == 2.0);
static_assert(Fractional<1, 1   >{} == 2.0);
static_assert(Fractional<1, 1, 1>{} == 1.5);


////////////////////////////////////////////////////////////////////////////////

template <class T>
XTAL_ASK atomic_q = _std::is_trivially_copyable_v<T>
	and _std::is_copy_constructible_v<T> and _std::is_copy_assignable_v<T>
	and _std::is_move_constructible_v<T> and _std::is_move_assignable_v<T>
	and true;

template <class      T             >	XTAL_ASK           void_q =	_std::same_as<T, void>;
template <class      T             >	XTAL_ASK     incomplete_q =	not requires {typename _std::void_t<decltype(sizeof(T))>;};
template <class      T             >	XTAL_ASK       complete_q =	    requires {typename _std::void_t<decltype(sizeof(T))>;};
template <              class ...Ts>	XTAL_TYP       complete              {class type {};};
template <complete_q T, class ...Ts>	XTAL_TYP       complete<T, Ts...>    {using type = T;};
template <class      T, class ...Ts>	XTAL_TYP       complete<T, Ts...>  :	complete<Ts...> {};
template <              class ...Ts>	XTAL_USE       complete_t =	typename complete<Ts...>::type;

template <class         T >	XTAL_USE          based_t =	_std::remove_cvref_t<complete_t<T>>;
template <class         T >	XTAL_ASK          based_q =	    atomic_q<T>;
template <class         T >	XTAL_ASK        unbased_q =	not atomic_q<T>;

template <class         T >	XTAL_TYP         debased           :	Logical_t<0> {using type = _std::remove_reference_t<T>;};
template <unbased_q     T >	XTAL_TYP         debased<T       &>:	Logical_t<1> {using type =       T*;};
template <unbased_q     T >	XTAL_TYP         debased<T const &>:	Logical_t<1> {using type = const T*;};
template <class         T >	XTAL_ASK         debased_q         =	debased<T>::value;

template <class         T >	XTAL_TYP         rebased           :	Logical_t<1> {using type = based_t<T>;};
template <unbased_q     T >	XTAL_TYP         rebased<T       &>:	Logical_t<0> {using type =         T&;};
template <unbased_q     T >	XTAL_TYP         rebased<T const &>:	Logical_t<0> {using type =   const T&;};
template <class         T >	XTAL_ASK         rebased_q         =	rebased<T>::value;


////////////////////////////////////////////////////////////////////////////////

template <class         T >	XTAL_USE       invalued_t =	_std::remove_extent_t<_std::remove_reference_t<T>> ;
template <class         T >	XTAL_ASK       invalued_q =	complete_q<invalued_t<T>> and not _std::same_as<invalued_t<T>, _std::remove_reference_t<T>>;

template <class         T >	XTAL_USE       unvalued_t =	typename _std::remove_reference_t<T>::value_type;
template <class         T >	XTAL_ASK       unvalued_q =	complete_q<unvalued_t<T>>;

template <class         T >	XTAL_ASK        varity_q =	unvalued_q<T> and incomplete_q<_std::tuple_size<_std::remove_reference_t<T>>>;
template <class         T >	XTAL_ASK         arity_q =	unvalued_q<T> and   complete_q<_std::tuple_size<_std::remove_reference_t<T>>>;

template <class         T >	XTAL_TYP       devalued   ;
template <class         T >	XTAL_USE       devalued_t =	typename devalued<_std::remove_reference_t<T>>::value_type;
template <class         T >	XTAL_LET       devalued_n =	         devalued<_std::remove_reference_t<T>>::size();
template <class         T >	XTAL_ASK       devalued_q =	not is_q<T, devalued_t<T>>;
template <class         T >	XTAL_TYP       devalued                     {using value_type =            T  ; XTAL_FN2 size() XTAL_0EX_TO_(             size_t(1));};
template <   invalued_q T >	XTAL_TYP       devalued<T>                  {using value_type = invalued_t<T> ; XTAL_FN2 size() XTAL_0EX_TO_(     _std::extent_v<T>);};
template <     varity_q T >	XTAL_TYP       devalued<T>                  {using value_type = unvalued_t<T> ; XTAL_FN2 size() XTAL_0EX_TO_(             size_t(0));};
template <      arity_q T >	XTAL_TYP       devalued<T>                  {using value_type = unvalued_t<T> ; XTAL_FN2 size() XTAL_0EX_TO_( _std::tuple_size_v<T>);};
template <class  U        >	XTAL_TYP       devalued<_std::complex<U>>   {using value_type =            U  ; XTAL_FN2 size() XTAL_0EX_TO_(             size_t(2));};
template <class  U, int N >	XTAL_TYP       devalued<_std::array<U, N>>  {using value_type =            U  ; XTAL_FN2 size() XTAL_0EX_TO_(             size_t(N));};

template <class U,        int ...Ns>	XTAL_TYP    involved               {using array_type = U;};
template <class U, int N, int ...Ns>	XTAL_TYP    involved<U, N, Ns...>  {using array_type = typename involved<U, Ns...>::array_type[N];};

template <class  U,       int ...Ns>	XTAL_TYP    devolved;
//mplate <                int ...Ns>	XTAL_USE    devolved_x =	_xtd::extents<int, Ns...>;
//mplate <class  T,     class ..._s>	XTAL_USE    devolved_s =	typename devolved<_std::remove_reference_t<T>>::template subtype<_s...>;
template <class  T                 >	XTAL_USE    devolved_t =	typename devolved<_std::remove_reference_t<T>>::value_type;
template <class  T                 >	XTAL_LET    devolved_n =	         devolved<_std::remove_reference_t<T>>::size();

template <devalued_q T, int ...Ns> requires   mutable_q<T>
XTAL_TYP devolved<T, Ns...>
:	devolved<devalued_t<T> , Ns..., devalued_n<T>>
{
};
template <devalued_q T, int ...Ns> requires immutable_q<T>
XTAL_TYP devolved<T, Ns...>
:	devolved<immutable_t<devalued_t<mutable_t<T>>>, Ns..., devalued_n<T>>
{
};
template <class U, int ...Ns>
struct devolved : involved<U, Ns...>
{
	using value_type = U;
//	using extents_type = _xtd::extents<U, Ns...>;
//	template <class ..._s> using subtype = _xtd::mdspan<U, extents_type, _s...>;

	XTAL_FN2 size()
	XTAL_0EX
	{
		if constexpr (sizeof...(Ns) and (...and (0 < Ns))) {
			return (size_t) (1 *...* Ns);
		}
		else {
			return (size_t) (0);
		}
	};

};
static_assert(id_q<      double    [2], typename devolved<      _std::complex<double>>::array_type  >);
static_assert(id_q<      double (&)[2], typename devolved<      _std::complex<double>>::array_type &>);
static_assert(id_q<const double    [2], typename devolved<const _std::complex<double>>::array_type  >);
static_assert(id_q<const double (&)[2], typename devolved<const _std::complex<double>>::array_type &>);


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Ranged...

template <class         T >	XTAL_ASK          array_q =	_std::is_array_v<T> or fungible_q<T, _std::array<devalued_t<T>, devalued_n<T>>>;

template <class         T >	XTAL_ASK       accessed_q =	requires (T t) { t[XTAL_VAL_(size_t)];};
template <class         T >	XTAL_ASK        pointer_q =	requires (T t) {*t;};
template <class         T >	XTAL_USE       accessed_t =	_std::remove_reference_t<decltype( XTAL_VAL_(T)[XTAL_VAL_(size_t)])>;
template <class         T >	XTAL_USE        pointer_t =	_std::remove_reference_t<decltype(&XTAL_VAL_(T))>;
template <class         T >	XTAL_USE        pointee_t =	_std::remove_reference_t<decltype(*XTAL_VAL_(T))>;

template <class         T >	XTAL_ASK          begin_q =	requires (T &t) {*t.begin();};
template <class         T >	XTAL_ASK          front_q =	requires (T &t) { t.front();};
template <class         T >	XTAL_ASK           back_q =	requires (T &t) { t. back();};
template <class         T >	XTAL_ASK            end_q =	requires (T &t) {*t.  end();};

template <class         T >	XTAL_USE          begin_t =	decltype ( XTAL_VAL_(T).begin() );
template <class         T >	XTAL_USE          front_t =	decltype (*XTAL_VAL_(T).begin() );
template <class         T >	XTAL_USE           back_t =	decltype (*XTAL_VAL_(T).  end() );
template <class         T >	XTAL_USE            end_t =	decltype ( XTAL_VAL_(T).  end() );

template <class         T >	XTAL_USE       sizeable_t =	decltype ( XTAL_VAL_(T).  size() );
template <class         T >	XTAL_ASK       sizeable_q =	requires { XTAL_VAL_(T).  size();};
template <class         T >	XTAL_ASK     resizeable_q =	requires { XTAL_VAL_(T).resize(XTAL_VAL_(sizeable_t<T>));};

template <class         T >	XTAL_ASK        bounded_q =	begin_q<T> and     end_q<T>;
template <class         T >	XTAL_ASK      unbounded_q =	begin_q<T> and not end_q<T>;

template <class         T >	XTAL_ASK        debrace_q =	requires {typename T::initializer_list;};
template <class         T >	XTAL_ASK      reembrace_q =	debrace_q<T> or devalued_q<T>;
template <class         T >	XTAL_TYP      reembrace       {using type = _std::initializer_list<devalued_t<T>>;};
template <debrace_q     T >	XTAL_TYP      reembrace<T>    {using type = typename T::initializer_list;};
template <class         T >	XTAL_USE      reembrace_t =	typename reembrace<T>::type;
template <class         U >	XTAL_USE        embrace_t =	_std::initializer_list<U>;


template <class         T >	XTAL_TYP       iteratee   ;
template <class         T >	XTAL_TYP       iterated   ;
template <class         T >	XTAL_TYP       iterator   ;
template <class         T >	XTAL_TYP       sentinel   ;
template <class         T >	XTAL_TYP       distance   ;
template <class         T >	XTAL_TYP        counted   ;
template <class         T >	XTAL_TYP        counter   ;

template <class         T >	XTAL_USE       iteratee_t =	typename iteratee<T>::type;
template <class         T >	XTAL_USE       iterated_t =	typename iterated<T>::type;
template <class         T >	XTAL_USE       iterator_t =	typename iterator<T>::type;
template <class         T >	XTAL_USE       sentinel_t =	typename sentinel<T>::type;
template <class         T >	XTAL_USE       distance_t =	typename distance<T>::type;
template <class         T >	XTAL_USE        counted_t =	typename  counted<T>::type;
template <class         T >	XTAL_USE        counter_t =	typename  counter<T>::type;

template <class         U >	XTAL_USE       interval_t =	_xtd::ranges::iota_view<U, U>;
template <class         T >	XTAL_ASK       interval_q =	is_q<interval_t<iteratee_t<T>>, T>;

template <class         T >	XTAL_ASK       iteratee_q =	true;
template <class         T >	XTAL_ASK       iterable_q =	begin_q<T>;
template <class         T >	XTAL_ASK       iterated_q =	begin_q<T> and front_q<T>;
template <class         T >	XTAL_ASK       iterator_q =	requires (T t) {*++t;};
template <class         T >	XTAL_ASK       sentinel_q =	iterator_q<T>;
template <class         T >	XTAL_ASK       distance_q =	_std::integral<based_t<T>>;//TODO: Expand to accommodate `counted_t<size_t>{}.size()`.
template <class         T >	XTAL_ASK        counter_q =	_std::integral<based_t<T>>;
template <class         T >	XTAL_ASK        counted_q =	iterated_q<T> and _std::convertible_to<T, interval_t<iteratee_t<T>>>;

template <class         T >	XTAL_TYP       iteratee    	{using type =                devalued_t<T> ;};
template <iterable_q    T >	XTAL_TYP       iteratee<T> 	{using type =        pointee_t<begin_t<T>>;};
template <iterator_q    T >	XTAL_TYP       iteratee<T> 	{using type =        pointee_t        <T> ;};
template < counter_q    T >	XTAL_TYP       iteratee<T> 	{using type = _std::remove_reference_t<T> ;};

template <iterated_q    T >	XTAL_TYP       iterated<T> 	{using type = _std::remove_reference_t<T> ;};
template <iterator_q    T >	XTAL_TYP       iterated<T> 	{using type =                        void ;};
template < counter_q    T >	XTAL_TYP       iterated<T> 	{using type =               interval_t<T> ;};

template <iterable_q    T >	XTAL_TYP       iterator<T>		{using type =                  begin_t<T> ;};
template <iterator_q    T >	XTAL_TYP       iterator<T>		{using type =                          T  ;};
template < counter_q    T >	XTAL_TYP       iterator<T>		{using type =    iterator_t<interval_t<T>>;};

template <iterable_q    T >	XTAL_TYP       sentinel<T> 	{using type =                    end_t<T> ;};
template <iterator_q    T >	XTAL_TYP       sentinel<T> 	{using type =                          T  ;};

template <class         T >	XTAL_TYP       distance    	{using type =    distance_t<iterator_t<T>>;};
template <iterator_q    T >	XTAL_TYP       distance<T> 	{using type = XTAL_TYP_(_std::distance(XTAL_VAL_(T), XTAL_VAL_(T)));};

template <counted_q     T >	XTAL_TYP        counted<T> 	{using type =    based_t<T>;};
template <counter_q     T >	XTAL_TYP        counted<T> 	{using type = iterated_t<T>;};

template <counted_q     T >	XTAL_TYP        counter<T> 	{using type = iteratee_t<T>;};
template <counter_q     T >	XTAL_TYP        counter<T> 	{using type =    based_t<T>;};


template <class         T >	XTAL_TYP     reiterated    	{using type = _xtd::ranges::subrange<iterator_t<T>, sentinel_t<T>>;};
template <class         T >	XTAL_USE     reiterated_t =	typename reiterated<T>::type;
template <class         T >	XTAL_USE     initerated_t =	_xtd::ranges::view_interface<T>;


////////////////////////////////////////////////////////////////////////////////

template <class      ...Ts>	XTAL_TYP     isomorphic        : isotropic<Ts...> {};
template <iterated_q ...Ts>	XTAL_TYP     isomorphic<Ts...> : isomorphic<iteratee_t<Ts>...> {};
template <iterator_q ...Ts>	XTAL_TYP     isomorphic<Ts...> : isomorphic<iteratee_t<Ts>...> {};

template <class      ...Ts>	XTAL_TYP     epimorphic        : epitropic<Ts...> {};
template <iterated_q ...Ts>	XTAL_TYP     epimorphic<Ts...> : epimorphic<iteratee_t<Ts>...> {};
template <iterator_q ...Ts>	XTAL_TYP     epimorphic<Ts...> : epimorphic<iteratee_t<Ts>...> {};

template <class      ...Ts>	XTAL_ASK     isomorphic_q =	isomorphic<Ts...>::value;
template <class      ...Ts>	XTAL_ASK     epimorphic_q =	epimorphic<Ts...>::value;

template <class      ...Ts>	XTAL_ASK   anisomorphic_q =	not isomorphic_q<Ts...>;
template <class      ...Ts>	XTAL_ASK   anepimorphic_q =	not epimorphic_q<Ts...>;


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Arithmetic...

template <class      T >	XTAL_ASK   integral_number_q =	 _std::integral      <based_t<T>>;
template <class      T >	XTAL_ASK       real_number_q =	 _std::floating_point<based_t<T>>;
template <class      T >	XTAL_ASK    complex_number_q =	fungible_q<T, _std::complex<unvalued_t<T>>> and real_number_q<unvalued_t<T>>;
template <class      T >	XTAL_ASK            number_q =	integral_number_q<T> or real_number_q<T> or complex_number_q<T>;


////////////////////////////////////////////////////////////////////////////////

template <size_t N, class T, class U=T>
concept equality_p = requires (based_t<T> t, based_t<U> u)
{
	requires N == 2;
	{t == u} -> is_q<bool>;
	{t != u} -> is_q<bool>;
};
template <size_t N, class T, class U=T>
concept inequality_p = equality_p<N, T> and requires (based_t<T> t, based_t<U> u)
{
	requires N == 2;
	{t <= u} -> is_q<bool>;
	{t <  u} -> is_q<bool>;
	{t >= u} -> is_q<bool>;
	{t >  u} -> is_q<bool>;
};
template <size_t N, class T, class U=T>
concept quality_p = equality_p<N, T> and inequality_p<N, T>;


template <size_t N, class T, class U=T>
concept boolean_lattice_p = requires (based_t<T> t, based_t<U> u)
{
	requires N == 2 or requires
	{
		{!u} -> is_q<T>;
	};
	requires N == 1 or requires
	{
		{t || u} -> is_q<T>;
		{t && u} -> is_q<T>;
	};
};
template <size_t N, class T, class U=T>
concept binary_lattice_p = requires (based_t<T> t, based_t<U> u)
{
	requires N == 2 or requires
	{
		{   ~  u} -> is_q<T>;
		{t  ^= u} -> is_q<T>;
		{t  |= u} -> is_q<T>;
		{t  &= u} -> is_q<T>;
	};
	requires N == 1 or requires
	{
		{t  ^  u} -> is_q<T>;
		{t  |  u} -> is_q<T>;
		{t  &  u} -> is_q<T>;
	};
};


template <size_t N, class T, class U=T>
concept multiplicative_group_p = requires (based_t<T> t, based_t<U> u)
{
	requires N == 2 or requires
	{
		{t  *= u};// -> is_q<T>;
		{t  /= u};// -> is_q<T>;
	};
	requires N == 1 or requires
	{
		{t  *  u};// -> is_q<T>;
		{t  /  u};// -> is_q<T>;
	};
};
template <size_t N, class T, class U=T>
concept additive_group_p = requires (based_t<T> t, based_t<U> u)
{
	requires N == 2 or requires
	{
		{t  += u};// -> is_q<T>;
		{t  -= u};// -> is_q<T>;
		{   -  u};// -> is_q<T>;
	};
	requires N == 1 or requires
	{
		{t  +  u};// -> is_q<T>;
		{t  -  u};// -> is_q<T>;
	};
};
template <size_t N, class T, class U=T>
concept discrete_group_p = requires (based_t<T> t, based_t<U> u)
{
	requires N == 2 or requires
	{
		{t  ++  } -> is_q<T>;
		{   ++ u} -> is_q<T>;
		{t  --  } -> is_q<T>;
		{   -- u} -> is_q<T>;
	};
};
template <size_t N, class T, class U=T>
concept quotient_group_p = requires (based_t<T> t, based_t<U> u)
{
	requires N == 2 or requires
	{
		{t  %= u};// -> is_q<T>;
	};
	requires N == 1 or requires
	{
		{t  %  u};// -> is_q<T>;
	};
};
template <size_t N, class T, class U=T>
concept integral_group_p = integral_number_q<T> or discrete_group_p<N, T, U> and quotient_group_p<N, T, U>;


template <size_t N, class T, class U=T>
concept contiguous_group_p = multiplicative_group_p<N, T, U>  or additive_group_p<N, T, U>;

template <size_t N, class T, class U=T>
concept contiguous_field_p = multiplicative_group_p<N, T, U> and additive_group_p<N, T, U>;

template <size_t N, class T, class U=T>
concept continuous_field_p = contiguous_field_p<N, T, U> and not integral_group_p<0, T, U>;


template <size_t N, class T, class U=T>
concept complex_field_p = complex_number_q<T> or continuous_field_p<2, T, U> and requires (based_t<T> t)
{
	{t.real()} -> anisotropic_q<T>;
	{t.imag()} -> anisotropic_q<T>;
};
template <size_t N, class T, class U=T>
concept simplex_field_p = continuous_field_p<N, T, U> and not complex_field_p<N, T>;


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

template <class T>
XTAL_FN2 lateral_f(T n)
XTAL_0EX
{
	return n;
}
template <class T>
XTAL_FN2 lateral_f(T n, T m, auto ...ms)
XTAL_0EX
{
	XTAL_SET N_count = 1 + 1 + sizeof...(ms);
	XTAL_SET N_width = sizeof(T)/N_count;
	XTAL_SET N_depth = N_width << 3;
	static_assert(N_width*N_count == sizeof(T));
	return lateral_f<T>(m|(n<<N_depth), ms...);
}

template <class T, auto ...Ms>
using lateral = Nominal_t<lateral_f<T>(Ms...)>;


}//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
