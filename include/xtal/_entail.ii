









////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Standard...

using extent_type =        _retail:: extent_type;
using   size_type =        _retail::   size_type;
using   sign_type =        _retail::   sign_type;
using   void_type =        _retail::   void_type;
using   null_type =        _retail::   null_type;
//ing   unit_type =        _retail::   unit_type;
class   unit_type : public _retail::   unit_type
{
	using S_ = _retail::unit_type;

public:
	using S_::S_;

};
template <auto  N>	using  extent_constant_t	=  typename _retail:: extent_constant_t<N>;
template <auto  N>	using    size_constant_t	=  typename _retail::   size_constant_t<N>;
template <auto  N>	using    sign_constant_t	=  typename _retail::   sign_constant_t<N>;


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Structural...

template <         class ...Ts>	concept     isotropic_q	=           _retail::    isotropic_q<   Ts...>;
template <         class ...Ts>	concept     epitropic_q	=           _retail::    epitropic_q<   Ts...>;
template <         class ...Ts>	concept    isomorphic_q	=           _retail::   isomorphic_q<   Ts...>;
template <         class ...Ts>	concept    epimorphic_q	=           _retail::   epimorphic_q<   Ts...>;

template <         class ...Ts>	concept      fungible_q	=           _retail::     fungible_q<   Ts...>; //< `T` and `Ts...` are   related by inheritance.
template <         class ...Ts>	concept    infungible_q	=           _retail::   infungible_q<   Ts...>; //< `T` and `Ts...` are unrelated by inheritance.


template <         class ...Ts>	using          common_t	=           _retail::       common_t<Ts ...> ;
template <         class ...Ts>	concept        common_q	=           _retail::       common_q<Ts ...> ;
template <         class ...Ts>	using           cased_t	=  common_t<_retail::        based_t<Ts>...> ;
template <class T             >	using           based_t	=           _retail::        based_t<T     > ;
template <         class ...Ts>	concept         based_q	= (...and   _retail::        based_q<Ts    >);
template <         class ...Ts>	concept       unbased_q	= (...and   _retail::      unbased_q<Ts    >);


template <class T             >	using        identity_t	=           _retail::     identity_t<T      >;
template <class T             >	using        identity_u	=           _retail::     identity_u<T      >;
template <class T             >	concept      identity_q	=           _retail::     identity_q<T      >;

template <         class ...Ts>	using        complete_t	=  typename _retail::     complete_t<Ts ...> ;
template <         class ...Ts>	concept      complete_q	= (...and   _retail::     complete_q<Ts    >);
template <         class ...Ts>	concept    incomplete_q	= (...and   _retail::   incomplete_q<Ts    >);

template <         class ...Ts>	concept        vacant_q	= (...and   _retail::       vacant_q<Ts    >);
template <         class ...Ts>	concept       present_q	= (...and   _retail::      present_q<Ts    >);

template <         class ...Ts>	concept     molecular_q	= (...and   _retail::    molecular_q<Ts    >);
template <         class ...Ts>	concept        atomic_q	= (...and   _retail::       atomic_q<Ts    >);


template <         auto  ...Ns>	concept     different_n	=           _retail::    different_n<   Ns...>;//< `Ns...` are different values.
template <         auto  ...Ns>	concept          same_n	=           _retail::         same_n<   Ns...>;//< `Ns...` are identical values.
template <         class ...Ts>	concept     different_q	=           _retail::    different_q<   Ts...>;//< `Ts...` are different modulo qualifiers.
template <         class ...Ts>	concept          same_q	=           _retail::         same_q<   Ts...>;//< `Ts...` are identical modulo qualifiers.
template <         class ...Ts>	concept          make_q	=           _retail::         make_q<   Ts...>;//< `Ts...` are constructible from `Ts[0]`.
template <class T, class ...Ts>	concept          make_p	=           _retail::         make_p<T, Ts...>;//< `T` is constructible from `Ts...`.


////////////////////////////////////////////////////////////////////////////////

template <template <class> class T_>      using derive_t	=  typename _retail::derive<T_>::type;///< Resolves CRTP `template` as a type.

template <class T=void        >	using           evoke  	=           _retail::        evoke  <T       >;///< Defines a constant factory for the supplied type.
template <class T=void        >	using           evoke_t	=           _retail::        evoke_t<T       >;///< Defines a          factory for the supplied type.
template <class F, class ...Xs>	using          return_t	=           _retail::       return_t<F, Xs...>;
template <class F, class ...Xs>	concept    applicable_p	=           _retail::   applicable_p<F, Xs...>;
template <class F, class ...Xs>	concept  inapplicable_p	=           _retail:: inapplicable_p<F, Xs...>;
template <         class ...Fs>	concept    applicable_q	= (...and   _retail::   applicable_q<   Fs   >);
template <         class ...Fs>	concept  inapplicable_q	= (...and   _retail:: inapplicable_q<   Fs   >);

template <class F, class ...Xs>	concept  automorphism_p	= (...and   _retail:: automorphism_p<F, Xs   >);//< `Xs` are unchanged by `F ...`.
template <class X, class ...Fs>	concept  automorphism_q	= (...and   _retail:: automorphism_q<X, Fs   >);//< `X `  is unchanged by `Fs...`.



////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Valued...

template <auto  N, auto   Z=0 >	auto constexpr   sign_n	=           _retail::              sign_n<N, Z    >;
template <auto  M, auto     N >	auto constexpr modulo_m	=           _retail::            modulo_m<M, N    >;
template <auto  M, auto     N >	auto constexpr  above_m	=           _retail::             above_m<M, N    >;
template <auto  M, auto     N >	auto constexpr  below_m	=           _retail::             below_m<M, N    >;
template <auto  M, auto  ...Ns>	concept         above_n =           _retail::             above_n<M, Ns...>;
template <auto  M, auto  ...Ns>	concept         below_n =           _retail::             below_n<M, Ns...>;
template <auto  N, auto  ...Ms>	concept            in_n	=           _retail::                in_n<N, Ms...>;
template <auto  N, auto  ...Ms>	concept            un_n	=           _retail::                un_n<N, Ms...>;
template <class T, class ...Ts>	concept            in_q	=           _retail::                in_q<T, Ts...>;
template <class T, class ...Ts>	concept            un_q	=           _retail::                un_q<T, Ts...>;

template <class          ...Ts>	concept      variable_q	= (...and   _retail::          variable_q<based_t<Ts>>);
template <class          ...Ts>	concept      constant_q	= (...and   _retail::          constant_q<based_t<Ts>>);
template <auto   N=null_type{}>	using        constant_t	=           _retail::          constant_t<N >  ;

XTAL_DEF_(return,inline,let)
variable_f(auto &&x)
noexcept -> decltype(auto)
{
	using X = XTAL_ALL_(x);
	XTAL_IF0
	XTAL_0IF (variable_q<X>) {return XTAL_REF_(x);}
	XTAL_0IF (constant_q<X>) {return        X{}();}
}

auto constexpr  zero = constant_t<[] XTAL_0FN_(value) (0   )>{};
auto constexpr  half = constant_t<[] XTAL_0FN_(value) (0.5F)>{};
auto constexpr   one = constant_t<[] XTAL_0FN_(value) (1   )>{};
auto constexpr   two = constant_t<[] XTAL_0FN_(value) (2   )>{};
auto constexpr three = constant_t<[] XTAL_0FN_(value) (3   )>{};

static_assert(constant_q<decltype( half)>);
static_assert(constant_q<decltype(+half)>);
static_assert(constant_q<decltype(-half)>);

template <auto  N> auto constexpr half_n = constant_t<[] XTAL_0FN_(value) (1.F/(one << N))>{};
template <auto  N> auto constexpr  two_n = constant_t<[] XTAL_0FN_(value) (1.F*(one << N))>{};

template <auto  N       >	using     integral_constant_t	=  typename _retail:: integral_constant_t<N>;
template <auto  N       >	using     cardinal_constant_t	=  typename _retail:: cardinal_constant_t<N>;
template <auto  N       >	using      ordinal_constant_t	=  typename _retail::  ordinal_constant_t<N>;
template <auto  N       >	using      logical_constant_t	=  typename _retail::  logical_constant_t<N>;

template <class 	 ...Ts>  concept   integral_variable_q	= (...and   _retail:: integral_variable_q<Ts>);
template <class 	 ...Ts>  concept   cardinal_variable_q	= (...and   _retail:: cardinal_variable_q<Ts>);
template <class 	 ...Ts>  concept    ordinal_variable_q	= (...and   _retail::  ordinal_variable_q<Ts>);
template <class 	 ...Ts>  concept    logical_variable_q	= (...and   _retail::  logical_variable_q<Ts>);
template <class 	 ...Ts>  concept       real_variable_q	= (...and   _retail::     real_variable_q<Ts>);
template <class 	 ...Ts>  concept    complex_variable_q	= (...and   _retail::  complex_variable_q<Ts>);
template <class 	 ...Ts>  concept    simplex_variable_q	= (...and   _retail::  simplex_variable_q<Ts>);
template <class 	 ...Ts>  concept    numeric_variable_q	= (...and   _retail::  numeric_variable_q<Ts>);

template <class 	 ...Ts>  concept   integral_constant_q	= (...and   _retail:: integral_constant_q<Ts>);
template <class 	 ...Ts>  concept   cardinal_constant_q	= (...and   _retail:: cardinal_constant_q<Ts>);
template <class 	 ...Ts>  concept    ordinal_constant_q	= (...and   _retail::  ordinal_constant_q<Ts>);
template <class 	 ...Ts>  concept    logical_constant_q	= (...and   _retail::  logical_constant_q<Ts>);
template <class 	 ...Ts>  concept       real_constant_q	= (...and   _retail::     real_constant_q<Ts>);
template <class 	 ...Ts>  concept    complex_constant_q	= (...and   _retail::  complex_constant_q<Ts>);
template <class 	 ...Ts>  concept    simplex_constant_q	= (...and   _retail::  simplex_constant_q<Ts>);
template <class 	 ...Ts>  concept    numeric_constant_q	= (...and   _retail::  numeric_constant_q<Ts>);

template <class       ...Ts>	concept         integral_q	= (...and   _retail::          integral_q<Ts>);
template <class       ...Ts>	concept         cardinal_q	= (...and   _retail::          cardinal_q<Ts>);
template <class       ...Ts>	concept          ordinal_q	= (...and   _retail::           ordinal_q<Ts>);
template <class       ...Ts>	concept          logical_q	= (...and   _retail::           logical_q<Ts>);
template <class 	    ...Ts>  concept             real_q	= (...and   _retail::              real_q<Ts>);
template <class 	    ...Ts>  concept          complex_q	= (...and   _retail::           complex_q<Ts>);
template <class 	    ...Ts>  concept          simplex_q	= (...and   _retail::           simplex_q<Ts>);
template <class 	    ...Ts>  concept          numeric_q	= (...and   _retail::           numeric_q<Ts>);
template <class 	    ...Ts>  concept           number_q	=                      numeric_variable_q<Ts...>;

XTAL_DEF_(return,inline,let)  ordinal_f(           auto const o) noexcept -> auto {return            _xtd::  make_signed_f(o)   ;}
XTAL_DEF_(return,inline,let)  ordinal_f(constant_q auto const o) noexcept -> auto {return constant_t<_xtd::  make_signed_f(o)>{};}
XTAL_DEF_(return,inline,let) cardinal_f(           auto const o) noexcept -> auto {return            _xtd::make_unsigned_f(o)   ;}
XTAL_DEF_(return,inline,let) cardinal_f(constant_q auto const o) noexcept -> auto {return constant_t<_xtd::make_unsigned_f(o)>{};}

///\returns the conditional `x` reinterpreted as type `Y`, \
where `std::floating_point`s and `bool`eans are `static_cast`, \
while all other `std::integral`s are negated. \

template <variable_q Y>
XTAL_DEF_(return,inline,let)
condition_f(bool x)
noexcept -> Y
{
	XTAL_IF0
	XTAL_0IF ( logical_q<Y>) {return x;}
	XTAL_0IF (integral_q<Y>) {return static_cast<Y>(-x);}
	XTAL_0IF (    real_q<Y>) {return static_cast<Y>(+x);}
}


template <         class ...Ts>	concept   intercedent_q	= (...and   _retail::intercedent_q<based_t<Ts>>);
template <         class ...Ts>	concept    antecedent_q	= (...and   _retail:: antecedent_q<based_t<Ts>>);
template <class T             >	using       precedent_s	=  typename _retail::  precedent_s<        T  > ;
template <class T             >	using       succedent_s	=  typename _retail::  succedent_s<        T  > ;


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Valued & Sized...

template <         class ...Ts>	using    array_valued_u	=  common_t<_retail::   array_valued_u<Ts>...>;
template <         class ...Ts>	concept  array_valued_q	= (...and   _retail::   array_valued_q<Ts>);

template <         class ...Ts>	using    inner_valued_u	=  common_t<_retail::   inner_valued_u<Ts>...>;
template <         class ...Ts>	concept  inner_valued_q	= (...and   _retail::   inner_valued_q<Ts>);

template <         class ...Ts>	using    under_valued_u	=  common_t<_retail::   under_valued_u<Ts>...>;
template <         class ...Ts>	concept  under_valued_q	= (...and   _retail::   under_valued_q<Ts>);

template <         class ...Ts>	using    fixed_valued_u	=  common_t<_retail::   fixed_valued_u<Ts>...>;
template <         class ...Ts>	concept  fixed_valued_q	= (...and   _retail::   fixed_valued_q<Ts>);

template <         class ...Ts>	using    fluid_valued_u	=  common_t<_retail::   fluid_valued_u<Ts>...>;
template <         class ...Ts>	concept  fluid_valued_q	= (...and   _retail::   fluid_valued_q<Ts>);

template <         class ...Ts>	using          valued_u	=  common_t<_retail::         valued_u<Ts>...>;
template <         class ...Ts>	concept        valued_q	= (...and   _retail::         valued_q<Ts>);


template <extent_type ...Ns   >	using         assayed  	=           _retail::        assayed  <Ns...>;

template <class T             >	using    tuple_shaped  	=           _retail::    tuple_shaped  <T >;
template <class T             >	using    array_shaped  	=           _retail::    array_shaped  <T >;
template <class T             >	using    fixed_shaped  	=           _retail::    fixed_shaped  <T >;
template <class T             >	using    fluid_shaped  	=           _retail::    fluid_shaped  <T >;

template <         class ...Ts>	concept  tuple_shaped_q	= (...and   _retail::    tuple_shaped_q<Ts>) and requires {requires same_n<tuple_shaped<Ts>::extent()...>;};
template <         class ...Ts>	concept  array_shaped_q	= (...and   _retail::    array_shaped_q<Ts>) and requires {requires same_n<array_shaped<Ts>::extent()...>;};
template <         class ...Ts>	concept  fixed_shaped_q	= (...and   _retail::    fixed_shaped_q<Ts>) and requires {requires same_n<fixed_shaped<Ts>::extent()...>;};
template <         class ...Ts>	concept  fluid_shaped_q	= (...and   _retail::    fluid_shaped_q<Ts>);// and requires same size or size == -1

template <class T             >	using          shaped  	=           _retail::          shaped  <T >;
template <         class ...Ts>	concept        shaped_q	= (...and   _retail::          shaped_q<Ts>);


template <         class ...Ts>	using           fixed_u	=  common_t<_retail::          fixed_u<Ts>...>;
template <         class ...Ts>	concept         fixed_q	= (...and   _retail::          fixed_q<Ts>);

template <         class ...Ts>	using           fluid_u	=  common_t<_retail::          fluid_u<Ts>...>;
template <         class ...Ts>	concept         fluid_q	= (...and   _retail::          fluid_q<Ts>);


template <class T             >	using        destruct  	=           _retail::       destruct  <T >;
template <class T             >	using        destruct_t	=           _retail::       destruct_t<T >;
template <class T             >	using        destruct_u	=           _retail::       destruct_u<T >;
template <class T             >	using        abstruct_t	=           based_t<destruct_t<based_t<T >>>    ;
template <         class ...Ts>	using        abstruct_u	=          common_t<destruct_u<based_t<Ts>>...>;

template <class T, int   ...Ns>	using         desolve  	=           _retail::        desolve  <T, Ns...>;
//mplate <         int   ...Ns>	using         desolve_x	=           _retail::        desolve_x<   Ns...>;
//mplate <class T, class ..._s>	using         desolve_s	=           _retail::        desolve_s<T, _s...>;
template <class T             >	using         desolve_t	=           _retail::        desolve_t<T >;
template <class T             >	using         desolve_u	=           _retail::        desolve_u<T >;
template <class T             >	using         absolve_t	=           based_t< desolve_t<based_t<T >>>    ;
template <         class ...Ts>	using         absolve_u	=          common_t< desolve_u<based_t<Ts>>...>;

template <class T             >	struct       abstruct  	: destruct<T> {using value_type = abstruct_u<T>; using type = abstruct_t<T>;};
template <class T             >	struct        absolve  	:  desolve<T> {using value_type =  absolve_u<T>; using type =  absolve_t<T>;};


template <int N>
XTAL_DEF_(return,inline,let)
destruct_f(auto &&t)
noexcept
requires fixed_shaped_q<decltype(t)>
{
	auto constexpr M = fixed_shaped<decltype(t)>::extent();
	return get<modulo_m<M, N>>(destruct_f(XTAL_REF_(t)));
}
XTAL_DEF_(return,inline,let)
destruct_f(auto &&t)
noexcept -> decltype(auto)
requires fixed_shaped_q<decltype(t)>
{
	using T = decltype(t);
	XTAL_IF0
	XTAL_0IF (tuple_shaped_q<T>) {
		return XTAL_REF_(t);
	}
	XTAL_0IF_(else) {
		return reinterpret_cast<destruct_t<T> &&>(XTAL_REF_(t));
	}
}

template <int N, int ...Ns>
XTAL_DEF_(return,inline,let)
desolve_f(auto &&t)
noexcept
requires fixed_shaped_q<decltype(t)>
{
	auto constexpr M = fixed_shaped<decltype(t)>::extent();
	auto constexpr I = modulo_m<M, N>;
	XTAL_IF0
	XTAL_0IF (0 == sizeof...(Ns)) {
		return                   get<I>(destruct_f(XTAL_REF_(t)));
	}
	XTAL_0IF (1 <= sizeof...(Ns)) {
		return desolve_f<Ns...>(get<I>(desolve_f(XTAL_REF_(t))));
	}
}
XTAL_DEF_(return,inline,let)
desolve_f(auto &&t)
noexcept -> decltype(auto)
requires fixed_shaped_q<decltype(t)>
{
	using T = decltype(t);
	return reinterpret_cast<desolve_t<T> &&>(XTAL_REF_(t));
}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Ranged...

template <         class ...Ts>	concept           scalar_q	= (...and   _retail::           scalar_q<Ts>);
template <         class ...Ts>	concept           vector_q	= (...and   _retail::           vector_q<Ts>);
template <         class ...Ts>	concept           matrix_q	= (...and   _retail::           matrix_q<Ts>);
template <         class ...Ts>	concept           tensor_q	= (...and   _retail::           tensor_q<Ts>);

template <class T             >	using            pointee_t	=           _retail::          pointee_t<T >;
template <class T             >	using            pointed_u	=           _retail::          pointed_u<T >;
template <class          ...Ts>	concept          pointed_q	= (... and  _retail::          pointed_q<Ts>);
template <class          ...Ts>	concept          pointer_q	= (... and  _retail::          pointer_q<Ts>);

template <class T             >	using            indexee_t	=           _retail::          indexee_t<T >;
template <class T             >	using            indexed_u	=           _retail::          indexed_u<T >;
template <class          ...Ts>	concept          indexed_q	= (... and  _retail::          indexed_q<Ts>);
template <class T             >	using          coindexed_u	=           _retail::        coindexed_u<T >;
template <class          ...Ts>	concept        coindexed_q	= (... and  _retail::        coindexed_q<Ts>);
template <class T             >	using          reindexed_u	=           _retail::        reindexed_u<T >;
template <         class ...Ts>	concept        reindexed_q	= (... and  _retail::        reindexed_q<Ts>);

template <         class ...Ts>	concept  fixed_coindexed_q	= (... and  _retail::  fixed_coindexed_q<Ts>);
template <         class ...Ts>	concept  fixed_reindexed_q	= (... and  _retail::  fixed_reindexed_q<Ts>);
template <         class ...Ts>	concept  fluid_coindexed_q	= (... and  _retail::  fluid_coindexed_q<Ts>);
template <         class ...Ts>	concept  fluid_reindexed_q	= (... and  _retail::  fluid_reindexed_q<Ts>);


template <class T             >	using        arranged_t	=           _retail::     arranged_t<T > ;
template <class T             >	using      reiterated_t	=           _retail::   reiterated_t<T > ;
template <         class ...Ts>	concept    reiterated_q	= (...and   _retail::   reiterated_q<Ts>);

template <class T             >	using     initializer_s	=           _retail::  initializer_s<T > ;
template <class T             >	using     initializer_t	=           _retail::  initializer_t<T > ;
template <class T             >	using     initializer_u	=           _retail::  initializer_u<T > ;
template <         class ...Ts>	concept   initializer_q	= (...and   _retail::  initializer_q<Ts>);

template <class T             >	using        iteratee_t	=  typename _retail::     iteratee  <T >::type;
template <class T             >	using        iterated_u	= _std::remove_reference_t<iteratee_t<T>>;
template <class T             >	using        iterated_t	=  typename _retail::     iterated  <T >::type;
template <class T             >	using        iterator_t	=  typename _retail::     iterator  <T >::type;
template <class T             >	using        distance_t	=           _retail::     distance_t<T > ;
template <class T             >	using        interval_t	=           _retail::     interval_t<T > ;
template <class T=extent_type >	using         counted_t	=  typename _retail::      counted  <T >::type;
template <class T=extent_type >	using         counter_t	=  typename _retail::      counter  <T >::type;

template <class          ...Ts>	concept      iterable_q	= (...and   _retail::     iterable_q<Ts>);
template <class          ...Ts>	concept      iterated_q	= (...and   _retail::     iterated_q<Ts>);
template <class          ...Ts>	concept      iterator_q	= (...and   _retail::     iterator_q<Ts>);
template <class          ...Ts>	concept      sentinel_q	= (...and   _retail::     sentinel_q<Ts>);
template <class          ...Ts>	concept      distance_q	= (...and   _retail::     distance_q<Ts>);
template <class          ...Ts>	concept      interval_q	= (...and   _retail::     interval_q<Ts>);
template <class          ...Ts>	concept       counted_q	= (...and   _retail::      counted_q<Ts>);
template <class          ...Ts>	concept       counter_q	= (...and   _retail::      counter_q<Ts>);


///\returns the nearest aligned offset for type `T`, \
adjusting the referenced index `i` to point to the next available argument. \

template <int N_dt=0, class T>
XTAL_DEF_(return,inline,let)
point_f(T &&t, int const n_dt=0)
noexcept -> auto
{
	using namespace _xtd::ranges;

	if constexpr (iterator_q<_std::decay_t<T>>) {
		return next(XTAL_REF_(t), N_dt + n_dt);
	}
	else {
		XTAL_IF0
		XTAL_0IF (0 <= N_dt) {return    point_f<N_dt>(begin(XTAL_REF_(t)), n_dt);}
		XTAL_0IF (N_dt <  0) {return    point_f<N_dt>(  end(XTAL_REF_(t)), n_dt);}
	}
}
template <int N_dt=0, class T>
XTAL_DEF_(return,inline,let)
endpoint_f(T &&t, int const n_dt=0)
noexcept -> auto
{
	using namespace _xtd::ranges;

	if constexpr (iterator_q<_std::decay_t<T>>) {
		return prev(XTAL_REF_(t), N_dt + n_dt);
	}
	else {
		XTAL_IF0
		XTAL_0IF (0 <= N_dt) {return endpoint_f<N_dt>(  end(XTAL_REF_(t)), n_dt);}
		XTAL_0IF (N_dt <  0) {return endpoint_f<N_dt>(begin(XTAL_REF_(t)), n_dt);}
	}
}
///\returns the `size` of the given range. \

///\note\
If provided with an `iota_view`, \
returns a `value_type` instead of `size_type` which is twice the shaped. \

XTAL_DEF_(return,inline,let)
count_f(auto const &t)
noexcept -> size_type
{
	using T = XTAL_ALL_(t);
	XTAL_IF0
	XTAL_0IF (fixed_shaped_q<T> and un_n<fluid_shaped_q<T>>) {return fixed_shaped<T>::extent();}
	XTAL_0IF_(return) (static_cast<size_type>(T::size()))
	XTAL_0IF_(return) (static_cast<size_type>(t .size()))
	XTAL_0IF_(return) (static_cast<size_type>(t))
	XTAL_0IF_(return) (static_cast<size_type>(0))
}
XTAL_DEF_(return,inline,let)
count_f(auto const &...ts)
noexcept -> size_type
{
	return _std::min<size_type>({(count_f(ts) - one)...}) + one;
}
XTAL_DEF_(return,inline,let) discount_f(auto const &...ts) noexcept -> decltype(auto) {return _xtd::ranges::views::drop_exactly(count_f(ts...));}
XTAL_DEF_(return,inline,let)  account_f(auto const &...ts) noexcept -> decltype(auto) {return _xtd::ranges::views::take_exactly(count_f(ts...));}
XTAL_DEF_(return,inline,let)  recount_f(auto const &...ts) noexcept requires in_n<shaped_q<decltype(ts)...>> {return  account_f(ts...);}
XTAL_DEF_(return,inline,let)  recount_f(auto const &...ts) noexcept requires un_n<shaped_q<decltype(ts)...>> {return discount_f(0    );}

template <counter_q I0, counter_q IN>
XTAL_DEF_(return,inline,let)
counted_f(I0 i0, IN iN)
noexcept -> auto
{
	return counted_t<common_t<I0, IN>>(i0, iN);
}

template <counter_q  I >	XTAL_DEF_(return,inline,let) counted_f(I i0, I iN) noexcept -> auto {return counted_t<I>(i0, iN);}
template <class      T >	XTAL_DEF_(return,inline,let) counted_f(T &&t)      noexcept -> auto {return counted_t<T>(XTAL_REF_(t));}
template <class      T >	XTAL_DEF_(return,inline,let) counter_f(T &&t)      noexcept -> auto {return counter_t<T>(XTAL_REF_(t));}


///\returns the `any_view` type-erased form of `y`. \

XTAL_DEF_(return,inline,let)
derange_f(iterable_q auto &&y)
noexcept -> auto
{
	using      Y  = XTAL_ALL_(y);
	using      Y_ = _xtd::ranges::any_view<iteratee_t<Y>, _xtd::ranges::get_categories<Y>()>;
	auto const n_ = recount_f(y);
	return Y_(XTAL_MOV_(y))|XTAL_MOV_(n_);
}

///\returns the result of zipping `...xs` with `f`. \

///\note\
The name is intended to mimic Haskell's `ApplicativeFunctor`. \

template <class F, class ...Xs>	concept   iterative_p = complete_q<F> and _std::invocable<F, _xtd::ranges::range_reference_t<Xs>...>;

template <class F             >	requires  iterative_p<F       > XTAL_DEF_(inline,let) iterative_f(F &&f            ) noexcept -> decltype(auto) {return _xtd::ranges::views::      generate(XTAL_REF_(f)                    );}
template <class F, class    X >	requires  iterative_p<F, X    > XTAL_DEF_(inline,let) iterative_f(F &&f, X  &&   x ) noexcept -> decltype(auto) {return _xtd::ranges::views::     transform(XTAL_REF_(x),   XTAL_REF_(f)    );}
template <class F, class ...Xs>	requires  iterative_p<F, Xs...> XTAL_DEF_(inline,let) iterative_f(F &&f, Xs &&...xs) noexcept -> decltype(auto) {return _xtd::ranges::views:: zip_transform(XTAL_REF_(f),   XTAL_REF_(xs)...);}
template <class F, class ...Xs>	requires incomplete_q<F       > XTAL_DEF_(inline,let) iterative_f(       Xs &&...xs) noexcept -> decltype(auto) {return _xtd::ranges::views:: zip          (                XTAL_REF_(xs)...);}
//mplate <         class ...Xs>	                                XTAL_DEF_(inline,let) iterative_f(       Xs &&...xs) noexcept -> decltype(auto) {return _xtd::ranges::views:: zip          (                XTAL_REF_(xs)...);}
template <auto  f, class ...Xs>	                                XTAL_DEF_(inline,let) iterative_f(       Xs &&...xs) noexcept -> decltype(auto) {return                        iterative_f(constant_t<f>{}, XTAL_REF_(xs)...);}
template <class F, class ...Xs>	                                XTAL_DEF_(inline,let) iterative_f(       Xs &&...xs) noexcept -> decltype(auto) {return                        iterative_f<   evoke_t<F>{}>(XTAL_REF_(xs)...);}
template <class F, class ...Xs>	                                                using iterative_t = XTAL_ALL_(iterative_f<F>(XTAL_ANY_(Xs)...));


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Arithmetic...

template <int N, class T, class U=T>	concept  multiplicative_group_p	= _retail:: multiplicative_group_p<N, T, U>;
template <int N, class T, class U=T>	concept        additive_group_p	= _retail::       additive_group_p<N, T, U>;
template <int N, class T, class U=T>	concept        discrete_group_p	= _retail::       discrete_group_p<N, T, U>;
template <int N, class T, class U=T>	concept        quotient_group_p	= _retail::       quotient_group_p<N, T, U>;
template <int N, class T, class U=T>	concept        integral_group_p	= _retail::       integral_group_p<N, T, U>;

template <int N, class T, class U=T>	concept      contiguous_group_p	= _retail::     contiguous_group_p<N, T, U>;
template <int N, class T, class U=T>	concept      contiguous_field_p	= _retail::     contiguous_field_p<N, T, U>;
template <int N, class T, class U=T>	concept      continuous_field_p	= _retail::     continuous_field_p<N, T, U>;
template <int N, class T, class U=T>	concept         complex_field_p	= _retail::        complex_field_p<N, T, U>;
template <int N, class T, class U=T>	concept         simplex_field_p	= _retail::        simplex_field_p<N, T, U>;

template <int N, class T, class U=T>	concept         logical_group_p	= _retail::        logical_group_p<N, T, U>;
template <int N, class T, class U=T>	concept          binary_group_p	= _retail::         binary_group_p<N, T, U>;

template <int N, class T, class U=T>	concept            inequality_p	= _retail::           inequality_p<N, T, U>;
template <int N, class T, class U=T>	concept              equality_p	= _retail::             equality_p<N, T, U>;
template <int N, class T, class U=T>	concept               quality_p	= _retail::              quality_p<N, T, U>;


template <class   ...Ts>	concept   multiplicative_group_q	= (...and multiplicative_group_p<0, Ts>);
template <class   ...Ts>	concept         additive_group_q	= (...and       additive_group_p<0, Ts>);
template <class   ...Ts>	concept         discrete_group_q	= (...and       discrete_group_p<0, Ts>);
template <class   ...Ts>	concept         quotient_group_q	= (...and       quotient_group_p<0, Ts>);
template <class   ...Ts>	concept         integral_group_q	= (...and       integral_group_p<0, Ts>);

template <class   ...Ts>	concept       contiguous_group_q	= (...and     contiguous_group_p<0, Ts>);
template <class   ...Ts>	concept       contiguous_field_q	= (...and     contiguous_field_p<0, Ts>);
template <class   ...Ts>	concept       continuous_field_q	= (...and     continuous_field_p<0, Ts>);
template <class   ...Ts>	concept          complex_field_q	= (...and        complex_field_p<0, Ts>);
template <class   ...Ts>	concept          simplex_field_q	= (...and        simplex_field_p<0, Ts>);

template <class   ...Ts>	concept          logical_group_q	= (...and        logical_group_p<0, Ts>);
template <class   ...Ts>	concept           binary_group_q	= (...and         binary_group_p<0, Ts>);

template <class   ...Ts>	concept             inequality_q	= (...and           inequality_p<2, Ts>);
template <class   ...Ts>	concept               equality_q	= (...and             equality_p<2, Ts>);
template <class   ...Ts>	concept                quality_q	= (...and              quality_p<2, Ts>);


template <class X, class Y>
XTAL_DEF_(return,inline,let)
identical_f(X &&x, Y &&y)
noexcept -> bool
{
	XTAL_IF0
	XTAL_0IF (not _std::is_lvalue_reference_v<X>) {return false;}
	XTAL_0IF (not _std::is_lvalue_reference_v<Y>) {return false;}
	XTAL_0IF_(return) (_std::addressof(x) == _std::addressof(y))
	XTAL_0IF_(else) return false;
}

template <class X, class Y>
XTAL_DEF_(return,inline,let)
equal_f(X &&x, Y &&y)
noexcept -> bool
{
	XTAL_IF0
	XTAL_0IF_(return) (x == y)
	XTAL_0IF_(else) {return identical_f(XTAL_REF_(x), XTAL_REF_(y));}
}
template <class X, class Y> requires iterable_q<X, Y>// and epimorphic_q<X, Y>
XTAL_DEF_(return,inline,let)
equal_f(X &&x, Y &&y)
noexcept -> bool
{
	XTAL_IF0
	XTAL_0IF_(return) (_xtd::ranges::equal(x, y))
	XTAL_0IF_(else) {return identical_f(XTAL_REF_(x), XTAL_REF_(y));}
}

template <class X, class Y>
XTAL_DEF_(return,inline,let)
equivalent_f(X &&x, Y &&y)
noexcept -> bool
{
	return equal_f(XTAL_REF_(x), XTAL_REF_(y));
}
template <class X, class Y> requires iterable_q<X, Y> and isomorphic_q<X, Y>
XTAL_DEF_(return,inline,let)
equivalent_f(X &&x, Y &&y)
noexcept -> bool
{
	XTAL_IF0
	XTAL_0IF_(return) (x.begin() == y.begin() and x.end() == y.end())
	XTAL_0IF_(return) (x.begin() == y.begin())
	XTAL_0IF_(else) {return identical_f(XTAL_REF_(x), XTAL_REF_(y));}
}


////////////////////////////////////////////////////////////////////////////////

///\returns the result of `w + (x*...*xs)`, using `fma` where possible. \

template <class W, class X, class Y> requires simplex_variable_q<W, X, Y> or un_n<numeric_q<W> or numeric_q<X> or numeric_q<Y>>
XTAL_DEF_(return,inline,let)
accumulator_f(W &&w, X &&x, Y &&y)
noexcept -> XTAL_ALL_(w + x*y)
{
	XTAL_IF0
	XTAL_0IF_(consteval) {
		return               XTAL_REF_(y)*XTAL_REF_(x) + XTAL_REF_(w) ;
	}
#if   XTAL_SYS_(FMA) and XTAL_SYS_(builtin)
	XTAL_0IF (requires {_std::fma(y, x, w);}) {
		return __builtin_fma(XTAL_REF_(y), XTAL_REF_(x), XTAL_REF_(w));
	}
#endif
#if   XTAL_SYS_(FMA)
	XTAL_0IF (requires {fma(y, x, w);}) {
		return           fma(XTAL_REF_(y), XTAL_REF_(x), XTAL_REF_(w));
	}
#endif
	XTAL_0IF_(else) {
		return               XTAL_REF_(y)*XTAL_REF_(x) + XTAL_REF_(w) ;
	}
}
template <real_variable_q W, complex_variable_q X, real_variable_q Y>
XTAL_DEF_(return,inline,let)
accumulator_f(W w, X x, Y y)
noexcept -> auto
{
	return _std::complex{accumulator_f(w, x.real(), y), x.imag()*y};
}
template <real_variable_q W, real_variable_q X, complex_variable_q Y>
XTAL_DEF_(return,inline,let)
accumulator_f(W w, X x, Y y)
noexcept -> auto
{
	return _std::complex{accumulator_f(w, x, y.real()), x*y.imag()};
}
template <real_variable_q W, complex_variable_q X, complex_variable_q Y>
XTAL_DEF_(return,inline,let)
accumulator_f(W w, X x, Y y)
noexcept -> auto
{
	if constexpr (requires {fma(y, x, w);}) {
		return fma(y, x, w);
	}
	else {
		/**/
		return y*x + w;
		/*/
		auto const z_re = accumulator_f(accumulator_f(w, x.real(),y.real()), -x.imag(),y.imag());
		auto const z_im = accumulator_f(       x.imag()*y.real() ,  x.real(),y.imag());
		return _std::complex{z_re, z_im};
		/***/
	}
}

template <complex_variable_q W, real_variable_q X, real_variable_q Y>
XTAL_DEF_(return,inline,let)
accumulator_f(W w, X x, Y y)
noexcept -> auto
{
	return _std::complex{accumulator_f(w.real(), x, y), w.imag()};
}
template <complex_variable_q W, complex_variable_q X, real_variable_q Y>
XTAL_DEF_(return,inline,let)
accumulator_f(W w, X x, Y y)
noexcept -> auto
{
	return _std::complex{accumulator_f(w.real(), x.real(), y), accumulator_f(w.imag(), x.imag(), y)};
}
template <complex_variable_q W, real_variable_q X, complex_variable_q Y>
XTAL_DEF_(return,inline,let)
accumulator_f(W w, X x, Y y)
noexcept -> auto
{
	return _std::complex{accumulator_f(w.real(), x, y.real()), accumulator_f(w.imag(), x, y.imag())};
}

template <complex_variable_q W, complex_variable_q X, complex_variable_q Y>
XTAL_DEF_(return,inline,let)
accumulator_f(W w, X x, Y y)
noexcept -> auto
{
	if constexpr (requires {fma(y, x, w);}) {
		return fma(y, x, w);
	}
	else {
		/**/
		return y*x + w;
		/*/
		auto const z_re = accumulator_f(accumulator_f(w.real(), x.real(),y.real()), -x.imag(),y.imag());
		auto const z_im = accumulator_f(accumulator_f(w.imag(), x.imag(),y.real()),  x.real(),y.imag());
		return _std::complex{z_re, z_im};
		/***/
	}
}

XTAL_DEF_(return,inline,let)
accumulator_f(auto &&w, auto &&x, auto &&y, auto &&...ys)
noexcept -> auto
requires (1 <= sizeof...(ys))
{
	return accumulator_f(XTAL_REF_(w), XTAL_REF_(x), (XTAL_REF_(y) *...* XTAL_REF_(ys)));
}


////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
