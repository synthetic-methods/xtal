#pragma once
#include "./any.hh"






XTAL_ENV_(push)
namespace xtal::process
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////

template <class T>
struct define
{
	using subkind = _retail::define<T>;

	template <any_q S>
	class subtype: public atom::compose_s<S, subkind>
	{
		friend T;
		using S_ = atom::compose_s<S, subkind>;
	
	public:
		using S_::S_;
		using S_::self;


		///\returns `true` if the pointers are identical, `false` otherwise. \

		XTAL_OP2_(bool) == (subtype const &t)
		XTAL_0FX {return this == _std::addressof(t);}
		
		///\
		Alias of `method(...)`. \
		
		XTAL_TO2_(
		XTAL_OP2() (XTAL_DEF ...xs),
			self().method(XTAL_REF_(xs)...)
		)
		
		template <auto ...Is>
		XTAL_TN2 method(XTAL_DEF ...xs)
		XTAL_0FX
		{
			return T::template function<Is...>(XTAL_REF_(xs)...);
		}

		///\returns the lambda abstraction of `method`, \
		resolved by the `[../message/any.ipp#dispatch]`ed parameters bound to `this`. \

		XTAL_DO4_(template <class ...Xs>
		XTAL_TN2 reify(integral_q auto const ...is),
		{
			if constexpr (0 == sizeof...(is)) {
				return [&, this] XTAL_1FN_(self().method);
			}
			else {
				return [&, this] XTAL_1FN_(self().template method<is...>);
			}
		})
		//\
		XTAL_TN2 reify(auto const ...is), 
		
		///\returns the overloaded function-pointer for the given types. \

		template <class ...Xs>
		XTAL_TN2 deify(auto const ...is)
		XTAL_0FX
		{
			return deify_(being<Xs...>::template m_method<is...>);
		}
		XTAL_TN2 deify_(auto const &f0)
		XTAL_0FX
		{
			return f0;
		}

	protected:
		///\
		Defines the subtype-indexed function-pointer table, \
		dynamically indexed by message-value/subtype `T`, \
		and statically-generated from `method<Is...>` with `sizeof...(Is)` entries. \

		template <class ...Xs>
		struct being
		{
			template <auto ...Is>
			class resolve
			{
			public:
				using Y_return = decltype(XTAL_VAL_(T &).template method<Is...>(XTAL_VAL_(Xs)...));
				using Y_method = Y_return (T::*) (argument_t<Xs>...);

			};
			template <auto ...Is>
			XTAL_REQ_(XTAL_VAL_(T const &).template method<Is...>(XTAL_VAL_(Xs)...))
			class resolve<Is...>
			{
			public:
				using Y_return = decltype(XTAL_VAL_(T const &).template method<Is...>(XTAL_VAL_(Xs)...));
				using Y_method = Y_return (T::*) (argument_t<Xs>...) const;

			};
			template <auto ...Is> XTAL_USE Y_method = typename resolve<Is...>::Y_method;
			template <auto ...Is> XTAL_LET m_method = static_cast<Y_method<Is...>>(&T::template method<Is...>);
		
		};

	public:

		///\
		Thunkifies the underlying `T` by capturing the arguments `Xs...`. \

		template <class ...Xs>
		struct binding
		{
			using signature = atom::pack<let_t<Xs>...>;
			using Y_result = typename signature::template invoke_t<T>;
			using Y_return = iteratee_t<Y_result>;
			
			using subkind = atom::compose<void
			,	compound::defer<typename signature::type>
			,	defer<T>
			>;

			template <any_q R>
			class subtype: public atom::compose_s<R, subkind>
			{
				using R_ = atom::compose_s<R, subkind>;

			public:
				using R_::R_;
				using R_::self;
				///\
				Initializes `slots` using the arguments supplied. \

				XTAL_CXN subtype(Xs &&...xs)
				XTAL_0EX
				:	subtype(T{}, XTAL_REF_(xs)...)
				{}
				XTAL_CXN subtype(XTAL_DEF_(is_q<T>) t, Xs &&...xs)
				XTAL_0EX
				:	R_(signature::make(XTAL_REF_(xs)...), XTAL_REF_(t))
				{}

				XTAL_TO4_(XTAL_TN2 slots(), R_::head())
				
				template <size_t N, size_t ...Ns>
				XTAL_TN2 slot()
				XTAL_0EX
				{
					if constexpr (0 == sizeof...(Ns)) {
						return _std::get<N>(slots());
					}
					else {
						return _std::get<N>(slots()).template slot<Ns...>();
					}
				}
				XTAL_TN2 apply(XTAL_DEF f)
				XTAL_0EX
				{
					return _std::apply([f = XTAL_REF_(f)] XTAL_1FN_(f), slots());
				}

				///\
				Evaluates the lifted `method` using the bound slots. \

				template <auto ...Is>
				XTAL_TN2 method()
				XTAL_0EX
				{
					return _std::apply([this] XTAL_1FN_(R_::template method<Is...>), slots());
				}
				
				using R_::method;
			//	using R_::influx;
			//	using R_::efflux;

				///\returns the result of `influx`ing `self` then  (if `& 1`) `slots`. \

				XTAL_TLX influx(XTAL_DEF ...oo)
				XTAL_0EX
				{
					return XTAL_FLX_(self().influx_push(oo...)) (R_::influx(XTAL_REF_(oo)...));
				}
				///\returns the result of `efflux`ing `slots` then (if `& 1`) `self`. \

				XTAL_TLX efflux(XTAL_DEF ...oo)
				XTAL_0EX
				{
					return XTAL_FLX_(R_::efflux(oo...)) (self().efflux_pull(XTAL_REF_(oo)...));
				}

				///\note\
				If prefixed by `null_t()`, the message is forwarded directly to `slots`. \

				XTAL_TLX influx(null_t, XTAL_DEF ...oo) XTAL_0EX {return self().influx_push(XTAL_REF_(oo)...);}
				XTAL_TLX efflux(null_t, XTAL_DEF ...oo) XTAL_0EX {return self().efflux_pull(XTAL_REF_(oo)...);}

				///\note\
				If prefixed by `integral_q`, the message is forwarded directly to the `slot` specified. \

				XTAL_TLX influx(integral_q auto i, XTAL_DEF ...oo) XTAL_0EX {return slot<i>().influx(XTAL_REF_(oo)...);}
				XTAL_TLX efflux(integral_q auto i, XTAL_DEF ...oo) XTAL_0EX {return slot<i>().efflux(XTAL_REF_(oo)...);}

				///\
				Forwards the message to `slots`, bypassing `self`. \

				XTAL_TLX influx_push(XTAL_DEF ...oo)
				XTAL_0EX
				{
					return apply([...oo=XTAL_REF_(oo)] (XTAL_DEF ...xs)
						XTAL_0FN_(XTAL_REF_(xs).influx(oo...) &...& -1)
					);
				}
				XTAL_TLX efflux_pull(XTAL_DEF ...oo)
				XTAL_0EX
				{
					return apply([...oo=XTAL_REF_(oo)] (XTAL_DEF ...xs)
						XTAL_0FN_(XTAL_REF_(xs).efflux(oo...) &...& -1)
					);
				}
				///\
				Forwards the message tail to `slots`, bypassing `self`. \
				If `~N_slot`, the slot at `N_slot` receives the full message. \

				template <int N_slot=-1>
				XTAL_TLX influx_push_tail(auto o, auto ...oo)
				XTAL_0EX
				{
					if constexpr (N_slot == -1) {
						return influx_push(XTAL_MOV_(oo)...);
					}
					else {
						static_assert(0 <= N_slot);
						return [&] <auto ...I>(atom::seek_t<I...>)
							XTAL_0FN_(slot<N_slot>().influx(o, oo...) &...& slot<(N_slot <= I) + I>().influx(oo...))
						(atom::seek_f<sizeof...(Xs) - 1> {});
					}
				}
				template <int N_slot=-1>
				XTAL_TLX efflux_pull_tail(auto o, auto ...oo)
				XTAL_0EX
				{
					if constexpr (N_slot == -1) {
						return efflux_pull(XTAL_MOV_(oo)...);
					}
					else {
						static_assert(0 <= N_slot);
						return [&] <auto ...I>(atom::seek_t<I...>)
							XTAL_0FN_(slot<N_slot>().efflux(o, oo...) &...& slot<(N_slot <= I) + I>().efflux(oo...))
						(atom::seek_f<sizeof...(Xs) - 1> {});
					}
				}

			};
		};

	};
};
template <class T>
struct refine
{
	using subkind = _retail::refine<T>;

	template <any_q S>
	class subtype: public atom::compose_s<S, subkind>
	{
		using S_ = atom::compose_s<S, subkind>;
	
		template <class ...Xs>
		using S_binding = typename S_::template binding<Xs...>;

	public:
		using S_::S_;
		using S_::self;

		template <class ...Xs>
		struct binding: S_binding<Xs...>
		{
			using kind = confined<S_binding<Xs...>>;
			using type = atom::compose_s<S_, kind>;
		
		};
		template <class ...Xs>
		using binding_t = typename binding<Xs...>::type;

		template <typename ...As>
		XTAL_FN2 bind_f(XTAL_DEF ...xs)
		XTAL_0EX
		{
			using  kind = confined<As..., S_binding<decltype(xs)...>>;
			using  type = atom::compose_s<S_, kind>;
			return type(XTAL_REF_(xs)...);
		}
		template <typename ...As>
		XTAL_FN2 bind_f(XTAL_DEF_(is_q<T>) t, XTAL_DEF ...xs)
		XTAL_0EX
		{
			using  kind = confined<As..., S_binding<decltype(xs)...>>;
			using  type = atom::compose_s<S_, kind>;
			return type(XTAL_REF_(t), XTAL_REF_(xs)...);
		}
		XTAL_TO4_(template <typename ...As>
		XTAL_TN2 bind(XTAL_DEF ...xs), bind_f<As...>(self(), XTAL_REF_(xs)...)
		)

	};
};


////////////////////////////////////////////////////////////////////////////////

template <class U>
struct defer
{
	using subkind = _retail::defer<U>;

	template <any_q S>
	class subtype: public atom::compose_s<S, subkind>
	{
		using S_ = atom::compose_s<S, subkind>;
	
	public:
		using typename S_::U_head;

	public:
		using S_::S_;
		using S_::self;
		using S_::head;

		///\
		Constant redirection. \

		XTAL_DO2_(template <auto ...Is>
		XTAL_TN2 method(XTAL_DEF ...xs),
		{
			if constexpr (_std::invocable<U_head, decltype(xs)...>) {
				return head() (XTAL_REF_(xs)...);
			}
			else {
				static_assert(0 == sizeof...(xs));
				return head();
			}
		})

	};
};
template <any_q U>
struct defer<U>
{
	using subkind = _retail::defer<U>;

	template <any_q S>
	class subtype: public atom::compose_s<S, subkind>
	{
		using S_ = atom::compose_s<S, subkind>;
	
	public:
		using S_::S_;
		using S_::self;
		using S_::head;

		XTAL_DO2_(template <auto ...Is>
		XTAL_TN2 method(XTAL_DEF ...xs),
		{
			return head().template method<Is...>(XTAL_REF_(xs)...);
		})

	};
};
template <class U>
struct refer
:	_retail::refer<U>
{
};


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
XTAL_ENV_(pop)
