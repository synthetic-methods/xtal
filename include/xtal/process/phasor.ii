#pragma once
#include "./any.ii"
#include "./fusor.ii"





XTAL_ENV_(push)
namespace xtal::process
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

template <                     typename ..._s> XTAL_NYM phasor;
template <                     typename ..._s> XTAL_ASK phasor_q = common::tag_p<phasor, _s...>;
template <array_q W=size_t[2], typename ...As> XTAL_USE phasor_t = confined_t<phasor<W, As...>>;


////////////////////////////////////////////////////////////////////////////////
///\

template <array_q W, typename ...As>
struct phasor<W, As...>
{
	XTAL_LET _N = _std::       extent_v<W>;
	XTAL_USE _U = _std::remove_extent_t<W>;
	
	using phase_w = precess::phase_t<_U>[_N];
	using subkind = common::compose<common::tag<phasor>, As..., fusor<phase_w>>;

	template <class S>
	using subtype = common::compose_s<S, subkind>;

};


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
XTAL_ENV_(pop)
