namespace _detail
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

using namespace _retail::_detail;


////////////////////////////////////////////////////////////////////////////////

template <typename ...As>
struct prospect
{
	using superkind = bond::compose<As...>;

	template <any_q S>
	class subtype : public bond::compose_s<S, superkind>
	{
		using S_ = bond::compose_s<S, superkind>;

	public:
		using S_::S_;

		template <auto ...Is>
		XTAL_DEF_(return,inline,static)
		XTAL_LET function(auto &&...xs)
		noexcept -> decltype(auto)
		requires some_n<Is...> and XTAL_TRY_(S_::template function<Is...>(XTAL_REF_(xs)...))
		or       none_n<Is...> and XTAL_TRY_(S_::         function       (XTAL_REF_(xs)...))
		{
			XTAL_IF0
			XTAL_0IF (some_n<Is...>)  {return S_::template function<Is...>(XTAL_REF_(xs)...);}
			XTAL_0IF (none_n<Is...>)  {return S_::         function       (XTAL_REF_(xs)...);}
		}
		
		template <auto ...Is>
		XTAL_DEF_(return,inline)
		XTAL_LET method(auto &&...xs) const
		noexcept -> decltype(auto)
		requires some_n<Is...> and XTAL_TRY_(XTAL_ANY_(S_ const &).template method<Is...>(XTAL_REF_(xs)...))
		or       none_n<Is...> and XTAL_TRY_(XTAL_ANY_(S_ const &).         method       (XTAL_REF_(xs)...))
		{
			XTAL_IF0
			XTAL_0IF (some_n<Is...>)                   {return S_::template method<Is...>(XTAL_REF_(xs)...);}
			XTAL_0IF (none_n<Is...>)                   {return S_::         method       (XTAL_REF_(xs)...);}
		}
		template <auto ...Is>
		XTAL_DEF_(return,inline)
		XTAL_LET method(auto &&...xs)
		noexcept -> decltype(auto)
		requires some_n<Is...> and XTAL_TRY_(XTAL_ANY_(S_       &).template method<Is...>(XTAL_REF_(xs)...))
		or       none_n<Is...> and XTAL_TRY_(XTAL_ANY_(S_       &).         method       (XTAL_REF_(xs)...))
		{
			XTAL_IF0
			XTAL_0IF (some_n<Is...>)                    {return S_::template method<Is...>(XTAL_REF_(xs)...);}
			XTAL_0IF (none_n<Is...>)                    {return S_::         method       (XTAL_REF_(xs)...);}
		}

	};
};


}//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
