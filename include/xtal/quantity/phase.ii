#pragma once
#include "./any.ii"
#include "./fuse.ii"





XTAL_ENV_(push)
namespace xtal::quantity
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

template <typename ..._s> XTAL_NYM phase;
template <typename ..._s> XTAL_ASK phase_q = atom::tag_p<phase, _s...>;
template <class U=size_t> XTAL_USE phase_t = confined_t<phase<U>>;

template <class ...Ts>
concept phase_value_q = real_field_q<Ts...>;

template <class U>
using phase_value_t = typename atom::compute<U>::alpha_t;


////////////////////////////////////////////////////////////////////////////////
///\
Represents a mixable `floating_point` quantity determined by `sizeof(U)`. \

template <class U>
struct phase<U>
{
	using V_phase = phase_value_t<U>;
	using subkind = atom::compose<fuse<V_phase>, atom::tag<phase>>;

	template <class S>
	class subtype: public atom::compose_s<S, subkind>
	{
		using S_ = atom::compose_s<S, subkind>;
	
	public:
		using S_::S_;

		XTAL_TN1 commute(XTAL_DEF carry)
		XTAL_0EX
		{
			auto &u = S_::head(); u += XTAL_REF_(carry);
			auto const n = _std::round(u);
			u -= n;
			return S_::commute(n);
		}
	
	};
};


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
XTAL_ENV_(pop)
