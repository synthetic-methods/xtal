#pragma once
#include "./any.ii"
#include "./fuse.ii"





XTAL_ENV_(push)
namespace xtal::precess
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

template <typename ..._s> XTAL_NYM phase;
template <typename ..._s> XTAL_ASK phase_q = atom::tag_p<phase, _s...>;
template <class U=size_t> XTAL_USE phase_t = confined_t<phase<U>>;

template <class ...Ts>
concept phase_value_q = real_field_q<Ts...>;


////////////////////////////////////////////////////////////////////////////////
///\
Represents a mixable `floating_point` quantity determined by `sizeof(U)`. \

template <class U>
struct phase<U>
{
	using _computer = atom::compute<U>;
	using T_alpha = typename _computer::alpha_t;

	using subkind = atom::compose<fuse<T_alpha>, atom::tag<phase>>;

	template <class S>
	class subtype: public atom::compose_s<S, subkind>
	{
		using S_ = atom::compose_s<S, subkind>;
	
	public:
		using S_::S_;
		using S_::self;

		XTAL_TN1 normalize()
		XTAL_0EX
		{
			auto &o = S_::head(); o -= _std::round(o);
			return S_::normalize();
		}
	
	};
};


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
XTAL_ENV_(pop)
