








namespace _detail
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

using namespace _retail::_detail;


////////////////////////////////////////////////////////////////////////////////
///\
Utility for constructing homogeneous/heterogeneous `block`s, \
depending on the commonality of the supplied arguments. \

///\note\
If the function supplied to `make` is `std::identity`, \
it is swapped internally with `objective_f`. \

template <template <class ...> class T_>
struct factory
{
	template <auto f=_std::identity{}, class ...Xs>
	XTAL_DEF_(return,inline,set)
	make(Xs &&...xs)
	noexcept -> auto
	{
		using          F  = decltype(f);
		using          X_ = objective_t<Xs...>;
		auto constexpr N  = sizeof...(xs);
		XTAL_IF0
		XTAL_0IF (same_q<_std::identity, F>)        {return make<[] XTAL_1FN_(call) (objective_f)>(XTAL_REF_(xs) ...);}
		XTAL_0IF (in_n<automorphism_p<F, X_>> and      same_q<Xs...>) {return T_<return_t<F, X_>[N]>{ (XTAL_REF_(xs))...};}
		XTAL_0IF (un_n<automorphism_p<F, X_>> and      same_q<Xs...>) {return T_<return_t<F, X_>[N]>{f(XTAL_REF_(xs))...};}
		XTAL_0IF (in_n<automorphism_p<F, X_>> and different_q<Xs...>) {return T_<return_t<F, Xs>...>{ (XTAL_REF_(xs))...};}
		XTAL_0IF (un_n<automorphism_p<F, X_>> and different_q<Xs...>) {return T_<return_t<F, Xs>...>{f(XTAL_REF_(xs))...};}
	}

};
template <template <class ...> class T_>
XTAL_DEF_(let) fake_f = [] XTAL_1FN_(call) (factory<T_>::make);


////////////////////////////////////////////////////////////////////////////////
///\
Utilities replacing the C++23-deprecated `std::aligned_storage`. \

///\todo\
Provide a mechanism for sorting/unsorting the respective inner/outer types? \

template <class ...Ts>
struct aligned : aligned<based_t<Ts>...>
{
};
template <based_q ...Ts>
struct aligned<Ts...>
{
	///\returns the total aligned storage-size for `T`. \
	
	static cardinal_constant_t<(size_type{0} +...+ aligned<Ts>::size())>
	constexpr size{};

};
template <based_q T>
struct aligned<T>
{
	///\
	Defines the aligned storage-type for `T`. \

	class type {alignas(alignof(T)) _std::byte bytes[sizeof(T)];};

	///\returns the aligned storage-size for `T`. \
	
	static cardinal_constant_t<sizeof(type)> constexpr size{};

	///\returns the next available slot for `T`, \
	rounded up to the nearest `T`-boundary. \

	///\note\
	The most effective packing is attained by ordering the `Ts...` from-largest-to-smallest. \

	XTAL_DEF_(return,inline,set)
	advance(auto &i)
	noexcept -> auto
	{
		XTAL_ALL_(i) constexpr N = size() << 3;
		XTAL_ALL_(i) constexpr M =       N - 1;
		i += M; i &= ~M; auto const j = i; i += M; return j >> 3;
	};

};


////////////////////////////////////////////////////////////////////////////////

template <class T> concept inelastic_fixed_q = un_n<fixed<T>::extent()&XTAL_SYS_(extent, fixed_u<T>), XTAL_SYS_(extent, fixed_u<T>)>;
template <class T> concept   elastic_fixed_q = in_n<fixed<T>::extent()&XTAL_SYS_(extent, fixed_u<T>), XTAL_SYS_(extent, fixed_u<T>)>;


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
