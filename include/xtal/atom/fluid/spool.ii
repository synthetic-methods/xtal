#pragma once
#include "./any.ii"
#include "./store.ii"






XTAL_ENV_(push)
namespace xtal::atom::fluid
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

template <class ..._s> XTAL_NYM spool;
template <class ..._s> XTAL_USE spool_t = typename spool<_s...>::type;
template <class ...Ts> XTAL_ASK spool_q = atom::tag_p<spool, Ts...>;


////////////////////////////////////////////////////////////////////////////////
///\
Defines a priority-queue based on `store_t<A>`. \
Currently used for both event queues (\see `message/schedule.ii`) \
and to implement polymorphism (\see `processor/polymer.ii`). \

///\note\
May be initialized using `bond/_detail.hxx#sentry` to \
provide minimum/maximum sentinel values (for lookbehind/lookahead, respectively). \

template <class A>
struct spool<A>
{
	template <class T>
	using demitype = iterate_t<T>;

	template <class T>
	using hemitype = atom::compose_s<demitype<T>, atom::tag<spool>>;

	template <class T>
	class homotype: public hemitype<T>
	{
		using S_ = hemitype<T>;

		using U_store = store_t<A>;
		using U_visor = typename U_store::iterator;
		using U_value = typename U_store::value_type;
		using U_count = typename U_store::difference_type;

		U_store __store {};
		U_count __begin = 0;
		U_count __end   = 0;

	public:
		using S_::S_;
		
		///\note\
		The `size()` of the `std::initializer_list` determines the extent of lookup/lookahead. \

		XTAL_CON homotype(bracket_t<U_value> w)
		:	__end {_std::distance(w.begin(), w.end())}
		,	__store(w)
		{}

		XTAL_TO2_(XTAL_TN2     begin(U_count n=0), _std::next(__store.begin(), n + __begin))
		XTAL_TO2_(XTAL_TN2       end(U_count n=0), _std::prev(__store.  end(), n + __end))
		XTAL_TN2_(U_value &)    peek(U_count n=0) XTAL_0EX {              return *begin(n);}
		XTAL_TN1_(U_value &) advance(U_count n=1) XTAL_0EX {__begin += n; return *begin(0);}
		XTAL_TN1_(U_value &) abandon(bool    n=1)
		XTAL_0EX
		{
			if (n) {
				__begin = 0;
				clear();
			}
			return *begin();
		}
		XTAL_TN0 clear()
		XTAL_0EX
		{
			__store.erase(__store.begin(), end());
		}

		///\note\
		Cost can be amortized by invoking `advance` and `abandon` separately, \
		allowing for branchless `advance`ment. \

		XTAL_TN0 pop(U_visor i)
		XTAL_0EX
		{
			assert(i < end());
			__begin -= i < begin();
			__store.erase(i);
			abandon(begin() == end());
		}
		XTAL_TN0 pop()
		XTAL_0EX
		{
			advance();
			abandon(begin() == end());
		}
		XTAL_TN2_(U_visor) scan(XTAL_DEF w)
		XTAL_0EX
		{
			return _std::lower_bound(__store.begin(), __store.end()
			,	XTAL_REF_(w)
			);
		}
		XTAL_TN2_(U_visor) scan(XTAL_DEF w, XTAL_DEF f)
		XTAL_0EX
		{
			return _std::lower_bound(__store.begin(), __store.end()
			,	XTAL_REF_(w)
			,	[f = XTAL_REF_(f)] (XTAL_DEF x, XTAL_DEF y) XTAL_0FN_(f(x) < f(y))
			);
		}
		///\note\
		Conflicting entries w.r.t. `==` are overwritten. \

		XTAL_TN1_(U_visor) push(U_value v)
		XTAL_0EX
		{
			U_visor v_ = scan(v);
			if (*v_ == v) {
				_std::swap(*v_, v); return v_;
			}
			else {
				return poke(v_, XTAL_MOV_(v));
			}
		}
		template <is_q<U_value> W>
		XTAL_TN1_(U_visor) poke(U_visor v_, W &&w)
		XTAL_0EX
		{
			return __store.insert(v_, XTAL_REF_(w));
		}
		XTAL_TN1_(U_visor) poke(U_visor v_, XTAL_DEF ...ws)
		XTAL_0EX
		{
			return __store.insert(v_, U_value(XTAL_REF_(ws)...));
		}
		XTAL_TN1_(U_visor) poke(U_visor v_, XTAL_DEF ...ws)
		XTAL_0EX
		XTAL_REQ_(__store.inplace(v_, XTAL_REF_(ws)...))
		{
			return __store.inplace(v_, XTAL_REF_(ws)...);
		}

	};
	using type = _detail::isotype<homotype>;

};


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
XTAL_ENV_(pop)
