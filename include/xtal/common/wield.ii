#pragma once
#include "./any.ii"
#include "./tab.ii"
#include "./compute.ii"




XTAL_ENV_(push)
namespace xtal::common
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////

template <size_t N_count=0>
struct wield
{
	XTAL_LET_(size_t) N_depth = computer::bit_ceiling_f(N_count);
	XTAL_LET_(size_t) N_width = size_t(1) << N_depth;
	XTAL_LET_(size_t) M_width = N_width - 1;
	static_assert(N_count == N_width);// for now...

	using subkind = tab<wield<>>;

	template <class S>
	class subtype: public compose_s<S, subkind>
	{
		using S_ = compose_s<S, subkind>;
	
	public:
		using S_::S_;

		XTAL_USE word_type = unsigned;
		XTAL_LET word_size = N_depth;

		word_type word:word_size;

	};
};
template <size_t N_count=0>
using wield_t = typename wield<N_count>::type;

template <class ...Ts>
concept wield_q = tab_p<wield<>, Ts...>;


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
XTAL_ENV_(pop)
