#pragma once
#include "./any.ii"
#include "./fuse.ii"





XTAL_ENV_(push)
namespace xtal::common::atom
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

template <typename ..._s> XTAL_NYM phase;
template <typename ..._s> XTAL_ASK phase_q = common::tag_p<phase, _s...>;
template <class U=size_t> XTAL_USE phase_t = typename phase<U>::type;

template <class ...Ts>
concept phase_value_q = real_field_q<Ts...>;


////////////////////////////////////////////////////////////////////////////////
///\
Represents a mixable `floating_point` quantity determined by `sizeof(U)`. \

template <class U>
struct phase<U>
{
	using _computer = common::compute<U>;
	using alpha_t = typename _computer::alpha_t;

	template <class T>
	using demitype = typename fuse<alpha_t>::template homotype<T>;

	template <class T>
	using hemitype = common::compose_s<demitype<T>, common::tag<phase>>;

	template <class T>
	class homotype: public hemitype<T>
	{
		friend T;
		using S_ = hemitype<T>;
	
	public:
		using S_::S_;
		using S_::self;

		XTAL_TN1 normalize()
		XTAL_0EX
		{
			auto &o = S_::value; o -= _std::round(o);
			return S_::normalize();
		}
	
	};
	using type = _detail::isotype<homotype>;

};


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
XTAL_ENV_(pop)
