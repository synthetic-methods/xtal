#pragma once
#include "./any.hpp"






XTAL_ENV_(push)
namespace xtal::common
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////

template <template <typename...> typename F>
struct comport
{
	class type
	{
	};
	template <typename S>
	class subtype: public S, public virtual type
	{
	public:
		using S::S;

	};
};
template <template <typename...> typename F>
using comport_t = typename comport<F>::type;

template <typename T, template <typename...> typename F>
concept comport_p = _std::derived_from<based_t<T>, comport_t<F>>;


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
XTAL_ENV_(pop)
