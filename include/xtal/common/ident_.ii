#pragma once
#include "./any.ii"






XTAL_ENV_(push)
namespace xtal::common
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////

template <class T             >   using identity_t = typename T::identity::type;
template <class T, class... Ys> concept identity_p = of_p<identity_t<T>, identity_t<Ys>...>;
template <class T, class... Ys> concept identity_q = of_q<identity_t<T>, identity_t<Ys>...>;

template <class T> concept identified_p = requires {typename identity_t<T>;};

template <typename ...As>
struct identify;

template <>
struct identify<>//tag<identify>
{	
	template <class S>
	class subtype: public S
	{
	public:
		using S::S; struct identity {class type {};};

	};
};
template <typename A>
struct identify<A>
{	
	template <class I> struct indent {class type: public I::type {};};

	template <class S>
	class subtype: public S
	{
	public:
		using S::S; using identity = indent<typename S::identity>;
		
	};
};


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
