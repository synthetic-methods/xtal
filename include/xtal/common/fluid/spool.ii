#pragma once
#include "./any.ii"
#include "./store.ii"






XTAL_ENV_(push)
namespace xtal::common::fluid
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

template <class ..._s> XTAL_NYM spool;
template <class ..._s> XTAL_USE spool_t = typename spool<_s...>::type;
template <class ...Ts> XTAL_ASK spool_q = common::tag_p<spool, Ts...>;


////////////////////////////////////////////////////////////////////////////////
///\
Defines a priority-queue based on `store_t<A>`. \
Currently used for both event queues (\see `message/schedule.ii`) \
and to implement polymorphism (\see `processor/polymer.ii`). \

///\note\
May be initialized using `concord/_detail.hxx#sentry` to \
provide minimum/maximum sentinel values (for lookbehind/lookahead, respectively). \

template <class A>
struct spool<A>
{
	template <class T>
	using demitype = iterate_t<T>;

	template <class T>
	using hemitype = common::compose_s<demitype<T>, common::tag<spool>>;

	template <class T>
	class homotype: public hemitype<T>
	{
		using S_ = hemitype<T>;

		using store_u = store_t<A>;
		using visor_u = typename store_u::iterator;
		using value_u = typename store_u::value_type;
		using count_u = typename store_u::difference_type;

		store_u m_store{};
		count_u n_begin = 0;
		count_u n_end   = 0;

	public:
		using S_::S_;
		
		///\note\
		The `size()` of the `std::initializer_list` determines the extent of lookup/lookahead. \

		XTAL_CON homotype(bracket_t<value_u> w)
		:	n_end {_std::distance(w.begin(), w.end())}
		,	m_store(w)
		{}

		XTAL_TO2_(XTAL_TN2     begin(count_u n=0), _std::next(m_store.begin(), n + n_begin))
		XTAL_TO2_(XTAL_TN2       end(count_u n=0), _std::prev(m_store.  end(), n + n_end))
		XTAL_TN2_(value_u &)    peek(count_u n=0) XTAL_0EX {              return *begin(n);}
		XTAL_TN1_(value_u &) advance(count_u n=1) XTAL_0EX {n_begin += n; return *begin(0);}
		XTAL_TN1_(value_u &) abandon(bool    n=1)
		XTAL_0EX
		{
			if (n) {
				n_begin = 0;
				clear();
			}
			return *begin();
		}
		XTAL_TN0 clear()
		XTAL_0EX
		{
			m_store.erase(m_store.begin(), end());
		}

		///\note\
		Cost can be amortized by invoking `advance` and `abandon` separately, \
		allowing for branchless `advance`ment. \

		XTAL_TN0 pop(visor_u i)
		XTAL_0EX
		{
			assert(i < end());
			n_begin -= i < begin();
			m_store.erase(i);
			abandon(begin() == end());
		}
		XTAL_TN0 pop()
		XTAL_0EX
		{
			advance();
			abandon(begin() == end());
		}
		XTAL_TN2_(visor_u) scan(XTAL_DEF w)
		XTAL_0EX
		{
			return _std::lower_bound(m_store.begin(), m_store.end()
			,	XTAL_REF_(w)
			);
		}
		XTAL_TN2_(visor_u) scan(XTAL_DEF w, XTAL_DEF f)
		XTAL_0EX
		{
			return _std::lower_bound(m_store.begin(), m_store.end()
			,	XTAL_REF_(w)
			,	[f = XTAL_REF_(f)] (XTAL_DEF x, XTAL_DEF y) XTAL_0FN_(f(x) < f(y))
			);
		}
		///\note\
		Conflicting entries w.r.t. `==` are overwritten. \

		XTAL_TN1_(visor_u) push(value_u v)
		XTAL_0EX
		{
			visor_u v_ = scan(v);
			if (*v_ == v) {
				_std::swap(*v_, v); return v_;
			}
			else {
				return poke(v_, XTAL_MOV_(v));
			}
		}
		template <is_q<value_u> W>
		XTAL_TN1_(visor_u) poke(visor_u v_, W &&w)
		XTAL_0EX
		{
			return m_store.insert(v_, XTAL_REF_(w));
		}
		XTAL_TN1_(visor_u) poke(visor_u v_, XTAL_DEF ...ws)
		XTAL_0EX
		{
			return m_store.insert(v_, value_u(XTAL_REF_(ws)...));
		}
		XTAL_TN1_(visor_u) poke(visor_u v_, XTAL_DEF ...ws)
		XTAL_0EX
		XTAL_REQ_(m_store.inplace(v_, XTAL_REF_(ws)...))
		{
			return m_store.inplace(v_, XTAL_REF_(ws)...);
		}

	};
	using type = _detail::isotype<homotype>;

};


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
XTAL_ENV_(pop)
