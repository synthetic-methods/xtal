#pragma once
#include "./any.hpp"






XTAL_ENV_(push)
namespace xtal::common
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////

template <template <typename ...> class _T=class_t>
struct tag
{
	class type
	{};
	template <class S>
	class subtype: public type, public S
	{
	public:
		using S::S;
		
	};
};
template <template <typename ...> class _T>
using tag_t = typename tag<_T>::type;

template <template <typename ...> class _T, class ...Ts>
concept tag_p = (...and fungible_p<Ts, tag_t<_T>>);

template <class ...Ts>
concept tag_q = tag_p<class_t, Ts...>;


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
XTAL_ENV_(pop)
