namespace _detail
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

using namespace _retail::_detail;


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

template <class U>	concept      _unprocessed_q = not _retail::any_q<U>;
template <class U>	concept        _processed_q =     _retail::any_q<U>;

template <class U>	concept            _value_q = inapplicable_q<U> and not iterable_q<U>;
template <class U>	concept            _range_q =                           iterable_q<U>;

template <class U>	concept unprocessed_value_q = _unprocessed_q<U> and       _value_q<U>;
template <class U>	concept unprocessed_range_q = _unprocessed_q<U> and       _range_q<U>;

//\
template <class U>	concept   processed_value_q =   _processed_q<U> and       _value_q<U>;
template <class U>	concept   processed_value_q =   _processed_q<U> and not   _range_q<U>;
template <class U>	concept   processed_range_q =   _processed_q<U> and       _range_q<U>;

//NOTE: `unprocessed_q` excludes `applicable_q` values! 
template <class U>	concept       unprocessed_q =  unprocessed_value_q<U> or unprocessed_range_q<U>;
template <class U>	concept         processed_q =    processed_value_q<U> or   processed_range_q<U>;


template <class T>
struct repetitive
{
	using type = _xtd::ranges::repeat_view<based_t<T>>;

};
template <iterable_q T> requires un_n<_xtd::ranges::sized_range<based_t<T>>>
struct repetitive<T>
{
	using type = based_t<T>;

};
/*/
template <applicable_q T>
struct repetitive<T>
{
	using type = _xtd::ranges::generate_view<based_t<T>>;

};
/***/
template <class T>
using repetitive_t  = typename repetitive<T>::type;


////////////////////////////////////////////////////////////////////////////////

template <class U>
struct refer_unprocessed
{
	template <class S>
	class subtype : public bond::compose_s<S>
	{
		static_assert(any_q<S>);
		using S_ = bond::compose_s<S>;

	public:
		using S_::S_;

		XTAL_FX2_(to) (XTAL_DEF_(return,inline,get) begin(), S_::method().begin())
		XTAL_FX2_(to) (XTAL_DEF_(return,inline,get)   end(), S_::method().  end())

	};
};


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

template <class T, class Y=T>
concept connection_p = any_q<T> and requires (T t)
{
	{t.state()} -> isomorphic_q<Y>;
};
template <class T, class Y=T>
concept collection_p = any_q<T> and requires (T t)
{
	{t.state()} -> isomorphic_q<Y>;
	{t.store()} -> isomorphic_q<Y>;
};
template <class T, class Y>
concept recollection_p = collection_p<T, Y> and _std::is_rvalue_reference_v<T>;


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
