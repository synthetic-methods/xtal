namespace _detail
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

using namespace _retail::_detail;


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

template <class U>	concept      _unprocessed_q = not _retail::any_q<U>;
template <class U>	concept        _processed_q =     _retail::any_q<U>;

template <class U>	concept          _unvalue_q = cell::any_q<U> or iterable_q<U> or requires {&U::operator();};
//\
template <class U>	concept            _value_q = not iterable_q<U> and not _unvalue_q<U> and _std::is_standard_layout_v<based_t<U>>;
template <class U>	concept            _value_q =       number_q<U>;
template <class U>	concept            _range_q =     iterable_q<U>;

template <class U>	concept unprocessed_value_q = _unprocessed_q<U> and _value_q<U>;
template <class U>	concept unprocessed_range_q = _unprocessed_q<U> and _range_q<U>;

template <class U>	concept   processed_value_q =   _processed_q<U> and not _range_q<U>;
template <class U>	concept   processed_range_q =   _processed_q<U> and     _range_q<U>;

template <class U>	concept       unprocessed_q =  unprocessed_value_q<U> or unprocessed_range_q<U>;//NOTE: No excluded middle!
template <class U>	concept         processed_q =    processed_value_q<U> or   processed_range_q<U>;


template <        class   T> struct   repeated;
template <       _value_q T> struct   repeated<T> {using type = _xtd::ranges::  repeat_view<T>;};
template <     iterable_q T> struct   repeated<T> {using type = T;};
template <_std::invocable T> struct   repeated<T> {using type = _xtd::ranges::generate_view<T>;};
template <        class   T> using    repeated_t  = typename repeated<T>::type;
template <        class   T> concept  repeated_q  = not is_q<T, repeated_t<T>>;


////////////////////////////////////////////////////////////////////////////////

template <class U>
struct refer_unprocessed
{
	template <class S>
	class subtype : public bond::compose_s<S>
	{
		static_assert(any_q<S>);
		using S_ = bond::compose_s<S>;

	public:
		using S_::S_;

		XTAL_TO2_(XTAL_DEF_(alias) begin(), S_::method().begin())
		XTAL_TO2_(XTAL_DEF_(alias)   end(), S_::method().  end())

	};
};


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

template <class T, class Y=T>
concept connection_p = any_q<T> and requires (T t)
{
	{t.state()} -> isomorphic_q<Y>;
};
template <class T, class Y=T>
concept collection_p = any_q<T> and requires (T t)
{
	{t.state()} -> isomorphic_q<Y>;
	{t.store()} -> isomorphic_q<Y>;
};
template <class T, class Y>
concept recollection_p = collection_p<T, Y> and _std::is_rvalue_reference_v<T>;


}//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
