#pragma once
#include "./any.ii"
#include "./restore.ii"
#include "../message/resize.ii"
#include "../message/respan.ii"
#include "../message/revise.ii"
#include "../message/scope.ii"

XTAL_ENV_(push)
namespace xtal::processor
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

template <typename ..._s> XTAL_NYM monomer;
template <typename ..._s> XTAL_ASK monomer_q =      common::tag_p<monomer, _s...>;
template <typename ..._s> XTAL_USE monomer_t = confined_t<monomer< _s...>>;
template <typename ...As>
XTAL_FN2  monomer_f(XTAL_DEF  u)
XTAL_0EZ_(monomer_t<XTAL_TYP_(u), As...>(XTAL_REF_(u)))


////////////////////////////////////////////////////////////////////////////////

template <class U, typename ...As>
struct monomer<U, As...>
{
	using resize_u = message::resize_t<>;
	using scope_u = message::scope_t<>;

	using subkind = confer<U, As...>;

	template <any_q S>
	class subtype: public common::compose_s<S, subkind>
	{
		using S_ = common::compose_s<S, subkind>;
		using T_ = typename S_::self_t;
	
		template <class ...Xs>
		using F_ = typename S_::template bond<Xs...>;

	public:
		using S_::S_;
		using S_::self;

		template <class ...Xs>
		struct bond: F_<Xs...>
		{
			using rebound = F_<Xs...>;
			using subkind = common::compose<common::tag<monomer>
			,	concord::confer<typename rebound::result_t>
		//	,	As...
		//	,	resize_u::assign<>
			,	scope_u::assign<>
			,	rebound
			>;
			template <any_q R>
			class subtype: public common::compose_s<R, subkind>
			{
				using R_ = common::compose_s<R, subkind>;

			public:
			//	using R_::R_;
				XTAL_CO0_(subtype);
				XTAL_CO4_(subtype);

				XTAL_CXN subtype(XTAL_DEF ...xs)
				XTAL_0EX
				:	subtype(T_{}, XTAL_REF_(xs)...)
				{}
				XTAL_CXN subtype(XTAL_DEF_(is_q<T_>) t, XTAL_DEF ...xs)
				XTAL_0EX
				:	R_(R_::method(XTAL_REF_(xs)...), XTAL_REF_(t), XTAL_REF_(xs)...)
				{}

				XTAL_TO4_(XTAL_TN2 serve(XTAL_DEF... oo), R_::head(XTAL_REF_(oo)...))
				XTAL_TO2_(template <auto ...> XTAL_TN2 method(), serve())


				using R_::efflux;

				XTAL_TLX efflux(XTAL_DEF_(message::scope_q) o_scope)
				XTAL_0EX
				{
					return XTAL_FLX_((void) serve(R_::method()), -1) (R_::efflux(XTAL_REF_(o_scope)));
				}

			};
		};
		template <class ...Xs> requires restore_q<S_>
		struct bond<Xs...>: F_<Xs...>
		{
			using rebound = F_<Xs...>;
			
			using return_t = typename rebound::return_t;
			using  store_u = typename S_::template store<return_t>::type;
			using  serve_u = deranged_t<store_u>;
			using respan_u = message::respan_t<serve_u>;
		
			XTAL_LET_(int) N_share = common::seek_truth_v<_detail::recollection_p<Xs, serve_u>...>;

			using subkind = common::compose<common::tag<monomer>
			,	concord:: refer<serve_u>
			,	message::revise<store_u>
			,	As...// NOTE: Necessary for `intermit`...
			,	resize_u::assign<>
			,	scope_u::assign<>
			,	rebound
			>;
			template <any_q R>
			class subtype: public common::compose_s<R, subkind>
			{
				using R_ = common::compose_s<R, subkind>;

			public:
				using R_::R_;
				using R_::self;
				using R_::serve;
				using R_::store;
				XTAL_TO2_(template <auto ...> XTAL_TN2 method(), serve())

			//	using R_::infuse;
				///\
				Responds to `message::resize` by resizing the internal `store()`. \

				XTAL_TLX infuse(XTAL_DEF o)
				XTAL_0EX
				{
					if constexpr (is_q<resize_u, decltype(o)>) {
						return R_::infuse(o) or (store().resize(XTAL_REF_(o)), 0);
					}
					else {
						return R_::infuse(XTAL_REF_(o));
					}
				}
				using R_::influx_push;
				///\note\
				Resizing skips intermediate `recollection_p` dependencies, \
				continuing to propagate beyond. \

				XTAL_TLX influx_push(resize_u o_resize, XTAL_DEF ...oo)
				XTAL_0EX
				XTAL_REQ (0 <= N_share)
				{
					return R_::template influx_push_tail<N_share>(null_t(), o_resize, XTAL_REF_(oo)...);
				}


				using R_::efflux;
				///\
				Responds to `message::scope` by rendering the internal `store()`. \
				A match for the following scope will initiate the `respan` (returning `1`), \
				while a match for the current scope will terminate (returning `0`). \
				(Deviant behaviour is enforced by `assert`ion on `scope`.) \

				XTAL_TLX efflux(message::scope_q auto o_scope, XTAL_DEF ...oo)
				XTAL_0EX
				{
					return efflux(respan_u(store()), o_scope, XTAL_REF_(oo)...);
				}
				///\note\
				When accompanied by `message::respan`, the supplied visor will be used instead. \
				All `slots` are rendered locally unless a `visor`-compatible `rvalue` is found, \
				in which case the visor will be reused for the intermediate result. \

				XTAL_TLX efflux(respan_u o_respan, message::scope_q auto o_scope, XTAL_DEF ...oo)
				XTAL_0EX
				{
					if (R_::effuse(o_scope) == 1) return 1;
				//	else...
					(void) serve(o_respan);
					return self().reflux([&, this] (auto n, counted_q auto w)
						XTAL_0FN_(self().efflux_pull_slice(o_respan.slice(w), o_scope.slice(w).skip(n), oo...))
					) & R_::template influx_push(o_scope);
				}
				///\
				Renders the buffer slice designated by `respan_x` and `scope_x`. \
				
				XTAL_TLX efflux_pull_slice(respan_u respan_x, message::scope_q auto scope_x, XTAL_DEF ...oo)
				XTAL_0EX
				{
					auto const  t_ = respan_x.begin();
					auto const _n  = recount_f(respan_x);
					return 1 == R_::template efflux_pull_tail<N_share>(respan_x, scope_x, oo...) or
						(_v3::ranges::move(R_::method()|_n, t_), 0);
				}

			};
		};

	};
};

///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
XTAL_ENV_(pop)
