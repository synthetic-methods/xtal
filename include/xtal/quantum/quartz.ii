#pragma once
#include "./any.ii"
#include "./phase.ii"
#include "./pulse.ii"




XTAL_ENV_(push)
namespace xtal::quantum
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

template <typename ..._s> XTAL_NYM quartz;
template <typename ..._s> XTAL_ASK quartz_q = bond::tag_p<quartz, _s...>;
template <class U=size_t> XTAL_USE quartz_t = confined_t<quartz<U>>;


////////////////////////////////////////////////////////////////////////////////
///\
A `pulse, phase` used to represent e.g. `{phase/frequency, count/trigger}`. \

///\todo\
Provide overflow normalization. \

template <class U>
struct quartz<U>
{
	using V_phase = phase_value_t<U>;
	using V_pulse = pulse_value_t<U>;

	using subkind = bond::compose<phase<U>, pulse<U>, bond::tag<quartz>>;

	template <class S>
	class subtype: public bond::compose_s<S, subkind>
	{
		using S_ = bond::compose_s<S, subkind>;
	
	public:
		using S_::S_;
		using S_::self;
		using S_::twin;

		XTAL_CON subtype(phase_value_q auto &&o) XTAL_0EX: S_(V_phase {}, XTAL_FWD_(o)) {}
		XTAL_CON subtype(pulse_value_q auto &&o) XTAL_0EX: S_(XTAL_FWD_(o), V_pulse {}) {}

		XTAL_TO4_(XTAL_TN2 phase(auto &&...oo), S_::template head<0>(XTAL_FWD_(oo)...))
		XTAL_TO4_(XTAL_TN2 pulse(auto &&...oo), S_::template head<1>(XTAL_FWD_(oo)...))

		XTAL_OP2 + (auto &&w) XTAL_0FX {return twin() += XTAL_FWD_(w);}
		XTAL_OP2 - (auto &&w) XTAL_0FX {return twin() -= XTAL_FWD_(w);}
				
		XTAL_OP1 += (subtype const &t) XTAL_0EX {S_::phase() += t.phase(); S_::pulse() += t.pulse(); return self();}
		XTAL_OP1 -= (subtype const &t) XTAL_0EX {S_::phase() -= t.phase(); S_::pulse() -= t.pulse(); return self();}

	};
};


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
XTAL_ENV_(pop)
