namespace _xtd
{

#if __cpp_lib_bit_cast
	using _std::bit_cast;
#else
	template <atomic_q T, atomic_q S> requires in_n<sizeof(T), sizeof(S)>
	XTAL_DEF_(return,inline,let) bit_cast(S s) noexcept -> decltype(auto) {return __builtin_bit_cast(T, s);}
#endif

#if XTAL_VER_(STD < 2300) or XTAL_VER_(MSVC < 1700)
	template <atomic_q T>
	XTAL_DEF_(return,inline,let) copysign(T t, T s) noexcept -> decltype(auto) {return __builtin_copysign(t, s);}
#else
	using _std::copysign;
#endif


template <class W, class X, class Y> requires simplex_variable_q<W, X, Y> or un_n<anyplex_q<W> or anyplex_q<X> or anyplex_q<Y>>
XTAL_DEF_(return,inline,let)
accumulator(W &&w, X &&x, Y &&y)
noexcept -> XTAL_ALL_(w + x*y)
{
	XTAL_IF0
	XTAL_0IF_(consteval) {
		return               XTAL_REF_(y)*XTAL_REF_(x) + XTAL_REF_(w) ;
	}
#if   XTAL_SYS_(FMA) and XTAL_SYS_(builtin)
	XTAL_0IF (requires {_std::fma(y, x, w);}) {
		return __builtin_fma(XTAL_REF_(y), XTAL_REF_(x), XTAL_REF_(w));
	}
#endif
#if   XTAL_SYS_(FMA)
	XTAL_0IF (requires {fma(y, x, w);}) {
		return           fma(XTAL_REF_(y), XTAL_REF_(x), XTAL_REF_(w));
	}
#endif
	XTAL_0IF_(else) {
		return               XTAL_REF_(y)*XTAL_REF_(x) + XTAL_REF_(w) ;
	}
}
template <real_variable_q W, complex_variable_q X, real_variable_q Y>
XTAL_DEF_(return,inline,let)
accumulator(W w, X x, Y y)
noexcept -> auto
{
	return _std::complex{accumulator(w, x.real(), y), x.imag()*y};
}
template <real_variable_q W, real_variable_q X, complex_variable_q Y>
XTAL_DEF_(return,inline,let)
accumulator(W w, X x, Y y)
noexcept -> auto
{
	return _std::complex{accumulator(w, x, y.real()), x*y.imag()};
}
template <real_variable_q W, complex_variable_q X, complex_variable_q Y>
XTAL_DEF_(return,inline,let)
accumulator(W w, X x, Y y)
noexcept -> auto
{
	if constexpr (requires {fma(y, x, w);}) {
		return fma(y, x, w);
	}
	else {
		/**/
		return y*x + w;
		/*/
		auto const z_re = accumulator(accumulator(w, x.real(),y.real()), -x.imag(),y.imag());
		auto const z_im = accumulator(       x.imag()*y.real() ,  x.real(),y.imag());
		return _std::complex{z_re, z_im};
		/***/
	}
}

template <complex_variable_q W, real_variable_q X, real_variable_q Y>
XTAL_DEF_(return,inline,let)
accumulator(W w, X x, Y y)
noexcept -> auto
{
	return _std::complex{accumulator(w.real(), x, y), w.imag()};
}
template <complex_variable_q W, complex_variable_q X, real_variable_q Y>
XTAL_DEF_(return,inline,let)
accumulator(W w, X x, Y y)
noexcept -> auto
{
	return _std::complex{accumulator(w.real(), x.real(), y), accumulator(w.imag(), x.imag(), y)};
}
template <complex_variable_q W, real_variable_q X, complex_variable_q Y>
XTAL_DEF_(return,inline,let)
accumulator(W w, X x, Y y)
noexcept -> auto
{
	return _std::complex{accumulator(w.real(), x, y.real()), accumulator(w.imag(), x, y.imag())};
}

template <complex_variable_q W, complex_variable_q X, complex_variable_q Y>
XTAL_DEF_(return,inline,let)
accumulator(W w, X x, Y y)
noexcept -> auto
{
	if constexpr (requires {fma(y, x, w);}) {
		return fma(y, x, w);
	}
	else {
		/**/
		return y*x + w;
		/*/
		auto const z_re = accumulator(accumulator(w.real(), x.real(),y.real()), -x.imag(),y.imag());
		auto const z_im = accumulator(accumulator(w.imag(), x.imag(),y.real()),  x.real(),y.imag());
		return _std::complex{z_re, z_im};
		/***/
	}
}

XTAL_DEF_(return,inline,let)
accumulator(auto &&w, auto &&x, auto &&y, auto &&...ys)
noexcept -> auto
requires (1 <= sizeof...(ys))
{
	return accumulator(XTAL_REF_(w), XTAL_REF_(x), (XTAL_REF_(y) *...* XTAL_REF_(ys)));
}

}
namespace _xtd::ranges::views
{
#if XTAL_VER_(ranges == 3)
	XTAL_DEF_(inline,let)
	zip_transform(auto &&...oo)
	noexcept -> decltype(auto)
	{
		return zip_with(XTAL_REF_(oo)...);
	};
#endif

}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Structural...

XTAL_DEF_(return,inline,let)  ordinal_f( ordinal_variable_q auto o) noexcept -> auto {return o;}
XTAL_DEF_(return,inline,let) cardinal_f(cardinal_variable_q auto o) noexcept -> auto {return o;}
XTAL_DEF_(return,inline,let)  ordinal_f(cardinal_variable_q auto o) noexcept -> auto {return _std::bit_cast<_std::  make_signed_t<decltype(o)>>(o);}
XTAL_DEF_(return,inline,let) cardinal_f( ordinal_variable_q auto o) noexcept -> auto {return _std::bit_cast<_std::make_unsigned_t<decltype(o)>>(o);}
XTAL_DEF_(return,inline,let)  ordinal_f(         constant_q auto o) noexcept -> auto {return constant_n< ordinal_f(o.value)>;}
XTAL_DEF_(return,inline,let) cardinal_f(         constant_q auto o) noexcept -> auto {return constant_n<cardinal_f(o.value)>;}

XTAL_DEF_(return,inline,let)
variable_f(auto &&x)
noexcept -> decltype(auto)
{
	using X = XTAL_ALL_(x);
	XTAL_IF0
	XTAL_0IF (variable_q<X>) {return XTAL_REF_(x);}
	XTAL_0IF (constant_q<X>) {return     X::value;}
}

///\returns the conditional `x` reinterpreted as type `Y`, \
where `std::floating_point`s and `bool`eans are `static_cast`, \
while all other `std::integral`s are negated. \

template <variable_q Y>
XTAL_DEF_(return,inline,let)
condition_f(bool x)
noexcept -> Y
{
	XTAL_IF0
	XTAL_0IF ( logical_q<Y>) {return x;}
	XTAL_0IF (integral_q<Y>) {return static_cast<Y>(-x);}
	XTAL_0IF (    real_q<Y>) {return static_cast<Y>(+x);}
}



template <int N>
XTAL_DEF_(return,inline,let)
destruct_f(auto &&t)
noexcept
requires fixed_sized_q<decltype(t)>
{
	auto constexpr M = fixed_sized_n<decltype(t)>;
	return get<modulo_m<M, N>>(destruct_f(XTAL_REF_(t)));
}
XTAL_DEF_(return,inline,let)
destruct_f(auto &&t)
noexcept -> decltype(auto)
requires fixed_sized_q<decltype(t)>
{
	using T = decltype(t);
	XTAL_IF0
	XTAL_0IF (tuple_sized_q<T>) {
		return XTAL_REF_(t);
	}
	XTAL_0IF_(else) {
		return reinterpret_cast<destruct_t<T> &&>(XTAL_REF_(t));
	}
}
static_assert(_std::same_as<      int( &)[2], decltype(destruct_f(XTAL_ANY_(      _std::complex<int>  &)))>);
static_assert(_std::same_as<const int( &)[2], decltype(destruct_f(XTAL_ANY_(const _std::complex<int>  &)))>);
static_assert(_std::same_as<      int(&&)[2], decltype(destruct_f(XTAL_ANY_(      _std::complex<int> &&)))>);
static_assert(_std::same_as<const int(&&)[2], decltype(destruct_f(XTAL_ANY_(const _std::complex<int> &&)))>);

template <int N, int ...Ns>
XTAL_DEF_(return,inline,let)
dissolve_f(auto &&t)
noexcept
requires fixed_sized_q<decltype(t)>
{
	auto constexpr M = fixed_sized_n<decltype(t)>;
	auto constexpr I = modulo_m<M, N>;
	XTAL_IF0
	XTAL_0IF (0 == sizeof...(Ns)) {
		return                   get<I>(destruct_f(XTAL_REF_(t)));
	}
	XTAL_0IF (1 <= sizeof...(Ns)) {
		return dissolve_f<Ns...>(get<I>(dissolve_f(XTAL_REF_(t))));
	}
}
XTAL_DEF_(return,inline,let)
dissolve_f(auto &&t)
noexcept -> decltype(auto)
requires fixed_sized_q<decltype(t)>
{
	using T = decltype(t);
	return reinterpret_cast<dissolve_t<T> &&>(XTAL_REF_(t));
}
static_assert(_std::same_as<      int( &)[2][2], decltype(dissolve_f(XTAL_ANY_(      _std::complex<int>(&)[2])))>);
static_assert(_std::same_as<const int( &)[2][2], decltype(dissolve_f(XTAL_ANY_(const _std::complex<int>(&)[2])))>);
static_assert(_std::same_as<      int(&&)[2][2], decltype(dissolve_f(XTAL_ANY_(      _std::complex<int>   [2])))>);
static_assert(_std::same_as<const int(&&)[2][2], decltype(dissolve_f(XTAL_ANY_(const _std::complex<int>   [2])))>);


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
///\
Valued...

template <auto N0, auto N1> requires (N0 < N1)
XTAL_DEF_(let)
bounded_f(auto const &u)
{
	XTAL_IF0
	XTAL_0IF_(consteval) {
		return u < N0? N0: N1 < u? N1: u;
	}
	XTAL_0IF_(else) {
		using _std::abs;
		using U = XTAL_ALL_(u);
		U constexpr  n0 = N0;
		U constexpr  n1 = N1;
		U constexpr n01 = N0 + N1;
		if constexpr (integral_variable_q<U>) {
			return (abs(u - n0) - abs(u - n1) + n01) >> 1;
		}
		else {
			return (abs(u - n0) - abs(u - n1) + n01)*0.5f;
		}
	}
}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Ranged...

///\returns the nearest aligned offset for type `T`, \
adjusting the referenced index `i` to point to the next available argument. \

template <int N_dt=0, class T>
XTAL_DEF_(return,inline,let)
point_f(T &&t, int const n_dt=0)
noexcept -> auto
{
	using namespace _xtd::ranges;

	if constexpr (iterator_q<_std::decay_t<T>>) {
		return next(XTAL_REF_(t), N_dt + n_dt);
	}
	else {
		XTAL_IF0
		XTAL_0IF (0 <= N_dt) {return    point_f<N_dt>(begin(XTAL_REF_(t)), n_dt);}
		XTAL_0IF (N_dt <  0) {return    point_f<N_dt>(  end(XTAL_REF_(t)), n_dt);}
	}
}
template <int N_dt=0, class T>
XTAL_DEF_(return,inline,let)
endpoint_f(T &&t, int const n_dt=0)
noexcept -> auto
{
	using namespace _xtd::ranges;

	if constexpr (iterator_q<_std::decay_t<T>>) {
		return prev(XTAL_REF_(t), N_dt + n_dt);
	}
	else {
		XTAL_IF0
		XTAL_0IF (0 <= N_dt) {return endpoint_f<N_dt>(  end(XTAL_REF_(t)), n_dt);}
		XTAL_0IF (N_dt <  0) {return endpoint_f<N_dt>(begin(XTAL_REF_(t)), n_dt);}
	}
}
///\returns the `size` of the given range. \

///\note\
If provided with an `iota_view`, \
returns a `value_type` instead of `size_type` which is twice the width. \

XTAL_DEF_(return,inline,let)
count_f(auto const &t)
noexcept -> size_type
{
	using T = XTAL_ALL_(t);
	XTAL_IF0
	XTAL_0IF (fixed_sized_q<T> and un_n<fluid_sized_q<T>>) {return fixed_sized_n<T>;}
	XTAL_0IF_(return) (static_cast<size_type>(T::size()))
	XTAL_0IF_(return) (static_cast<size_type>(t .size()))
	XTAL_0IF_(return) (static_cast<size_type>(t))
	XTAL_0IF_(return) (static_cast<size_type>(0))
}
XTAL_DEF_(return,inline,let)
count_f(auto const &...ts)
noexcept -> size_type
{
	return _std::min<size_type>({(count_f(ts) - one)...}) + one;
}
XTAL_DEF_(return,inline,let) discount_f(auto const &...ts) noexcept -> decltype(auto) {return _xtd::ranges::views::drop_exactly(count_f(ts...));}
XTAL_DEF_(return,inline,let)  account_f(auto const &...ts) noexcept -> decltype(auto) {return _xtd::ranges::views::take_exactly(count_f(ts...));}
XTAL_DEF_(return,inline,let)  recount_f(auto const &...ts) noexcept requires in_n<sized_q<decltype(ts)...>> {return  account_f(ts...);}
XTAL_DEF_(return,inline,let)  recount_f(auto const &...ts) noexcept requires un_n<sized_q<decltype(ts)...>> {return discount_f(0    );}

template <counter_q I0, counter_q IN>
XTAL_DEF_(return,inline,let)
counted_f(I0 i0, IN iN)
noexcept -> auto
{
	return counted_t<common_t<I0, IN>>(i0, iN);
}

template <counter_q  I >	XTAL_DEF_(return,inline,let) counted_f(I i0, I iN) noexcept -> auto {return counted_t<I>(i0, iN);}
template <class      T >	XTAL_DEF_(return,inline,let) counted_f(T &&t)      noexcept -> auto {return counted_t<T>(XTAL_REF_(t));}
template <class      T >	XTAL_DEF_(return,inline,let) counter_f(T &&t)      noexcept -> auto {return counter_t<T>(XTAL_REF_(t));}


///\returns the `any_view` type-erased form of `y`. \

XTAL_DEF_(return,inline,let)
derange_f(iterable_q auto &&y)
noexcept -> auto
{
	using      Y  = XTAL_ALL_(y);
	using      Y_ = _xtd::ranges::any_view<iteratee_t<Y>, _xtd::ranges::get_categories<Y>()>;
	auto const n_ = recount_f(y);
	return Y_(XTAL_MOV_(y))|XTAL_MOV_(n_);
}

///\returns the result of zipping `...xs` with `f`. \

///\note\
The name is intended to mimic Haskell's `ApplicativeFunctor`. \

template <class F, class ...Xs>	concept  invocative_p = complete_q<F> and        invoke_p<F, _xtd::ranges::range_reference_t<Xs>...>;
template <class F, class ...Xs>	concept   iterative_p = complete_q<F> and _std::invocable<F, _xtd::ranges::range_reference_t<Xs>...>;

template <class F             >	requires  iterative_p<F       > XTAL_DEF_(inline,let) iterative_f(F &&f            ) noexcept -> decltype(auto) {return _xtd::ranges::views::      generate(XTAL_REF_(f)                  );}
template <class F, class    X >	requires  iterative_p<F, X    > XTAL_DEF_(inline,let) iterative_f(F &&f, X  &&   x ) noexcept -> decltype(auto) {return _xtd::ranges::views::     transform(XTAL_REF_(x), XTAL_REF_(f)    );}
template <class F, class ...Xs>	requires  iterative_p<F, Xs...> XTAL_DEF_(inline,let) iterative_f(F &&f, Xs &&...xs) noexcept -> decltype(auto) {return _xtd::ranges::views:: zip_transform(XTAL_REF_(f), XTAL_REF_(xs)...);}
template <class F, class ...Xs>	requires incomplete_q<F       > XTAL_DEF_(inline,let) iterative_f(       Xs &&...xs) noexcept -> decltype(auto) {return _xtd::ranges::views:: zip          (              XTAL_REF_(xs)...);}
//mplate <         class ...Xs>	                                XTAL_DEF_(inline,let) iterative_f(       Xs &&...xs) noexcept -> decltype(auto) {return _xtd::ranges::views:: zip          (              XTAL_REF_(xs)...);}
template <auto  f, class ...Xs>	                                XTAL_DEF_(inline,let) iterative_f(       Xs &&...xs) noexcept -> decltype(auto) {return                        iterative_f(constant_n<f>, XTAL_REF_(xs)...);}
template <class F, class ...Xs>	                                XTAL_DEF_(inline,let) iterative_f(       Xs &&...xs) noexcept -> decltype(auto) {return                        iterative_f<  invoke_n<F>>(XTAL_REF_(xs)...);}
template <class F, class ...Xs>	                                                using iterative_t = XTAL_ALL_(iterative_f<F>(XTAL_ANY_(Xs)...));

/*/
///\returns the result of applying `f` to `...xs`. \

///\note\
To be implemented by the host to transparently lift `f` when `xs...` are vectorized. \

template <class F, class ...Xs> XTAL_DEF_(inline,let) operative_f(F &&f, Xs &&...xs) noexcept -> decltype(auto) {return            XTAL_REF_(f) (XTAL_REF_(xs)...);}
template <class F, class ...Xs> XTAL_DEF_(inline,let) operative_f(       Xs &&...xs) noexcept -> decltype(auto) {return operative_f(invoke_n<F>, XTAL_REF_(xs)...);}
template <class F             > XTAL_DEF_(inline,let) operative_f(F &&f            ) noexcept -> decltype(auto) {return         XTAL_FUN_(operative_f)         ;}
/***/


///\returns the result of evaluating the result `y`. \

///\note\
To be implemented by the host to transparently reduce `y` when vectorized. \

template <class T>
XTAL_DEF_(return,inline,let)
objective_f(T &&t)
noexcept -> auto
{
	return XTAL_REF_(t);
}
template <constant_q T>
XTAL_DEF_(return,inline,let)
objective_f(T &&t)
noexcept -> auto
{
	return XTAL_REF_(t)();
}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Arithmetic...

/*/
template <template <class> class Y, class ...Xs>
XTAL_DEF_(return,inline,let)
construxion_f(Xs &&...xs)
noexcept -> decltype(auto)
{
	using W = common_t<Xs...>;
	return operative_f<Y<W>>(XTAL_REF_(xs)...);
}
XTAL_DEF_(return,inline,let)
complexion_f(auto &&...xs)
noexcept -> decltype(auto)
{
	return construxion_f<_std::complex>(XTAL_REF_(xs)...);
}
/***/

template <class X, class Y>
XTAL_DEF_(return,inline,let)
identical_f(X &&x, Y &&y)
noexcept -> bool
{
	XTAL_IF0
	XTAL_0IF (not _std::is_lvalue_reference_v<X>) {return false;}
	XTAL_0IF (not _std::is_lvalue_reference_v<Y>) {return false;}
	XTAL_0IF_(return) (_std::addressof(x) == _std::addressof(y))
	XTAL_0IF_(else) return false;
}

template <class X, class Y>
XTAL_DEF_(return,inline,let)
equal_f(X &&x, Y &&y)
noexcept -> bool
{
	XTAL_IF0
	XTAL_0IF_(return) (x == y)
	XTAL_0IF_(else) {return identical_f(XTAL_REF_(x), XTAL_REF_(y));}
}
template <class X, class Y> requires iterable_q<X, Y>// and epimorphic_q<X, Y>
XTAL_DEF_(return,inline,let)
equal_f(X &&x, Y &&y)
noexcept -> bool
{
	XTAL_IF0
	XTAL_0IF_(return) (_xtd::ranges::equal(x, y))
	XTAL_0IF_(else) {return identical_f(XTAL_REF_(x), XTAL_REF_(y));}
}

template <class X, class Y>
XTAL_DEF_(return,inline,let)
equivalent_f(X &&x, Y &&y)
noexcept -> bool
{
	return equal_f(XTAL_REF_(x), XTAL_REF_(y));
}
template <class X, class Y> requires iterable_q<X, Y> and isomorphic_q<X, Y>
XTAL_DEF_(return,inline,let)
equivalent_f(X &&x, Y &&y)
noexcept -> bool
{
	XTAL_IF0
	XTAL_0IF_(return) (x.begin() == y.begin() and x.end() == y.end())
	XTAL_0IF_(return) (x.begin() == y.begin())
	XTAL_0IF_(else) {return identical_f(XTAL_REF_(x), XTAL_REF_(y));}
}


////////////////////////////////////////////////////////////////////////////////

template <class T>
XTAL_DEF_(return,inline,let)
literal_f(T n)
noexcept -> auto
{
	return n;
}
template <class T>
XTAL_DEF_(return,inline,let)
literal_f(T n, T m, auto ...ms)
noexcept -> auto
{
	auto constexpr N_depth = sizeof(T) << 3, N_count = 1 + 1 + sizeof...(ms);
	return literal_f<T>((n << N_depth/N_count)|m, ms...);
}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#if XTAL_LOG
class
{
	XTAL_DEF_(let)
	print_list(auto &&x) const
	noexcept -> void
	{
		for (auto &&w: XTAL_REF_(x)) ::std::cout << XTAL_REF_(w) << '\t';
	}
	XTAL_DEF_(let)
	print_item(auto &&x) const
	noexcept -> void
	{
		using W = XTAL_ALL_(x);
		if constexpr (continuous_field_q<W>) {
			::std::cout.precision(17);
		}
		if constexpr (::std::is_arithmetic_v<W>) {
			if (::std::copysign(1.0, x) == 1.0) {
				 ::std::cout << ' ';
			}
		}
		::std::cout << XTAL_REF_(x) << '\t';
	}
	XTAL_DEF_(let)
	put(auto &&x) const
	noexcept -> decltype(auto)
	{
		using W = XTAL_ALL_(x);
		if constexpr (_xtd::ranges::range<W> and requires {::std::is_arithmetic_v<typename W::value_type>;}) {
			print_list(XTAL_REF_(x));
		}
		else {
			print_item(XTAL_REF_(x));
		}
		return XTAL_REF_(x);
	}

public:
	XTAL_DEF_(let)
	operator() (auto &&...xs) const
	noexcept -> decltype(auto)
	{
		if constexpr (0 < sizeof...(xs)) {
			::std::cout << '\t'; auto const x = (put(XTAL_REF_(xs)), ...);
			::std::cout << '\n';
			return x;
		}
		else {
			::std::cout << '\n';
		}
	}

}
#else
class
{
public:
	XTAL_DEF_(inline,let)
	operator() (auto &&...xs) -> decltype(auto)
	{
		if constexpr (0 < sizeof...(xs)) {
			return (XTAL_REF_(xs), ...);
		}
	}

}
#endif
const echo;

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
