namespace _xtd
{

#if __cpp_lib_bit_cast
	using _std::bit_cast;
#else
	template <atomic_q T, atomic_q S> requires in_n<sizeof(T), sizeof(S)>
	XTAL_DEF_(alias) bit_cast(S s) noexcept {return __builtin_bit_cast(T, s);}
#endif

#if XTAL_VER_(STD < 2300) or XTAL_VER_(MSVC < 1700)
	template <atomic_q T>
	XTAL_DEF_(alias) copysign(T t, T s) noexcept {return __builtin_copysign(t, s);}
#else
	using _std::copysign;
#endif


XTAL_DEF_(short)
XTAL_LET fam(auto &&w, auto &&x, auto &&y, auto &&...ys)
noexcept -> auto
requires (1 <= sizeof...(ys))
{
	return fam(XTAL_REF_(w), XTAL_REF_(x), (XTAL_REF_(y) *...* XTAL_REF_(ys)));
}
template <class W, class X, class Y> requires integral_q<W, X, Y> or un_n<number_q<W, X, Y>>
XTAL_DEF_(short)
XTAL_LET fam(W &&w, X &&x, Y &&y)
noexcept -> auto
{
	if (requires {fma(y, x, w);} and not _std::is_constant_evaluated()) {
		return fma(XTAL_REF_(y), XTAL_REF_(x), XTAL_REF_(w));
	}
	else {
		return XTAL_REF_(y)*XTAL_REF_(x) + XTAL_REF_(w);
	}
}
template <real_number_q W, real_number_q X, real_number_q Y>
XTAL_DEF_(short)
XTAL_LET fam(W w, X x, Y y)
noexcept -> auto
{
	return XTAL_IMP_fam(w, x, y);
}
template <real_number_q W, complex_number_q X, real_number_q Y>
XTAL_DEF_(short)
XTAL_LET fam(W w, X x, Y y)
noexcept -> auto
{
	return _std::complex{XTAL_IMP_fam(w, x.real(), y), x.imag()*y};
}
template <real_number_q W, real_number_q X, complex_number_q Y>
XTAL_DEF_(short)
XTAL_LET fam(W w, X x, Y y)
noexcept -> auto
{
	return _std::complex{XTAL_IMP_fam(w, x, y.real()), x*y.imag()};
}
template <real_number_q W, complex_number_q X, complex_number_q Y>
XTAL_DEF_(short)
XTAL_LET fam(W w, X x, Y y)
noexcept -> auto
{
	if constexpr (requires {fma(y, x, w);}) {
		return fma(y, x, w);
	}
	else {
		/**/
		return y*x + w;
		/*/
		auto const z_re = XTAL_IMP_fam(XTAL_IMP_fam(w, x.real(),y.real()), -x.imag(),y.imag());
		auto const z_im = XTAL_IMP_fam(                x.imag()*y.real() ,  x.real(),y.imag());
		return _std::complex{z_re, z_im};
		/***/
	}
}

template <complex_number_q W, real_number_q X, real_number_q Y>
XTAL_DEF_(short)
XTAL_LET fam(W w, X x, Y y)
noexcept -> auto
{
	return _std::complex{XTAL_IMP_fam(w.real(), x, y), w.imag()};
}
template <complex_number_q W, complex_number_q X, real_number_q Y>
XTAL_DEF_(short)
XTAL_LET fam(W w, X x, Y y)
noexcept -> auto
{
	return _std::complex{XTAL_IMP_fam(w.real(), x.real(), y), XTAL_IMP_fam(w.imag(), x.imag(), y)};
}
template <complex_number_q W, real_number_q X, complex_number_q Y>
XTAL_DEF_(short)
XTAL_LET fam(W w, X x, Y y)
noexcept -> auto
{
	return _std::complex{XTAL_IMP_fam(w.real(), x, y.real()), XTAL_IMP_fam(w.imag(), x, y.imag())};
}

template <complex_number_q W, complex_number_q X, complex_number_q Y>
XTAL_DEF_(short)
XTAL_LET fam(W w, X x, Y y)
noexcept -> auto
{
	if constexpr (requires {fma(y, x, w);}) {
		return fma(y, x, w);
	}
	else {
		/**/
		return y*x + w;
		/*/
		auto const z_re = fam(XTAL_IMP_fam(w.real(), x.real(),y.real()), -x.imag(),y.imag());
		auto const z_im = fam(XTAL_IMP_fam(w.imag(), x.imag(),y.real()),  x.real(),y.imag());
		return _std::complex{z_re, z_im};
		/***/
	}
}

}
namespace _xtd::ranges::views
{
#if XTAL_VER_(ranges == 3)
	XTAL_DEF_(inline)
	XTAL_LET zip_transform(auto &&...oo)
	noexcept -> decltype(auto)
	{
		return zip_with(XTAL_REF_(oo)...);
	};
#endif

}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Structural...

template <auto N0, auto N1> requires (N0 < N1)
XTAL_LET bounded_f(auto const &u)
{
	XTAL_IF0
	XTAL_0IF_(consteval) {
		return u < N0? N0: N1 < u? N1: u;
	}
	XTAL_0IF_(else) {
		using _std::abs;
		using U = XTAL_ALL_(u);
		U constexpr  n0 = N0;
		U constexpr  n1 = N1;
		U constexpr n01 = N0 + N1;
		if constexpr (integer_q<U>) {
			return (abs(u - n0) - abs(u - n1) + n01) >> 1;
		}
		else {
			return (abs(u - n0) - abs(u - n1) + n01)*0.5f;
		}
	}
}


///\returns the conditional `x` reinterpreted as type `Y`, \
where `std::floating_point`s and `bool`eans are `static_cast`, \
while all other `std::integral`s are negated. \

template <class Y>
XTAL_DEF_(short)
XTAL_LET condition_f(bool x)
noexcept -> Y
{
	XTAL_IF0
	XTAL_0IF (    logical_q<Y>) {return x;}
	XTAL_0IF (   integral_q<Y>) {return static_cast<Y>(-x);}
	XTAL_0IF (real_number_q<Y>) {return static_cast<Y>(+x);}
}

template <class T> XTAL_DEF_(alias) funge_f(auto const &&t) noexcept {return      static_cast<T const &&>(t);}
template <class T> XTAL_DEF_(alias) funge_f(auto       &&t) noexcept {return      static_cast<T       &&>(t);}
template <class T> XTAL_DEF_(alias) funge_f(auto const  &t) noexcept {return      static_cast<T const  &>(t);}
template <class T> XTAL_DEF_(alias) funge_f(auto        &t) noexcept {return      static_cast<T        &>(t);}

template <class T> XTAL_DEF_(alias) fudge_f(auto const &&t) noexcept {return reinterpret_cast<T const &&>(t);}
template <class T> XTAL_DEF_(alias) fudge_f(auto       &&t) noexcept {return reinterpret_cast<T       &&>(t);}
template <class T> XTAL_DEF_(alias) fudge_f(auto const  &t) noexcept {return reinterpret_cast<T const  &>(t);}
template <class T> XTAL_DEF_(alias) fudge_f(auto        &t) noexcept {return reinterpret_cast<T        &>(t);}

template <int M>
XTAL_DEF_(short)
XTAL_LET modulo_f(_std::unsigned_integral auto n)
noexcept -> auto
{
	XTAL_ALL_(n) constexpr m{M};
	n %= m;
	return n;
}
template <int M>
XTAL_DEF_(short)
XTAL_LET modulo_f(_std::  signed_integral auto n)
noexcept -> auto
{
	XTAL_ALL_(n) constexpr m{M};
	n %= m;
	n += m;
	n %= m;
	return n;
}


template <int N>
XTAL_DEF_(short)
XTAL_LET destruct_f(auto &&t)
noexcept
requires fixed_sized_q<decltype(t)>
{
	XTAL_LET M = fixed_sized_n<decltype(t)>;
	return get<modulo_f<M>(N)>(destruct_f(XTAL_REF_(t)));
}
XTAL_DEF_(short)
XTAL_LET destruct_f(auto &&t)
noexcept -> decltype(auto)
requires fixed_sized_q<decltype(t)>
{
	using T = decltype(t);
	XTAL_IF0
	XTAL_0IF (tuple_sized_q<T>) {
		return XTAL_REF_(t);
	}
	XTAL_0IF_(else) {
		return reinterpret_cast<destruct_t<T> &&>(XTAL_REF_(t));
	}
}
static_assert(id_q<      int( &)[2], decltype(destruct_f(XTAL_ANY_(_std::complex<int>        &)))>);
static_assert(id_q<const int( &)[2], decltype(destruct_f(XTAL_ANY_(_std::complex<int> const  &)))>);
static_assert(id_q<      int(&&)[2], decltype(destruct_f(XTAL_ANY_(_std::complex<int>       &&)))>);
static_assert(id_q<const int(&&)[2], decltype(destruct_f(XTAL_ANY_(_std::complex<int> const &&)))>);

///\
Defines a factory for the supplied type. \

template <class F>
XTAL_LET invoke_f = [] (auto &&...oo)
XTAL_0FN
{
	XTAL_IF0
	XTAL_0IF XTAL_TRY_TO_(F   {XTAL_REF_(oo)...})
	XTAL_0IF XTAL_TRY_TO_(F   (XTAL_REF_(oo)...))
	XTAL_0IF XTAL_TRY_TO_(F{} (XTAL_REF_(oo)...))
};
template <class F>
using    invoke_t = decltype(invoke_f<F>);

template <class F, class ...Xs>
concept  invoke_p = _std::invocable<invoke_t<F>, Xs...>;




////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Ranged...

///\returns the nearest aligned offset for type `T`, \
adjusting the referenced index `i` to point to the next available slot. \

template <int N_dt=0, class T>
XTAL_DEF_(short)
XTAL_LET    point_f(T &&t, int const n_dt=0)
noexcept -> auto
{
	using namespace _xtd::ranges;

	if constexpr (iterator_q<_std::decay_t<T>>) {
		return next(XTAL_REF_(t), N_dt + n_dt);
	}
	else {
		XTAL_IF0
		XTAL_0IF (0 <= N_dt) {return    point_f<N_dt>(begin(XTAL_REF_(t)), n_dt);}
		XTAL_0IF (N_dt <  0) {return    point_f<N_dt>(  end(XTAL_REF_(t)), n_dt);}
	}
}
template <int N_dt=0, class T>
XTAL_DEF_(short)
XTAL_LET endpoint_f(T &&t, int const n_dt=0)
noexcept -> auto
{
	using namespace _xtd::ranges;

	if constexpr (iterator_q<_std::decay_t<T>>) {
		return prev(XTAL_REF_(t), N_dt + n_dt);
	}
	else {
		XTAL_IF0
		XTAL_0IF (0 <= N_dt) {return endpoint_f<N_dt>(  end(XTAL_REF_(t)), n_dt);}
		XTAL_0IF (N_dt <  0) {return endpoint_f<N_dt>(begin(XTAL_REF_(t)), n_dt);}
	}
}
///\returns the `size` of the given range. \

///\note\
If provided with an `iota_view`, \
returns a `value_type` instead of `size_type` which is twice the width. \

template <class           ...Us>	XTAL_DEF_(short) XTAL_LET count_f(_std::           tuple<Us...>) noexcept -> size_type {return sizeof...(Us);}
template <class U, size_type N >	XTAL_DEF_(short) XTAL_LET count_f(_std::           array<U,  N>) noexcept -> size_type {return        N;}
template <class U,    class  V >	XTAL_DEF_(short) XTAL_LET count_f(_std::            pair<U,  V>) noexcept -> size_type {return        2;}
template <class U              >	XTAL_DEF_(short) XTAL_LET count_f(_std::initializer_list<U>  t ) noexcept -> size_type {return t.size();}
XTAL_DEF_(short)
XTAL_LET count_f(auto const &t)
noexcept -> size_type
{
	XTAL_IF0
	XTAL_0IF XTAL_TRY_TO_(static_cast<size_type>(t.size()))
	XTAL_0IF XTAL_TRY_TO_(static_cast<size_type>(t))
	XTAL_0IF XTAL_TRY_TO_(static_cast<size_type>(0))
}
XTAL_DEF_(short)
XTAL_LET count_f(auto const &...ts)
noexcept -> size_type
{
	return _std::min<size_type>({(count_f(ts) - size_1)...}) + size_1;
}
XTAL_DEF_(short) XTAL_LET  account_f(auto const &...ts) noexcept -> decltype(auto) {return _xtd::ranges::views::take_exactly(count_f(ts...));}
XTAL_DEF_(short) XTAL_LET discount_f(auto const &...ts) noexcept -> decltype(auto) {return _xtd::ranges::views::drop_exactly(count_f(ts...));}


template <counter_q I0, counter_q IN>
XTAL_DEF_(short)
XTAL_LET counted_f(I0 i0, IN iN)
noexcept -> auto
{
	return counted_t<common_t<I0, IN>>(i0, iN);
}

template <counter_q  I >	XTAL_DEF_(short) XTAL_LET counted_f(I i0, I iN) noexcept -> auto {return counted_t<I>(i0, iN);}
template <class      T >	XTAL_DEF_(short) XTAL_LET counted_f(T &&t)      noexcept -> auto {return counted_t<T>(XTAL_REF_(t));}
template <class      T >	XTAL_DEF_(short) XTAL_LET counter_f(T &&t)      noexcept -> auto {return counter_t<T>(XTAL_REF_(t));}


///\returns the result of zipping `...xs` with `f`. \

///\note\
The name is intended to mimic Haskell's `ApplicativeFunctor`. \

template <class F, class ...Xs>	concept  invocative_p = complete_q<F> and        invoke_p<F, _xtd::ranges::range_reference_t<Xs>...>;
template <class F, class ...Xs>	concept   iterative_p = complete_q<F> and _std::invocable<F, _xtd::ranges::range_reference_t<Xs>...>;

template <class F             >	requires  iterative_p<F       > XTAL_DEF_(inline) XTAL_LET iterative_f(F &&f            ) noexcept -> decltype(auto) {return _xtd::ranges::views::      generate(XTAL_REF_(f)                  );}
template <class F, class    X >	requires  iterative_p<F, X    > XTAL_DEF_(inline) XTAL_LET iterative_f(F &&f, X  &&   x ) noexcept -> decltype(auto) {return _xtd::ranges::views::     transform(XTAL_REF_(x), XTAL_REF_(f)    );}
template <class F, class ...Xs>	requires  iterative_p<F, Xs...> XTAL_DEF_(inline) XTAL_LET iterative_f(F &&f, Xs &&...xs) noexcept -> decltype(auto) {return _xtd::ranges::views:: zip_transform(XTAL_REF_(f), XTAL_REF_(xs)...);}
template <class F, class ...Xs>	requires incomplete_q<F       > XTAL_DEF_(inline) XTAL_LET iterative_f(       Xs &&...xs) noexcept -> decltype(auto) {return _xtd::ranges::views:: zip          (              XTAL_REF_(xs)...);}
//mplate <         class ...Xs>	                                XTAL_DEF_(inline) XTAL_LET iterative_f(       Xs &&...xs) noexcept -> decltype(auto) {return _xtd::ranges::views:: zip          (              XTAL_REF_(xs)...);}
template <class F, class ...Xs>	requires invocative_p<F, Xs...> XTAL_DEF_(inline) XTAL_LET iterative_f(       Xs &&...xs) noexcept -> decltype(auto) {return                          iterative_f(invoke_f<F>, XTAL_REF_(xs)...);}
template <class F, class ...Xs>	                                                  using    iterative_t = XTAL_ALL_(iterative_f<F>(XTAL_ANY_(Xs)...));

/*/
///\returns the result of applying `f` to `...xs`. \

///\note\
To be implemented by the host to transparently lift `f` when `xs...` are vectorized. \

template <class F, class ...Xs> XTAL_DEF_(inline) XTAL_LET operative_f(F &&f, Xs &&...xs) noexcept -> decltype(auto) {return            XTAL_REF_(f) (XTAL_REF_(xs)...);}
template <class F, class ...Xs> XTAL_DEF_(inline) XTAL_LET operative_f(       Xs &&...xs) noexcept -> decltype(auto) {return operative_f(invoke_f<F>, XTAL_REF_(xs)...);}
template <class F             > XTAL_DEF_(inline) XTAL_LET operative_f(F &&f            ) noexcept -> decltype(auto) {return         [] XTAL_1FN_(operative_f)         ;}
/***/


///\returns the result of evaluating the result `y`. \

///\note\
To be implemented by the host to transparently reduce `y` when vectorized. \

template <class T>
XTAL_DEF_(inline)
XTAL_LET objective_f(T &&t)
noexcept -> _std::remove_cvref_t<T>
{
	return XTAL_REF_(t);
}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Arithmetic...

/*/
template <template <class> class Y, class ...Xs>
XTAL_DEF_(short)
XTAL_LET construxion_f(Xs &&...xs)
noexcept -> decltype(auto)
{
	using W = common_t<Xs...>;
	return operative_f<Y<W>>(XTAL_REF_(xs)...);
}
XTAL_DEF_(short)
XTAL_LET complexion_f(auto &&...xs)
noexcept -> decltype(auto)
{
	return construxion_f<_std::complex>(XTAL_REF_(xs)...);
}
/***/

template <class X, class Y>
XTAL_DEF_(short)
XTAL_LET identical_f(X &&x, Y &&y)
noexcept -> bool
{
	XTAL_IF0
	XTAL_0IF (not _std::is_lvalue_reference_v<X>) {return false;}
	XTAL_0IF (not _std::is_lvalue_reference_v<Y>) {return false;}
	XTAL_0IF XTAL_TRY_TO_(_std::addressof(x) == _std::addressof(y))
	XTAL_0IF_(else) return false;
}

template <class X, class Y>
XTAL_DEF_(short)
XTAL_LET equal_f(X &&x, Y &&y)
noexcept -> bool
{
	XTAL_IF0
	XTAL_0IF XTAL_TRY_TO_(x == y)
	XTAL_0IF_(else) {return identical_f(XTAL_REF_(x), XTAL_REF_(y));}
}
template <class X, class Y> requires iterable_q<X, Y>// and epimorphic_q<X, Y>
XTAL_DEF_(short)
XTAL_LET equal_f(X &&x, Y &&y)
noexcept -> bool
{
	XTAL_IF0
	XTAL_0IF XTAL_TRY_TO_(_xtd::ranges::equal(x, y))
	XTAL_0IF_(else) {return identical_f(XTAL_REF_(x), XTAL_REF_(y));}
}

template <class X, class Y>
XTAL_DEF_(short)
XTAL_LET equivalent_f(X &&x, Y &&y)
noexcept -> bool
{
	return equal_f(XTAL_REF_(x), XTAL_REF_(y));
}
template <class X, class Y> requires iterable_q<X, Y> and isomorphic_q<X, Y>
XTAL_DEF_(short)
XTAL_LET equivalent_f(X &&x, Y &&y)
noexcept -> bool
{
	XTAL_IF0
	XTAL_0IF XTAL_TRY_TO_(x.begin() == y.begin() and x.end() == y.end())
	XTAL_0IF XTAL_TRY_TO_(x.begin() == y.begin())
	XTAL_0IF_(else) {return identical_f(XTAL_REF_(x), XTAL_REF_(y));}
}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#if XTAL_LOG
class
{
	XTAL_LET print_list(auto &&x) const
	noexcept -> void
	{
		for (auto &&w: XTAL_REF_(x)) ::std::cout << XTAL_REF_(w) << '\t';
	}
	XTAL_LET print_item(auto &&x) const
	noexcept -> void
	{
		using W = XTAL_ALL_(x);
		if constexpr (continuous_field_q<W>) {
			::std::cout.precision(17);
		}
		if constexpr (::std::is_arithmetic_v<W>) {
			if (::std::copysign(1.0, x) == 1.0) {
				 ::std::cout << ' ';
			}
		}
		::std::cout << XTAL_REF_(x) << '\t';
	}
	XTAL_LET put(auto &&x) const
	noexcept -> decltype(auto)
	{
		using W = XTAL_ALL_(x);
		if constexpr (_xtd::ranges::range<W> and requires {::std::is_arithmetic_v<typename W::value_type>;}) {
			print_list(XTAL_REF_(x));
		}
		else {
			print_item(XTAL_REF_(x));
		}
		return XTAL_REF_(x);
	}

public:
	XTAL_LET operator () (auto &&...xs) const
	noexcept -> decltype(auto)
	{
		if constexpr (0 < sizeof...(xs)) {
			::std::cout << '\t'; auto const x = (put(XTAL_REF_(xs)), ...);
			::std::cout << '\n';
			return x;
		}
		else {
			::std::cout << '\n';
		}
	}

}
#else
class
{
public:
	XTAL_DEF_(inline)
	XTAL_LET operator () (auto &&...xs) -> decltype(auto)
	{
		if constexpr (0 < sizeof...(xs)) {
			return (XTAL_REF_(xs), ...);
		}
	}

}
#endif
const echo;

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
