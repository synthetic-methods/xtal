//////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Standard...

template <int ...Ns> XTAL_DEF_(return,inline) XTAL_SET in_f(                  auto const &t) XTAL_0EX -> auto {using T = XTAL_ALL_(t); return T{ (...or  (t == T{Ns}))};}
template <int ...Ns> XTAL_DEF_(return,inline) XTAL_SET in_f(integral_number_q auto const &t) XTAL_0EX -> auto {using T = XTAL_ALL_(t); return T{-(...or  (t == T{Ns}))};}

template <int ...Ns> XTAL_DEF_(return,inline) XTAL_SET un_f(                  auto const &t) XTAL_0EX -> auto {using T = XTAL_ALL_(t); return T{ (...and (t != T{Ns}))};}
template <int ...Ns> XTAL_DEF_(return,inline) XTAL_SET un_f(integral_number_q auto const &t) XTAL_0EX -> auto {using T = XTAL_ALL_(t); return T{-(...and (t != T{Ns}))};}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Structural...

template <auto M=0 >	XTAL_LET  top_f(auto n) {return decltype(n) (M <= n);}
template <auto M   >	XTAL_LET stop_f(auto n) {return n < 0 or M < n? M: n;}

template <auto N0, auto N1> requires (N0 < N1)
XTAL_LET bounded_f(auto const &u)
{
	XTAL_IF0
	XTAL_0IF_(dynamic) {
		using _std::abs;
		using U = XTAL_ALL_(u);
		U constexpr  n0 = N0;
		U constexpr  n1 = N1;
		U constexpr n01 = N0 + N1;
		if constexpr (integral_number_q<U>) {
			return (abs(u - n0) - abs(u - n1) + n01) >> 1;
		}
		else {
			return (abs(u - n0) - abs(u - n1) + n01)*0.5f;
		}
	}
	XTAL_0IF_(default) {
		return u < N0? N0: N1 < u? N1: u;
	}
}


///\returns the conditional `x` reinterpreted as type `Y`, \
where `std::floating_point`s and `bool`eans are `static_cast`, \
while all other `std::integral`s are negated. \

template <class Y>
XTAL_DEF_(return,inline)
XTAL_LET condition_f(bool x)
XTAL_0EX -> Y
{
	XTAL_IF0
	XTAL_0IF (       is_q<bool, Y>) {return x;}
	XTAL_0IF (    real_number_q<Y>) {return static_cast<Y>(+x);}
	XTAL_0IF (integral_number_q<Y>) {return static_cast<Y>(-x);}
}

template <class T> XTAL_DEF_(return,inline) XTAL_LET funge_f(auto const &&t) XTAL_0EX -> decltype(auto) {return      static_cast<T const &&>(t);}
template <class T> XTAL_DEF_(return,inline) XTAL_LET funge_f(auto       &&t) XTAL_0EX -> decltype(auto) {return      static_cast<T       &&>(t);}
template <class T> XTAL_DEF_(return,inline) XTAL_LET funge_f(auto const  &t) XTAL_0EX -> decltype(auto) {return      static_cast<T const  &>(t);}
template <class T> XTAL_DEF_(return,inline) XTAL_LET funge_f(auto        &t) XTAL_0EX -> decltype(auto) {return      static_cast<T        &>(t);}

template <class T> XTAL_DEF_(return,inline) XTAL_LET fudge_f(auto const &&t) XTAL_0EX -> decltype(auto) {return reinterpret_cast<T const &&>(t);}
template <class T> XTAL_DEF_(return,inline) XTAL_LET fudge_f(auto       &&t) XTAL_0EX -> decltype(auto) {return reinterpret_cast<T       &&>(t);}
template <class T> XTAL_DEF_(return,inline) XTAL_LET fudge_f(auto const  &t) XTAL_0EX -> decltype(auto) {return reinterpret_cast<T const  &>(t);}
template <class T> XTAL_DEF_(return,inline) XTAL_LET fudge_f(auto        &t) XTAL_0EX -> decltype(auto) {return reinterpret_cast<T        &>(t);}


///\
Defines a factory for the supplied type. \

template <class F>
XTAL_LET invoke_f = [] (auto &&...oo)
XTAL_0FN
{
	XTAL_IF0
	XTAL_0IF XTAL_TRY_TO_(F   {XTAL_REF_(oo)...})
	XTAL_0IF XTAL_TRY_TO_(F   (XTAL_REF_(oo)...))
	XTAL_0IF XTAL_TRY_TO_(F{} (XTAL_REF_(oo)...))
};
template <class F>
XTAL_USE invoke_t = decltype(invoke_f<F>);

template <class F, class ...Xs>
XTAL_REQ invoke_p = _std::invocable<invoke_t<F>, Xs...>;


XTAL_DEF_(return,inline) XTAL_LET invalued_f(auto const &&t) XTAL_0EX -> decltype(auto) {return reinterpret_cast<invalued_t<decltype(t)> const &&>(XTAL_MOV_(t));}
XTAL_DEF_(return,inline) XTAL_LET invalued_f(auto const  &t) XTAL_0EX -> decltype(auto) {return reinterpret_cast<invalued_t<decltype(t)> const  &>(XTAL_REF_(t));}
XTAL_DEF_(return,inline) XTAL_LET invalued_f(auto       &&t) XTAL_0EX -> decltype(auto) {return reinterpret_cast<invalued_t<decltype(t)>       &&>(XTAL_MOV_(t));}
XTAL_DEF_(return,inline) XTAL_LET invalued_f(auto        &t) XTAL_0EX -> decltype(auto) {return reinterpret_cast<invalued_t<decltype(t)>        &>(XTAL_REF_(t));}

XTAL_DEF_(return,inline) XTAL_LET involved_f(auto const &&t) XTAL_0EX -> decltype(auto) {return reinterpret_cast<involved_t<decltype(t)> const &&>(XTAL_MOV_(t));}
XTAL_DEF_(return,inline) XTAL_LET involved_f(auto const  &t) XTAL_0EX -> decltype(auto) {return reinterpret_cast<involved_t<decltype(t)> const  &>(XTAL_REF_(t));}
XTAL_DEF_(return,inline) XTAL_LET involved_f(auto       &&t) XTAL_0EX -> decltype(auto) {return reinterpret_cast<involved_t<decltype(t)>       &&>(XTAL_MOV_(t));}
XTAL_DEF_(return,inline) XTAL_LET involved_f(auto        &t) XTAL_0EX -> decltype(auto) {return reinterpret_cast<involved_t<decltype(t)>        &>(XTAL_REF_(t));}

static_assert(id_q<      int( &)[2], decltype(invalued_f(XTAL_ANY_(_std::complex<int>        &)))>);
static_assert(id_q<const int( &)[2], decltype(invalued_f(XTAL_ANY_(_std::complex<int> const  &)))>);
static_assert(id_q<      int(&&)[2], decltype(invalued_f(XTAL_ANY_(_std::complex<int>       &&)))>);
static_assert(id_q<const int(&&)[2], decltype(invalued_f(XTAL_ANY_(_std::complex<int> const &&)))>);

static_assert(id_q<      int( &)[2], decltype(involved_f(XTAL_ANY_(_std::complex<int>        &)))>);
static_assert(id_q<const int( &)[2], decltype(involved_f(XTAL_ANY_(_std::complex<int> const  &)))>);
static_assert(id_q<      int(&&)[2], decltype(involved_f(XTAL_ANY_(_std::complex<int>       &&)))>);
static_assert(id_q<const int(&&)[2], decltype(involved_f(XTAL_ANY_(_std::complex<int> const &&)))>);


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Ranged...

///\returns the nearest aligned offset for type `T`, \
adjusting the referenced index `i` to point to the next available slot. \

template <class T>
XTAL_DEF_(return,inline)
XTAL_SET maligned_f(size_type &i)
XTAL_0EX
{
	XTAL_LET N = aligned_n<T> << 3U;
	XTAL_LET M = N - 1;
	i += M; i &= ~M; size_type const j = i; i += M; return j >> 3U;
};

template <int N_offset=0, class T>
XTAL_DEF_(return,inline)
XTAL_LET endpoint_f(T &&t)
XTAL_0EX
{
	if constexpr (iterator_q<T>) {
		XTAL_IF0
		XTAL_0IF (0 == N_offset) {return XTAL_REF_(t);}
		XTAL_0IF (0 != N_offset) {return _xtd::ranges::prev(XTAL_REF_(t), N_offset);}
	}
	else {
		XTAL_IF0
		XTAL_0IF (0 <= N_offset) {return point_f<N_offset>(_xtd::ranges::  end(XTAL_REF_(t)));}
		XTAL_0IF (N_offset <  0) {return point_f<N_offset>(_xtd::ranges::begin(XTAL_REF_(t)));}
	}
}
template <int N_offset=0, class T>
XTAL_DEF_(return,inline)
XTAL_LET point_f(T &&t)
XTAL_0EX
{
	if constexpr (iterator_q<_std::decay_t<T>>) {
		XTAL_IF0
		XTAL_0IF (0 == N_offset) {return XTAL_REF_(t);}
		XTAL_0IF (0 != N_offset) {return _xtd::ranges::next(XTAL_REF_(t), N_offset);}
	}
	else {
		XTAL_IF0
		XTAL_0IF (0 <= N_offset) {return point_f<N_offset>(_xtd::ranges::begin(XTAL_REF_(t)));}
		XTAL_0IF (N_offset <  0) {return point_f<N_offset>(_xtd::ranges::  end(XTAL_REF_(t)));}
	}
}
///\returns the `size` of the given range. \

///\note\
If provided with an `iota_view`, \
returns a `value_type` instead of `size_type` which is twice the width. \

template <class           ...Us>	XTAL_DEF_(return,inline) XTAL_SET count_f(_std::           tuple<Us...>) XTAL_0EX {return sizeof...(Us);}
template <class U, size_type N >	XTAL_DEF_(return,inline) XTAL_SET count_f(_std::           array<U,  N>) XTAL_0EX {size_type n =        N; return n;}
template <class U,    class  V >	XTAL_DEF_(return,inline) XTAL_SET count_f(_std::            pair<U,  V>) XTAL_0EX {size_type n =        2; return n;}
template <class U              >	XTAL_DEF_(return,inline) XTAL_SET count_f(_std::initializer_list<U>  t ) XTAL_0EX {size_type n = t.size(); return n;}
XTAL_DEF_(return,inline)
XTAL_LET count_f(auto const &t)
XTAL_0EX -> size_type
{
	XTAL_IF0
	XTAL_0IF XTAL_TRY_TO_(static_cast<size_type>(t.size()))
	XTAL_0IF XTAL_TRY_TO_(static_cast<size_type>(t))
	XTAL_0IF XTAL_TRY_TO_(static_cast<size_type>(0))
}
XTAL_DEF_(return,inline)
XTAL_LET count_f(auto const &...ts)
XTAL_0EX -> size_type
{
	return _std::min<size_type>({(count_f(ts) - size_1)...}) + size_1;
}
XTAL_DEF_(return,inline) XTAL_SET  account_f(auto const &...ts) XTAL_0EX {return _xtd::ranges::views::take_exactly(count_f(ts...));}
XTAL_DEF_(return,inline) XTAL_SET discount_f(auto const &...ts) XTAL_0EX {return _xtd::ranges::views::drop_exactly(count_f(ts...));}


template <counter_q I0, counter_q IN>
XTAL_DEF_(return,inline)
XTAL_SET counted_f(I0 i0, IN iN)
XTAL_0EX {return counted_t<common_t<I0, IN>>(i0, iN);}

template <counter_q  I >	XTAL_DEF_(return,inline) XTAL_SET counted_f(I i0, I iN) XTAL_0EX {return counted_t<I>(i0, iN);}
template <class      T >	XTAL_DEF_(return,inline) XTAL_SET counted_f(T &&t)      XTAL_0EX {return counted_t<T>(XTAL_REF_(t));}
template <class      T >	XTAL_DEF_(return,inline) XTAL_SET counter_f(T &&t)      XTAL_0EX {return counter_t<T>(XTAL_REF_(t));}


///\returns the result of zipping `...xs` with `f`. \

///\note\
The name is intended to mimic Haskell's `ApplicativeFunctor`. \

template <class F             > XTAL_DEF_(inline) XTAL_LET iterative_f(F &&f            ) XTAL_0EX {return _xtd::ranges::views::      generate(XTAL_REF_(f)                  );}
template <class F, class    X > XTAL_DEF_(inline) XTAL_LET iterative_f(F &&f, X  &&   x ) XTAL_0EX {return _xtd::ranges::views::     transform(XTAL_REF_(x), XTAL_REF_(f)    );}
template <class F, class ...Xs> XTAL_DEF_(inline) XTAL_LET iterative_f(F &&f, Xs &&...xs) XTAL_0EX {return _xtd::ranges::views:: zip_transform(XTAL_REF_(f), XTAL_REF_(xs)...);}
template <class F, class ...Xs> XTAL_DEF_(inline) XTAL_LET iterative_f(       Xs &&...xs) XTAL_0EX {return                          iterative_f(invoke_f<F>, XTAL_REF_(xs)...);}

/*/
///\returns the result of applying `f` to `...xs`. \

///\note\
To be extended by the host to transparently lift `f` when `xs...` are vectorized. \

template <class F, class ...Xs> XTAL_DEF_(inline) XTAL_LET operative_f(F &&f, Xs &&...xs) XTAL_0EX -> decltype(auto) {return            XTAL_REF_(f) (XTAL_REF_(xs)...);}
template <class F, class ...Xs> XTAL_DEF_(inline) XTAL_LET operative_f(       Xs &&...xs) XTAL_0EX -> decltype(auto) {return operative_f(invoke_f<F>, XTAL_REF_(xs)...);}
template <class F             > XTAL_DEF_(inline) XTAL_LET operative_f(F &&f            ) XTAL_0EX -> decltype(auto) {return         [] XTAL_1FN_(operative_f)         ;}
/***/


///\returns the result of evaluating the result `y`. \

///\note\
To be extended by the host to transparently reduce `y` when vectorized. \

template <class T>
XTAL_DEF_(inline)
XTAL_SET objective_f(T &&t)
XTAL_0EX -> _std::remove_cvref_t<T>
{
	return XTAL_REF_(t);
}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Arithmetic...

/*/
template <template <class> class Y, class ...Xs>
XTAL_DEF_(return,inline)
XTAL_LET construxion_f(Xs &&...xs)
XTAL_0EX -> decltype(auto)
{
	using W = common_t<Xs...>;
	return operative_f<Y<W>>(XTAL_REF_(xs)...);
}
XTAL_DEF_(return,inline)
XTAL_LET complexion_f(auto &&...xs)
XTAL_0EX -> decltype(auto)
{
	return construxion_f<_std::complex>(XTAL_REF_(xs)...);
}
/***/

template <class X, class Y>
XTAL_DEF_(return,inline)
XTAL_LET identical_f(X &&x, Y &&y)
XTAL_0EX -> bool
{
	XTAL_IF0
	XTAL_0IF (not _std::is_lvalue_reference_v<X>) {return false;}
	XTAL_0IF (not _std::is_lvalue_reference_v<Y>) {return false;}
	XTAL_0IF XTAL_TRY_TO_(_std::addressof(x) == _std::addressof(y))
	XTAL_0IF_(default) return false;
}

template <class X, class Y>
XTAL_DEF_(return,inline)
XTAL_LET equal_f(X &&x, Y &&y)
XTAL_0EX -> bool
{
	XTAL_IF0
	XTAL_0IF XTAL_TRY_TO_(x == y)
	XTAL_0IF_(default) {return identical_f(XTAL_REF_(x), XTAL_REF_(y));}
}
template <class X, class Y> requires iterable_q<X, Y>// and epimorphic_q<X, Y>
XTAL_DEF_(return,inline)
XTAL_LET equal_f(X &&x, Y &&y)
XTAL_0EX -> bool
{
	XTAL_IF0
	XTAL_0IF XTAL_TRY_TO_(_xtd::ranges::equal(x, y))
	XTAL_0IF_(default) {return identical_f(XTAL_REF_(x), XTAL_REF_(y));}
}

template <class X, class Y>
XTAL_DEF_(return,inline)
XTAL_LET equivalent_f(X &&x, Y &&y)
XTAL_0EX -> bool
{
	return equal_f(XTAL_REF_(x), XTAL_REF_(y));
}
template <class X, class Y> requires iterable_q<X, Y> and isomorphic_q<X, Y>
XTAL_DEF_(return,inline)
XTAL_LET equivalent_f(X &&x, Y &&y)
XTAL_0EX -> bool
{
	XTAL_IF0
	XTAL_0IF XTAL_TRY_TO_(x.begin() == y.begin() and x.end() == y.end())
	XTAL_0IF XTAL_TRY_TO_(x.begin() == y.begin())
	XTAL_0IF_(default) {return identical_f(XTAL_REF_(x), XTAL_REF_(y));}
}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#if XTAL_LOG
class
{
	XTAL_LET print_list(auto &&x)
	XTAL_0FX -> void
	{
		for (auto &&w: XTAL_REF_(x)) ::std::cout << XTAL_REF_(w) << '\t';
	}
	XTAL_LET print_item(auto &&x)
	XTAL_0FX -> void
	{
		using W = XTAL_ALL_(x);
		if constexpr (continuous_field_q<W>) {
			::std::cout.precision(17);
		}
		if constexpr (::std::is_arithmetic_v<W>) {
			if (::std::copysign(1.0, x) == 1.0) {
				 ::std::cout << ' ';
			}
		}
		::std::cout << XTAL_REF_(x) << '\t';
	}
	XTAL_LET put(auto &&x)
	XTAL_0FX -> decltype(auto)
	{
		using W = XTAL_ALL_(x);
		if constexpr (_xtd::ranges::range<W> and requires {::std::is_arithmetic_v<typename W::value_type>;}) {
			print_list(XTAL_REF_(x));
		}
		else {
			print_item(XTAL_REF_(x));
		}
		return XTAL_REF_(x);
	}

public:
	XTAL_LET operator () (auto &&...xs)
	XTAL_0FX -> decltype(auto)
	{
		if constexpr (0 < sizeof...(xs)) {
			::std::cout << '\t'; auto const x = (put(XTAL_REF_(xs)), ...);
			::std::cout << '\n';
			return x;
		}
		else {
			::std::cout << '\n';
		}
	}

}
#else
class
{
public:
	XTAL_DEF_(inline)
	XTAL_LET operator () (auto &&...xs) -> decltype(auto)
	{
		if constexpr (0 < sizeof...(xs)) {
			return (XTAL_REF_(xs), ...);
		}
	}

}
#endif
const echo;

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
