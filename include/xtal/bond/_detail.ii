








namespace _detail
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

using namespace _retail::_detail;


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

///\
Reifies `template`s of the form `<class, typename...>` via the member `subtype`. \

template <template <class, typename...> class F_>
struct compost
{
	template <class S, class ..._Ts>	struct sub    {using type = F_<S, _Ts...>;};
	template <class S              >	struct sub<S> {using type = F_<S        >;};
	template <class S, class ..._Ts>	using  subtype = typename sub<S, _Ts...>::type;

//	NOTE: The indirection above avoids invoking a unary `F_` with empty `_Ts...`, causing `clang` to fail.
};

///\
Determines whether `T` has a composable member `subtype`. \

template <typename T>
concept compose_q = complete_q<compost<T::template subtype>> and not requires {typename T::subtype;};


template <class S,                typename ..._Ts>	struct incompose;
template <                        typename ...Ts_>	struct excompose;

template <class S,                typename ..._Ts>	using  incompose_s = typename incompose<S, _Ts...>::type;
template <template <class, class...> class ...Fs_>	using  excompose_t =          excompose<compost<Fs_>...>;

template <class S, class _,       typename ..._Ts>	struct incompose<S, _, _Ts...> : incompose<S, _Ts...> {};
template <         class _,       typename ...Ts_>	struct excompose<   _, Ts_...> : excompose<   Ts_...> {};

template <class S                                >	struct incompose<S> {using type = S;};
template <                                       >	struct excompose< > {template <class S, typename ..._Ts> using subtype = incompose_s<S, _Ts...>;};

template <class S,  compose_q _T, typename ..._Ts>	struct incompose<S, _T, _Ts...> : incompose<typename _T::template subtype<S>, _Ts...> {};
template <          compose_q T_, typename ...Ts_> struct excompose<   T_, Ts_...> {template <class S, typename ..._Ts> using subtype = incompose_s<S, _Ts..., excompose<Ts_...>, T_>;};


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

template <class ...Us>
struct navigate
{
	static_assert(0 == sizeof...(Us));

	template <class S>
	class supertype : public S
	{
		using S_ = S;

	public:
		using S_::S_;

		template <class _, class ..._s> struct super    : super<_s...> {};
		template <class _             > struct super<_> {using type = _;};

	};
};

template <class U_node>
struct navigate<U_node> : navigate<U_node, void>
{
};
template <class U_node, class U_edge>
struct navigate<U_node, U_edge>
{
	template <class S>
	class supertype : public S
	{
		using S_ = S;
		using T_self = typename S_::self_type;

	protected:
		template <class ..._s>
		using duper = typename S_::template super<_s...>;

	public:
		using S_::S_;
		using node_type = U_node;

		template <                          class ..._s>                           struct super                   : duper<                        _s...> {};
		template <class _,                  class ...Is>                           struct super<_, U_edge, Is...> : duper<U_node,                 Is...> {};
		template <class _, intercedent_q I, class ...Is> requires vacant_q<U_edge> struct super<_, I,      Is...> : duper<  void, precedent_s<I>, Is...> {};
		template <class _,  antecedent_q I, class ...Is> requires vacant_q<U_edge> struct super<_, I,      Is...> : super<U_node,                 Is...> {};
		template <class _,                  class ...Is> requires vacant_q<U_edge> struct super<_, U_node, Is...> : super<U_node,                 Is...> {};

		template <class ...Is> using self_s = typename super<T_self, Is...>::type;

		XTAL_FX4_(alias) (template <size_type ...Is> requires (0 == sizeof...(Is))
		XTAL_DEF_(return,inline,get) self(auto &&...oo), S_::self(XTAL_REF_(oo)...)
		)
		XTAL_FX4_(alias) (template <size_type ...Is> requires (1 <= sizeof...(Is))
		XTAL_DEF_(return,inline,get) self(auto &&...oo), self<constant_t<Is>...>(XTAL_REF_(oo)...)
		)
		XTAL_FX4_(alias) (template <class     ...Is> requires (1 <= sizeof...(Is))
		XTAL_DEF_(return,inline,get) self(auto &&...oo), S_::template self<self_s<Is...>>(XTAL_REF_(oo)...)
		)

		XTAL_FX4_(alias) (XTAL_DEF_(return,inline,get) node(), self<U_node>())

	};
	template <class S>
	class subtype : public supertype<S>
	{
		using S_ = supertype<S>;
	
	public:
		using S_::S_;

	};
	template <class S> requires complete_q<typename S::head_type>
	class subtype<S> : public supertype<S>
	{
		using S_ = supertype<S>;
		using U_head = typename S::head_type;
	
	protected:
		template <class ..._s>
		using duper = typename S_::template super<_s...>;

	public:
		using S_::S_;
		using node_type = U_node;

		template <         class ..._s>                           struct super                   : duper<        _s...> {};
		template <class _, class ...Is> requires vacant_q<U_edge> struct super<_, U_head, Is...> : duper<U_node, Is...> {};

		template <class ...Is> using head_s = typename super<U_node, Is...>::type;
		template <class ...Is> using head_t = complete_t<typename head_s<Is...>::head_type, U_head>;

		XTAL_FX4_(alias) (template <size_type ...Is> requires (0 == sizeof...(Is))
		XTAL_DEF_(return,inline,get) head(auto &&...oo), S::head(XTAL_REF_(oo)...)
		)
		XTAL_FX4_(alias) (template <size_type ...Is> requires (1 <= sizeof...(Is))
		XTAL_DEF_(return,inline,get) head(auto &&...oo), head<constant_t<Is>...>(XTAL_REF_(oo)...)
		)
		XTAL_FX4_(alias) (template <class     ...Is> requires (1 <= sizeof...(Is))
		XTAL_DEF_(return,inline,get) head(auto &&...oo), S::template self<head_s<Is...>>().head(XTAL_REF_(oo)...)
		)

	};
};


////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
