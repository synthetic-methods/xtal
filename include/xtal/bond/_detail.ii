








namespace _detail
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

template <iterator_q I > XTAL_DEF_(short) XTAL_LET    mover_f(I i) noexcept -> auto {return _std::   make_move_iterator(i);}
template <iterator_q I > XTAL_DEF_(short) XTAL_LET reverser_f(I i) noexcept -> auto {return _std::make_reverse_iterator(i);}


////////////////////////////////////////////////////////////////////////////////

template <iterator_q Y_, iterator_q X_> requires isomorphic_q<Y_, X_>
XTAL_DEF_(inline)
XTAL_LET swap_with(Y_ y0, X_ const x0, X_ const xN, bool const n_seq=false)
noexcept -> void
{
	using namespace _std;
#ifdef __cpp_lib_execution
	if (not _std::is_constant_evaluated()) {
		XTAL_LET par = execution::unseq;
		XTAL_LET seq = execution::  seq;
		if    (n_seq) swap_ranges(seq, x0, xN, y0);
		else          swap_ranges(par, x0, xN, y0);
	}
	else {
		swap_ranges(x0, xN, y0);
	}
#else
	swap_ranges(x0, xN, y0);
#endif
}
template <iterator_q Y_, iterable_q Xs>
XTAL_DEF_(inline)
XTAL_LET swap_with(Y_ y0, Xs const &xs, bool const n_seq=false)
noexcept -> void
{
	swap_with(y0, xs.begin(), xs.end(), n_seq);
}


////////////////////////////////////////////////////////////////////////////////

template <auto f, iterator_q Y_, iterator_q X_>
XTAL_DEF_(inline)
XTAL_LET copy_to(Y_ y0, X_ const x0, X_ const xN, bool const n_seq=false)
noexcept -> void
{
	using namespace _std;
#ifdef __cpp_lib_execution
	if (not _std::is_constant_evaluated()) {
		XTAL_LET seq = execution::  seq;
		XTAL_LET par = execution::unseq;
		if    (n_seq) transform(seq, x0, xN, y0, f);
		else          transform(par, x0, xN, y0, f);
	}
	else {
		transform(x0, xN, y0, f);
	}
#else
	transform(x0, xN, y0, f);
#endif
}
template <iterator_q Y_, iterator_q X_>
XTAL_DEF_(inline)
XTAL_LET copy_to(Y_ y0, X_ const x0, X_ const xN, bool const n_seq=false)
noexcept -> void
{
	using Y = iterated_u<Y_>;
	copy_to(y0, x0, xN, invoke_f<Y>, n_seq);
}
template <iterator_q Y_, iterator_q X_> requires isomorphic_q<Y_, X_>
XTAL_DEF_(inline)
XTAL_LET copy_to(Y_ y0, X_ const x0, X_ const xN, bool const n_seq=false)
noexcept -> void
{
	using namespace _std;
#ifdef __cpp_lib_execution
	if (not _std::is_constant_evaluated()) {
		XTAL_LET seq = execution::  seq;
		XTAL_LET par = execution::unseq;
		if    (n_seq) copy(seq, x0, xN, y0);
		else          copy(par, x0, xN, y0);
	}
	else {
		copy(x0, xN, y0);
	}
#else
	copy(x0, xN, y0);
#endif
}

template <auto f, iterator_q Y_, iterable_q Xs>
XTAL_DEF_(inline)
XTAL_LET copy_to(Y_ y0, Xs const &xs, bool const n_seq=false)
noexcept -> void
//requires return_q<decltype(f), iteratee_t<Xs>>
{
	copy_to<f>(y0, xs.begin(), xs.end(), n_seq);
}
template <iterator_q Y_, iterable_q Xs>
XTAL_DEF_(inline)
XTAL_LET copy_to(Y_ y0, Xs const &xs, bool const n_seq=false)
noexcept -> void
{
	using X_ = iterator_t<Xs>;
	using X  = iterated_u<X_>;
	using Y  = iterated_u<Y_>;
	XTAL_IF0
	XTAL_0IF (same_q<Y_, X_> and alignof(Y) == alignof(X)) {
		_std::memcpy(y0, XTAL_REF_(xs).begin(), sizeof(xs));
	}
	XTAL_0IF_(else) {
		copy_to(y0, xs.begin(), xs.end(), n_seq);
	}
}


////////////////////////////////////////////////////////////////////////////////

template <auto f, iterator_q Y_, iterator_q X_>
XTAL_DEF_(inline)
XTAL_LET move_to(Y_ y0, X_ const x0, X_ const xN, bool const n_seq=false)
noexcept -> void
{
	copy_to<f>(y0, mover_f(x0), mover_f(xN), n_seq);
}
template <iterator_q Y_, iterator_q X_>
XTAL_DEF_(inline)
XTAL_LET move_to(Y_ y0, X_ x0, X_ xN, bool const n_seq=false)
noexcept -> void
{
	copy_to(y0, mover_f(x0), mover_f(xN), n_seq);
}

template <auto f, iterator_q Y_, iterable_q Xs>
XTAL_DEF_(inline)
XTAL_LET move_to(Y_ y0, Xs &&xs, bool const n_seq=false)
noexcept -> void
{
	move_to<f>(y0, xs.begin(), xs.end(), n_seq);
}
template <iterator_q Y_, iterable_q Xs>
XTAL_DEF_(inline)
XTAL_LET move_to(Y_ y0, Xs &&xs, bool const n_seq=false)
noexcept -> void
{
	using X_ = iterator_t<Xs>;
	using X  = iterated_u<X_>;
	using Y  = iterated_u<Y_>;
	XTAL_IF0
	XTAL_0IF (same_q<Y_, X_> and alignof(Y) == alignof(X)) {
		_std::memmove(y0, XTAL_REF_(xs).begin(), sizeof(xs));
	}
	XTAL_0IF_(else) {
		move_to(y0, xs.begin(), xs.end(), n_seq);
	}
}


////////////////////////////////////////////////////////////////////////////////

template <auto f, class W>
XTAL_DEF_(inline)
XTAL_LET apply_to(W &w, bool const n_seq=false)
noexcept -> void
{
	w = f(XTAL_MOV_(w));
}
template <auto f, class Ws> requires iterable_q<Ws>
XTAL_DEF_(inline)
XTAL_LET apply_to(Ws &ws, bool const n_seq=false)
noexcept -> void
{
	move_to<f>(ws.begin(), ws, n_seq);
}


////////////////////////////////////////////////////////////////////////////////

/**/
template <class Y, class X>
XTAL_LET mix_to(Y &y, X &&x)
noexcept -> void
{
	auto j = point_f(x);
	auto i = point_f(y);
	auto N = count_f(y);
	for (XTAL_ALL_(N) n{}; n < N; ++n) {*i++ += XTAL_MOV_(*j++);}
};
template <class Y, class ...Xs>
XTAL_DEF_(inline)
XTAL_LET mix_to(Y &y, Xs &&...xs)
noexcept -> void
{
	mix_to(y, iterative_f([] (auto &&o, auto &&...oo) XTAL_0FN_(o +...+ oo), XTAL_REF_(xs)...));
};
/*/
template <class Y, class ...Xs>
XTAL_DEF_(inline)
XTAL_LET mix_to(Y &y, Xs &&...xs)
noexcept -> void
{
	using namespace _xtd::ranges;
	
	auto  x = iterative_f([] (auto &&o, auto &&...oo) XTAL_0FN_(o +...+ oo), XTAL_REF_(xs)..., y);
	auto _j = point_f(x);
	auto _i = point_f(y);
	auto  n = count_f(y);
	
	auto &copy_j =                    _j ;
	auto  move_j = make_move_iterator(_j);

	XTAL_IF0
#if XTAL_VER_(LLVM)
	XTAL_0IF XTAL_TRY_DO_(_std::copy_n(copy_j, n, _i))
#endif
	XTAL_0IF XTAL_TRY_DO_(copy_n(move_j, n, _i))
	XTAL_0IF XTAL_TRY_DO_(move(x|account_f(n), _i))
	XTAL_0IF_(else) {for (int m{}; m < n; ++m) {*_i++ = *move_j++;}}
};
/***/

//////////////////////////////////////////////////////////////////////////////
}////////////////////////////////////////////////////////////////////////////
