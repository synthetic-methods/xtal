








namespace _detail
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

using namespace _retail::_detail;


////////////////////////////////////////////////////////////////////////////////

XTAL_DEF_(return,inline,let)
thunk_f(auto &&o)
noexcept -> decltype(auto)
{
	return [&] XTAL_1FN_(to) (XTAL_REF_(o));
}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

//\
template <class       W >	concept    member_q = _xtd::nominal_value_reference<W>;
template <class       W >	concept    member_q = _xtd::nominal_value_reference<W> or iterable_q<W> and _xtd::ranges::borrowed_range<based_t<W>>;
template <class       W >	concept dismember_q = not member_q<W>;

template <class       W >	struct     member    {using type = typename _xtd::          decay_value<W>::value_type;};
template <dismember_q W >	struct     member<W> {using type = typename _xtd::decay_value_reference<W>::value_type;};
template <class       W >	using      member_t =              typename member<W>::type;
/*!
\brief
Constructs/references the provided value.
*/
template <    class   M >	XTAL_DEF_(return,inline,let)   member_f(auto &&...w) noexcept -> decltype(auto) {return             M (XTAL_REF_(w)...);}
template <   atomic_q M >	XTAL_DEF_(return,inline,let)   member_f(auto &&   w) noexcept -> decltype(auto) {return static_cast<M>(XTAL_REF_(w))   ;}
template <dismember_q M >
XTAL_DEF_(return,inline,let)
member_f(auto &&w)
noexcept -> decltype(auto)
requires _xtd::lvalue_reference<decltype(w)>
{
	using namespace _std;
	//\
	return shared_ptr(addressof(XTAL_REF_(w)));
	return &XTAL_REF_(w);
}

/*!
\brief
Resolves/dereferences the provided value.
*/
template <    class   M >	XTAL_DEF_(return,inline,let) remember_f(M &&m) noexcept -> decltype(auto) {return  XTAL_REF_(m)      ;}
template <  pointed_q M >	XTAL_DEF_(return,inline,let) remember_f(M &&m) noexcept -> decltype(auto) {return *XTAL_REF_(m)      ;}
//mplate <  wrapped_q M >	XTAL_DEF_(return,inline,let) remember_f(M &&m) noexcept -> decltype(auto) {return  XTAL_REF_(m).get();}

/*!
\brief
Resolves/dereferences the provided value.

\returns
The previous value.
*/
template <member_q W>
XTAL_DEF_(return,inline,let)
dismember_f(W &m, W w)
noexcept -> decltype(auto)
{
	return _std::exchange(m, XTAL_MOV_(w));
}
template <member_q W>
XTAL_DEF_(return,inline,let)
dismember_f(W &m, auto &&...x)
noexcept -> decltype(auto)
{
	return thunk_f(XTAL_MOV_(m)) (new (&m) based_t<W>(XTAL_REF_(x)...));
}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/*!
\brief
Reifies `template`s of the form `<class, typename...>` via the member `subtype`.
*/
template <template <class, typename...> class F_>
struct compost
{
	template <class S, class ..._Ts>	struct sub    {using type = F_<S, _Ts...>;};
	template <class S              >	struct sub<S> {using type = F_<S        >;};
	template <class S, class ..._Ts>	using  subtype = typename sub<S, _Ts...>::type;

//	NOTE: The indirection above avoids invoking a unary `F_` with empty `_Ts...`, causing `clang` to fail.
};

/*!
\brief
Determines whether `T` has a composable member `subtype`.
*/
template <typename T>
concept compose_q = complete_q<compost<T::template subtype>> and not requires {typename T::subtype;};

template <class S,                typename ..._Ts >	struct incompose;
template <                        typename ... Ts_>	struct excompose;

template <class S,                typename ..._Ts >	using  incompose_s = typename incompose<S, _Ts...>::type;
template <template <class, class...> class ... Fs_>	using  excompose_t =          excompose<compost<Fs_>...>;

template <class S, class _,       typename ..._Ts >	struct incompose<S, _, _Ts ...> : incompose<S, _Ts ...> {};
template <         class _,       typename ... Ts_>	struct excompose<   _,  Ts_...> : excompose<    Ts_...> {};

template <class S                                 >	struct incompose<S> {using type = S;};
template <                                        >	struct excompose< >
{
	template <class S, typename ..._Ts>
	using subtype = incompose_s<S, _Ts ...>;

};
template <class S, compose_q _T , typename ..._Ts >	struct incompose<S, _T , _Ts ...> : incompose<typename _T::template subtype<S>, _Ts...> {};
template <         compose_q  T_, typename ... Ts_>	struct excompose<    T_,  Ts_...>
{
	template <class S, typename ..._Ts>
	using subtype = incompose_s<S,  _Ts..., excompose<Ts_...>, T_>;

};


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

template <class T_node, class A_edge=void>
struct navigate
{
	template <class S>
	class subtype : public S
	{
		using T_self = typename S::self_type;
		using U_head = typename S::head_type;

		template <class ...               > struct duped       {using type = S;};
		template <class Y, fungible_q<S> X> struct duped<Y, X> {using type = X;};
		template <class Y                 > struct duped<Y   > {using type = Y;};

		template <class ..._s>
		struct duper        :             duped<_s...> {};
		
		template <class ..._s> requires requires {typename S::template super<_s...>;}
		struct duper<_s...> : S::template super<_s...> {};

	//\
	protected:
	public:
		template <                          class ..._s>                             struct super                   : duper<                        _s...> {};
		template <class Y,                  class ..._s>                             struct super<Y, A_edge, _s...> : duper<T_node,                 _s...> {};
		template <class Y,                  class ..._s> requires in_q<A_edge, void> struct super<Y, U_head, _s...> : duper<T_node,                 _s...> {};
		template <class Y,                  class ..._s> requires in_q<A_edge, void> struct super<Y, T_node, _s...> : duper<T_node,                 _s...> {};
		template <class Y, intercedent_q I, class ..._s> requires in_q<A_edge, void> struct super<Y, I     , _s...> : duper<  void, precedent_s<I>, _s...> {};
		template <class Y,  antecedent_q I, class ..._s> requires in_q<A_edge, void> struct super<Y, I     , _s...> : super<T_node,                 _s...> {};

	public:
		using S::S;

		template <class ..._s> using self_s = typename super<T_self, based_t<_s>...>::type;
		template <class ..._s> using head_s = typename super<T_node, based_t<_s>...>::type;
		template <class ..._s> using head_t = typename super<T_node, based_t<_s>...>::type::head_type;
		template <class ..._s> static constant_t<complete_q<head_t<_s...>>> constexpr head_q{};

		XTAL_FX4_(to) (template <class ..._s> requires none_q<_s...>
		XTAL_DEF_(return,inline,get)
		self(auto &&...oo),
			S::self(XTAL_REF_(oo)...))

		XTAL_FX4_(to) (template <class ..._s> requires none_q<_s...> and complete_q<U_head>
		XTAL_DEF_(return,inline,get)
		head(auto &&...oo),
			S::head(XTAL_REF_(oo)...))


		XTAL_FX4_(to) (template <class ..._s> requires some_q<_s...> and complete_q<self_s<_s...>>
		XTAL_DEF_(return,inline,get)
		self(auto &&...oo),
			S::template self<self_s<_s...>>       (XTAL_REF_(oo)...))

		XTAL_FX4_(to) (template <class ..._s> requires some_q<_s...> and complete_q<head_t<_s...>>
		XTAL_DEF_(return,inline,get)
		head(auto &&...oo),
			S::template self<head_s<_s...>>().head(XTAL_REF_(oo)...))


		XTAL_FX4_(to) (template <auto  ..._s> requires some_n<_s...> and complete_q<self_s<constant_t<_s>...>>
		XTAL_DEF_(return,inline,get)
		self(auto &&...oo),
			S::template self<self_s<constant_t<_s>...>>       (XTAL_REF_(oo)...))

		XTAL_FX4_(to) (template <auto  ..._s> requires some_n<_s...> and complete_q<head_t<constant_t<_s>...>>
		XTAL_DEF_(return,inline,get)
		head(auto &&...oo),
			S::template self<head_s<constant_t<_s>...>>().head(XTAL_REF_(oo)...))

	};
};


////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
