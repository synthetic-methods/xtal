#pragma once
#include "./any.hh"
#include "./seek.ii"





XTAL_ENV_(push)
namespace xtal::bond
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

#include "./_detail.hxx"


////////////////////////////////////////////////////////////////////////////////

template <class T>
struct define
{
	template <class S>
	class subtype: public S
	{
		friend T;
		using S_ = S;

	public:
		using S_::S_;

		XTAL_CXN subtype(auto &&...oo)
		XTAL_0EX
		:	S_(XTAL_FWD_(oo)...)
		{}


	public://protected:
		using T_self = T;
		using U_self = unit_t;

	protected:
		template <class Y_self, typename ...Is>
		struct super: bond::seek_back<Y_self, Is...> {};
		
	//	template <class Y_self, typename ...Is>
	//	XTAL_REQ_(typename S_::template super<Y_self, Is...>)
	//	struct super<Y_self, Is...>: S_::template super<Y_self, Is...> {};
		
	public:
		template <class ...Is>
		using self_t = typename super<T_self, Is...>::type;

		///\returns `*this` with type `Y=T`. \

		template <class Y=T> XTAL_TN2 self() XTAL_0FX_(&&) {return forge_f<Y const &&>(XTAL_MOV_(*this));}
		template <class Y=T> XTAL_TN2 self() XTAL_0EX_(&&) {return forge_f<Y       &&>(XTAL_MOV_(*this));}
		template <class Y=T> XTAL_TN2 self() XTAL_0FX_(&)  {return forge_f<Y const  &>(*this);}
		template <class Y=T> XTAL_TN2 self() XTAL_0EX_(&)  {return forge_f<Y        &>(*this);}
		
		///\returns `this` as the `define`d supertype. \

		XTAL_TO4_(XTAL_TN2 then(), self<S_>())

		///\returns a copy of `*this` with type `Y=T`. \

		XTAL_TO2_(template <class Y=T> XTAL_TN2_(based_t<Y>) twin(), self<Y>())

	};
	using type = subtype<unit_t>;

};
template <class T>
struct refine;


////////////////////////////////////////////////////////////////////////////////

template <class U>
struct defer;

template <class U>
struct refer;


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
XTAL_ENV_(pop)
