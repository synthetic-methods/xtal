#pragma once
#include "./any.hh"






XTAL_ENV_(push)
namespace xtal::bond
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////

template <class Y=decltype([] () {})>
struct tab
{
	class type
	{};
	template <class S>
	class subtype : public type, public S
	{
	public:
		using S::S;
		
	};
	template <made_q<type> S>
	class subtype<S> : public S
	{
	public:
		using S::S;
		
	};
};
template <class Y=decltype([] () {})>
using tab_t = typename tab<Y>::type;

template <class Y, class ...Ts> concept tab_p = made_p<tab_t<Y>, Ts...>;
template <class T, class    Y > concept tab_q = tab_p<Y, T>;


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
XTAL_ENV_(pop)
