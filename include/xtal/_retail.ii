








namespace _retail
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
//\
Standard...

using  extent_type = _std::  make_signed_t<XTAL_STD_(size_type)>;
using    size_type = _std::make_unsigned_t<XTAL_STD_(size_type)>;
using    sign_type = XTAL_ALL_(false - true);
class    void_type ;
using    null_type = XTAL_STD_(null_type);
using    unit_type = XTAL_STD_(unit_type);

template <auto  N>	using  extent_constant_t	= _std::integral_constant<extent_type, static_cast<extent_type>(N)>;
template <auto  N>	using    size_constant_t	= _std::integral_constant<  size_type, static_cast<  size_type>(N)>;
template <auto  N>	using    sign_constant_t	= _std::integral_constant<  sign_type, static_cast<  sign_type>(N)>;


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Structural...

template <class T             >	using           based_t	=                     XTAL_NOM_(T) ;
template <class T             >	using           based_u	=            typename XTAL_NOM_(T)::value_type;
template <class T             >	concept         based_q	=      _std::same_as<T, based_t<T>>;
template <class T             >	concept       unbased_q	=  not _std::same_as<T, based_t<T>>;

template <class T             >	struct       identity                         {using type = _std::type_identity<T>;};
template <class U             >	struct       identity<_std::type_identity<U>> {using type = _std::type_identity<U>;};

template <class T             >	using        identity_t	= typename identity  <T>::type;
template <class T             >	using        identity_u	= typename identity_t<T>::type;
template <class T             >	concept      identity_q	= _std::same_as<identity_t<T>, T>;

template <         class ...Ts>	struct       fungible              : _std::false_type                                                    {};
template <class T, class ...Ts>	struct       fungible<T, Ts...>    : _std::conjunction<fungible<T, Ts>...>                               {};
template <class T, class    T1>	struct       fungible<T, T1   >    : _std::disjunction<_std::is_base_of<T, T1>, _std::is_base_of<T1, T>> {};
template <         class ...Ts>	concept      fungible_q	=      fungible<based_t<Ts>...>{}();

template <         class ...Ts>	struct      isotropic ;
template <         class ...Ts>	struct      epitropic ;
template <class T, class ...Ts>	struct      isotropic<T, Ts...> : _std::conjunction<_std::is_same<         based_t<Ts>, based_t<T>>...> {};
template <class T, class ...Ts>	struct      epitropic<T, Ts...> : _std::conjunction<_std::is_constructible<based_t<Ts>,         T >...> {};
template <         class ...Ts>	concept     isotropic_q	=  isotropic<   Ts...>{}();
template <         class ...Ts>	concept     epitropic_q	=  epitropic<   Ts...>{}();

template <         class ...Ts>	struct     isomorphic ;
template <         class ...Ts>	struct     epimorphic ;
template <         class ...Ts>	struct     isomorphic :    isotropic<Ts...> {};
template <         class ...Ts>	struct     epimorphic :    epitropic<Ts...> {};
template <         class ...Ts>	concept    isomorphic_q	=  isomorphic<   Ts...>{}();
template <         class ...Ts>	concept    epimorphic_q	=  epimorphic<   Ts...>{}();

template <class T, class ...Us>	concept          make_p	= _std::constructible_from<based_t<T>, Us...>;
template <         class ...Ts>	concept          make_q	=       epitropic<Ts...>{}();
template <         class ...Ts>	concept          same_q	=       isotropic<Ts...>{}();
template <         class ...Ts>	concept     different_q	=  not  isotropic<Ts...>{}();
template <         auto  ...Ns>	concept          same_n	=       same_q<_std::integral_constant<_std::common_type_t<decltype(Ns)...>, Ns>...>;
template <         auto  ...Ns>	concept     different_n	=  different_q<_std::integral_constant<_std::common_type_t<decltype(Ns)...>, Ns>...>;

template <         class ...Ts>	concept      multiple_q	=  2 <= sizeof...(Ts);
template <         class ...Ts>	concept        single_q	=  1 == sizeof...(Ts);
template <         class ...Ts>	concept          some_q	=  1 <= sizeof...(Ts);
template <         class ...Ts>	concept          none_q	=  0 == sizeof...(Ts);
template <         auto  ...Ns>	concept      multiple_n	=  2 <= sizeof...(Ns);
template <         auto  ...Ns>	concept        single_n	=  1 == sizeof...(Ns);
template <         auto  ...Ns>	concept          some_n	=  1 <= sizeof...(Ns);
template <         auto  ...Ns>	concept          none_n	=  0 == sizeof...(Ns);

template <auto  N             >	concept    incomplete_n	=  N == 0;
template <auto  N             >	concept      complete_n	=  N != 0;
template <class T             >	concept    incomplete_q	=  not requires {typename _std::void_t<decltype(sizeof(T))>;};
template <class T             >	concept      complete_q	=  not incomplete_q<T>;
template <         class ...Ts>	struct       complete	;
template <         class ...Ts>	using        complete_t	=  typename complete<Ts...>::type;

template <                           >	struct complete<        >    {class type  { };};
template <  complete_q T, class ...Ts>	struct complete<T, Ts...>    {using type = T ;};
template <incomplete_q T, class ...Ts>	struct complete<T, Ts...>  : complete<Ts...> {};

template <auto  N, auto  ...Ns>	concept            in_n	=  complete_n<N> and none_n<Ns...> or (...or same_n<N, Ns>);
template <class T, class ...Ts>	concept            in_q	=  complete_q<T> and none_q<Ts...> or (...or same_q<T, Ts>);
template <auto  N, auto  ...Ns>	concept            un_n	=  not in_n<N, Ns...>;
template <class T, class ...Ts>	concept            un_q	=  not in_q<T, Ts...>;


template <         class ...Ts>	concept        common_q	=  some_q<Ts...> and requires {typename _std::common_type<Ts...>::type;};
template <         class ...Ts>	using          common_t	=  _std::conditional_t<common_q<Ts...>, _std::common_type<Ts...>, _std::type_identity<void>>::type;

template <         class ...Xs>	using          either_t	= _std::variant<based_t<Xs>...>;
template <class T, class ...Xs>	concept        either_q	=  fungible_q<T, either_t<Xs...>>;

template <class T             >  concept        atomic_q =  complete_q<T> and _xtd::trivial<based_t<T>>;
template <class T             >  concept     molecular_q =  complete_q<T> and _xtd::nominal<based_t<T>>;
template <class T             >  concept  submolecular_q =  atomic_q<T> or molecular_q<T> and _std::is_standard_layout_v<based_t<T>>;

template <class S, class T=S  >	using         qualify_s = _xtd::transfer_cvref_t<                                S , based_t<T>>;
template <class S, class T=S  >	using      disqualify_s = _xtd::transfer_cvref_t<_xtd::remove_rvalue_reference_t<S>, based_t<T>>;


template <class F, class ...Xs>	using          return_t	= _std::invoke_result_t<F, Xs...>;
template <class F, class ...Xs>	concept    applicable_p	= _std::invocable      <F, Xs...>;
template <class F             >	concept    applicable_q	=      applicable_p<F> or _std::is_pointer_v<XTAL_ALL_(+XTAL_ANY_(F))>;
template <class F, class ...Xs>	concept  inapplicable_p	=  not applicable_p<F, Xs...>;
template <class F             >	concept  inapplicable_q	=  not applicable_q<F       >;

template <class F, class X    >	concept  automorphism_p	=  same_q<return_t<F, X>, X>;
template <class X, class F    >	concept  automorphism_q	=  same_q<return_t<F, X>, X>;


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Valued...

template <auto  N, auto   Z=0 >	auto constexpr   sign_v	= (0 < N) - (N < 0) + (N == 0)*sign_type{Z};
template <auto  N             >	auto constexpr cosign_v	= -sign_v<N&1, -1>;
template <auto  M, auto     N >	auto constexpr   skip_v	= (M < 0)? N: (M <= N) + N;
template <auto  M, auto     N >	auto constexpr  above_v	= (M < N)? N: static_cast<XTAL_ALL_(N)>(M + 1);
template <auto  M, auto     N >	auto constexpr  below_v	= (N < M)? N: static_cast<XTAL_ALL_(N)>(M - 1);
template <auto  M, auto     N >	auto constexpr modulo_v	= ((N%M) + M)%M;


template <auto  N=null_type{} >	struct       constant  	: _std::integral_constant<decltype(N), N> {};
template <auto  N=null_type{} >	using        constant_t	=  constant<N>;
template <class T             >	concept      constant_q	=  complete_q<T> and _xtd::constant_equivocable<based_t<T>>;

template <class T             >	struct       variable     {using value_type = based_t<T>;};
template <constant_q T        >	struct       variable<T>  {using value_type = based_u<T>;};
template <class T             >	using        variable_u	=  typename variable<T>::value_type;
template <class T             >	concept      variable_q	=  not constant_q<T>;

template <auto  N        >	using     integral_constant_t	= _std::integral_constant<decltype(N), (N)>;
template <auto  N        >	using     cardinal_constant_t	=     size_constant_t<N>;
template <auto  N        >	using      ordinal_constant_t	=   extent_constant_t<N>;
template <auto  N        >	using      logical_constant_t	= _std::integral_constant<bool,    bool(N)>;

template <class T        >	concept   integral_variable_q	= _std::              integral<based_t<T>>;
template <class T        >	concept   cardinal_variable_q	= _std::     unsigned_integral<based_t<T>>;
template <class T        >	concept    ordinal_variable_q	= _std::       signed_integral<based_t<T>>;
template <class T        >	concept    logical_variable_q	= _std::       same_as<bool  , based_t<T>>;
template <class T        >	concept       real_variable_q	= _std::        floating_point<based_t<T>>;
template <class T        >	concept    complex_variable_q	=  fungible_q<T, _std::complex<XTAL_ALL_(abs(XTAL_ANY_(T)))>>;
template <class T        >	concept    simplex_variable_q	=  integral_variable_q<T> or    real_variable_q<T>;
template <class T        >	concept    numeric_variable_q	=   complex_variable_q<T> or simplex_variable_q<T>;

template <class T        >	concept   integral_constant_q	= constant_q<T> and requires {requires integral_variable_q<XTAL_ALL_(T{}())>;};
template <class T        >	concept   cardinal_constant_q	= constant_q<T> and requires {requires cardinal_variable_q<XTAL_ALL_(T{}())>;};
template <class T        >	concept    ordinal_constant_q	= constant_q<T> and requires {requires  ordinal_variable_q<XTAL_ALL_(T{}())>;};
template <class T        >	concept    logical_constant_q	= constant_q<T> and requires {requires  logical_variable_q<XTAL_ALL_(T{}())>;};
template <class T        >	concept       real_constant_q	= constant_q<T> and requires {requires     real_variable_q<XTAL_ALL_(T{}())>;};
template <class T        >	concept    complex_constant_q	= constant_q<T> and requires {requires  complex_variable_q<XTAL_ALL_(T{}())>;};
template <class T        >	concept    simplex_constant_q	= constant_q<T> and requires {requires  simplex_variable_q<XTAL_ALL_(T{}())>;};
template <class T        >	concept    numeric_constant_q	= constant_q<T> and requires {requires  numeric_variable_q<XTAL_ALL_(T{}())>;};
template <class T        >	concept    natural_constant_q	= integral_constant_q<T> and requires {requires 0 <= T{};};
template <class T        >	concept  unnatural_constant_q	= integral_constant_q<T> and requires {requires T{} <  0;};

template <class T        >	concept   integral_q	= integral_variable_q<T> or integral_constant_q<T>;
template <class T        >	concept   cardinal_q	= cardinal_variable_q<T> or cardinal_constant_q<T>;
template <class T        >	concept    ordinal_q	=  ordinal_variable_q<T> or  ordinal_constant_q<T>;
template <class T        >	concept    logical_q	=  logical_variable_q<T> or  logical_constant_q<T>;
template <class T        >	concept       real_q	=     real_variable_q<T> or     real_constant_q<T>;
template <class T        >	concept    complex_q	=  complex_variable_q<T> or  complex_constant_q<T>;
template <class T        >	concept    simplex_q	=  simplex_variable_q<T> or  simplex_constant_q<T>;
template <class T        >	concept    numeric_q	=  numeric_variable_q<T> or  numeric_constant_q<T>;


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Valued & Sized...

template <extent_type... Ns>
struct extense : _std::integer_sequence<extent_type, Ns...>
{
	using petrotype = _std::array<extent_type, sizeof...(Ns)>;
	using supertype = _std::integer_sequence<extent_type, Ns...>;

	XTAL_FX1_(to) (XTAL_DEF_(return,inline,explicit operator)
	auto(), petrotype{Ns...})

	XTAL_FX1_(to) (XTAL_DEF_(return,inline,let)
	operator() (), *this)

	template <extent_type ...Ms>
	XTAL_DEF_(return,inline,met)
	operator <=> (extense, extense<Ms...>)
	noexcept -> auto {return sizeof...(Ns) <=> sizeof...(Ms);}

	template <extent_type ...Ms>
	XTAL_DEF_(return,inline,met)
	operator  == (extense, extense<Ms...>)
	noexcept -> bool {return sizeof...(Ns) == sizeof...(Ms);}

};
template <extent_type... Ns>
using extents_t = extense<Ns...>;


template <extent_type ...Ns>
struct   assess
{
	static extents_t<                      Ns...> constexpr extents{};
	static extent_constant_t<(0 +...+ (0 < Ns)) > constexpr    rank{};

};
template <          auto  ...Ns>                              struct   assayed        : assayed<_xtd::make_signed_f(Ns)...> {};
template <ordinal_q auto  ...Ns> requires (...and (0  <= Ns)) struct   assayed<Ns...> : assess <Ns...> {static extent_constant_t<(1 *...* Ns)> constexpr extent{};};
template <ordinal_q auto  ...Ns> requires (...or  (Ns <  0 )) struct   assayed<Ns...> : assess <Ns...> {static extent_constant_t<-1          > constexpr extent{};};
template <                     >                              struct   assayed<     > : assess <     > {static extent_constant_t< 0          > constexpr extent{};};


////////////////////////////////////////////////////////////////////////////////

template <class T             >	using           array_u	= _xtd::transfer_const_t<T, _xtd::remove_extent_t<based_t<T>>>;
template <class T             >	auto constexpr  array_n	=                           _xtd::       extent_v<based_t<T>> ;
template <class T             >	concept         array_q	=            different_q<T, array_u<T>>;//NOTE: `std::is_array_v` doesn't accept `[0]...`.


////////////////////////////////////////////////////////////////////////////////

template <class T             >	struct   fixed_valued;
template <class T             >	struct   fluid_valued;
template <class T             >	using          valued   = fluid_valued<T>;

template <class T             >	using    fixed_valued_u	=  typename fixed_valued<based_t<T>>::value_type;
template <class T             >	using    fluid_valued_u	=  typename fluid_valued<based_t<T>>::value_type;
template <class T             >	using          valued_u	=  typename       valued<based_t<T>>::value_type;

template <class T             >	concept  fixed_valued_q	=  requires {requires different_q<T, fixed_valued_u<T>>;};
template <class T             >	concept  fluid_valued_q	=  requires {requires different_q<T, fluid_valued_u<T>>;};
template <class T             >	concept        valued_q	=  requires {requires different_q<T,       valued_u<T>>;};

template <class T             >	using    array_valued_u	=  array_u<T>;
template <class T             >	using    under_valued_u	= _xtd::transfer_const_t<T, _std::underlying_type_t<based_t<T>>>;
template <class T             >	using    inner_valued_u	= _xtd::transfer_const_t<T,  typename based_t<T>:: value_type>;
template <class T             >	using   scalar_valued_u	= _xtd::transfer_const_t<T,  typename based_t<T>::scalar_type>;
template <class T             >	using   Scalar_valued_u	= _xtd::transfer_const_t<T,  typename based_t<T>::Scalar     >;

template <class T             >	concept  array_valued_q	=  array_q<T>;
template <class T             >	concept  inner_valued_q	=  requires {requires complete_q< inner_valued_u<T>>;};
template <class T             >	concept  under_valued_q	=  requires {requires complete_q< under_valued_u<T>>;};
template <class T             >	concept scalar_valued_q	=  un_n<fixed_valued_q<T>> and requires {requires complete_q<scalar_valued_u<T>>;};
template <class T             >	concept Scalar_valued_q	=  un_n<fixed_valued_q<T>> and requires {requires complete_q<Scalar_valued_u<T>>;};

template <     identity_q T   >	struct   fixed_valued<T> {using value_type =      identity_u<T>;};
template < array_valued_q T   >	struct   fixed_valued<T> {using value_type =  array_valued_u<T>;};
template < inner_valued_q T   >	struct   fixed_valued<T> {using value_type =  inner_valued_u<T>;};
template < under_valued_q T   >	struct   fixed_valued<T> {using value_type =  under_valued_u<T>;};

template <class T             >	struct   fluid_valued    {using value_type =                 T ;};// TODO: Remove scalar specialization?
template < fixed_valued_q T   >	struct   fluid_valued<T> {using value_type =  fixed_valued_u<T>;};
template <scalar_valued_q T   >	struct   fluid_valued<T> {using value_type = scalar_valued_u<T>;};
template <Scalar_valued_q T   >	struct   fluid_valued<T> {using value_type = Scalar_valued_u<T>;};


////////////////////////////////////////////////////////////////////////////////

template <class T    >	struct            fixed_shaped;
template <class T    >	struct            fluid_shaped;

template <class T    >	concept           fixed_shaped_q	=  complete_q<fixed_shaped<T>>;
template <class T    >	concept           fluid_shaped_q	=  complete_q<fluid_shaped<T>>;

template <class T    >	auto constexpr    fixed_shaped_n	=  fixed_shaped<T>::extent();
template <class T    >	auto constexpr    fluid_shaped_n	=  fluid_shaped<T>::extent();

template <class T    >	concept           array_shaped_q	=  array_q<T>;
template <class T    >	auto constexpr    array_shaped_n	=  array_n<T>;
template <class T    >	using             array_shaped  	=  assayed<array_shaped_n<T>>;

template <class T    >	concept           tuple_shaped_q	=  complete_q<_std::tuple_size<based_t<T>>>;
template <class T    >	auto constexpr    tuple_shaped_n	=  complete_t<_std::tuple_size<based_t<T>>, size_constant_t<0>>{}();
template <class T    >	using             tuple_shaped  	=  assayed<tuple_shaped_n<T>>;

template <class T    >	concept          static_shaped_q	=  un_n<tuple_shaped_q<T>> and                                         requires {based_t<T>::size();};
template <class T    >	auto constexpr   static_shaped_n	=  static_cast<extent_type>(based_t<T>::size());
template <class T    >	using            static_shaped  	=  assayed<static_shaped_n<T>>;

template <class T    >	concept         dynamic_shaped_q	=  un_n<tuple_shaped_q<T>> and requires {XTAL_ANY_(T).size();} and not requires {based_t<T>::size();};
template <class T    >	auto constexpr  dynamic_shaped_n	=  static_cast<extent_type>(-1);
template <class T    >	using           dynamic_shaped  	=  assayed<dynamic_shaped_n<T>>;


template <  based_q T>	requires              identity_q<T>  struct fixed_shaped<T>                : assayed<identity_u<T>{}()> {};
template <  based_q T>	requires          tuple_shaped_q<T>  struct fixed_shaped<T>                :   tuple_shaped<T>          {};
template <  based_q T>	requires          array_shaped_q<T>  struct fixed_shaped<T>                :   array_shaped<T>          {};
template <  based_q T>	requires         static_shaped_q<T>  struct fixed_shaped<T>                :  static_shaped<T>          {};
template <unbased_q T>	requires  fixed_shaped_q<based_t<T>> struct fixed_shaped<T>                :   fixed_shaped<based_t<T>> {};
template <class     U>	                                     struct fixed_shaped<_std::complex<U>> : assayed<2>                 {};

template <  based_q T>	                                     struct fluid_shaped<T>                : assayed<0>                 {};
template <  based_q T>	requires        dynamic_shaped_q<T>  struct fluid_shaped<T>                : dynamic_shaped<T>          {};
template <  based_q T>	requires          fixed_shaped_q<T>  struct fluid_shaped<T>                :   fixed_shaped<T>          {};
template <unbased_q T>	requires  fluid_shaped_q<based_t<T>> struct fluid_shaped<T>                :   fluid_shaped<based_t<T>> {};


////////////////////////////////////////////////////////////////////////////////

template <class T             >	using           fixed_u	= fixed_valued_u<T>;
template <class T             >	using           fluid_u	= fluid_valued_u<T>;
template <class T             >	auto constexpr  fixed_n	= fixed_shaped_n<T>;
template <class T             >	auto constexpr  fluid_n	= fluid_shaped_n<T>;
template <class T             >	concept         fixed_q	= fixed_valued_q<T> and fixed_shaped_q<T>;
template <class T             >	concept         fluid_q	= fluid_valued_q<T> and fluid_shaped_q<T> and not fixed_q<T>;

template <class T             >	struct          fixed 	: fixed_shaped<T> {using value_type = fixed_valued_u<T>;};
template <class T             >	struct          fluid 	: fluid_shaped<T> {using value_type = fluid_valued_u<T>;};


////////////////////////////////////////////////////////////////////////////////

template <class U,        int ...Ns>	struct instruct;
template <class T                  >	struct destruct;
template <class T,        int ...Ns>	struct restruct;

template <class U,        int ...Ns>	using  instruct_t = typename instruct<U, Ns...>::array_type;
template <class T                  >	using  destruct_t = typename destruct<T       >::array_type;
template <class T                  >	using  destruct_u = typename destruct<T>::value_type;
template <class T                  >	using  restruct_t	= typename restruct<T>::array_type;
template <class T                  >	using  restruct_u	= typename restruct<T>::value_type;

template <class U,        int ...Ns>	struct instruct;
template <class U                  >	struct instruct<U          >         {using array_type = disqualify_s<U                                  >;};
template <class U, int N, int ...Ns>	struct instruct<U, N, Ns...>         {using array_type = disqualify_s<U, instruct_t<based_t<U>, Ns...>[N]>;};

template <class   T                >	struct destruct    : fluid_shaped<T> {using array_type = disqualify_s<T                        >; using value_type = disqualify_s<T            >;};
template <fluid_q T                >	struct destruct<T> : fluid_shaped<T> {using array_type = disqualify_s<T                        >; using value_type = disqualify_s<T, fluid_u<T>>;};
template <fixed_q T                >	struct destruct<T> : fixed_shaped<T> {using array_type = disqualify_s<T, fixed_u<T>[fixed_n<T>]>; using value_type = disqualify_s<T, fixed_u<T>>;};

template <class   T,      int ...Ns>	struct restruct           : assayed<Ns...> {using value_type = T; using array_type = instruct_t<T, Ns...>;};
template <fixed_q T,      int ...Ns>	struct restruct<T, Ns...> : restruct<destruct_u<T>, Ns..., destruct<T>::extent()> {};


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Ranged...

template <class T             >	concept        scalar_q	= complete_q<T> and     un_n<array_q<T>>;
template <class T             >	concept        vector_q	=    array_q<T> and scalar_q<array_u<T>>;
template <class T             >	concept        matrix_q	=    array_q<T> and vector_q<array_u<T>>;
template <class T             >	concept        tensor_q	=    array_q<T> and  array_q<array_u<T>>;


////////////////////////////////////////////////////////////////////////////////

template <class T             >	using         wrappee_t	=  decltype( XTAL_ANY_(T).get());
template <class T             >	concept       wrapped_q	=  requires{{XTAL_ANY_(T).get()} -> same_q<typename based_t<T>::type>;};
template <class T             >	using         pointee_t	=  decltype(*XTAL_ANY_(T)) ;
template <class T             >	concept       pointed_q	=  requires{*XTAL_ANY_(T);};
template <class T             >	using         indexee_t	=  decltype( XTAL_ANY_(T)[XTAL_ANY_(unsigned short)] );
template <class T             >	concept       indexed_q	=  requires{ XTAL_ANY_(T)[XTAL_ANY_(unsigned short)];};
template <class T             >	using       expressee_t	=  decltype( XTAL_ANY_(T)(XTAL_ANY_(unsigned short)) );
template <class T             >	concept     expressed_q	=  requires{ XTAL_ANY_(T)(XTAL_ANY_(unsigned short));};
//\
template <class T             >	concept   inexpressed_q	=  indexed_q<T> and expressed_q<T>;
template <class T             >	concept   inexpressed_q	=    fixed_q<T> and expressed_q<T>;//FIXME: Improve expression-template `concept`.

template <class T             >	struct       iteratee;
template <class T             >	struct       iterated;
template <class T             >	struct       iterator;
template <class T             >	struct       sentinel;
template <class T             >	struct       distance;
template <class T             >	struct        counted;
template <class T             >	struct        counter;

template <class T             >	using        iterated_t = typename   iterated<T>::type;
template <class T             >	using        iterator_t = typename   iterator<T>::type;
template <class T             >	using        iteratee_t = typename   iteratee<T>::type;
template <class T             >	using        sentinel_t = typename   sentinel<T>::type;
template <class T             >	using        distance_t = typename   distance<T>::type;
template <class T             >	using         counted_t = typename    counted<T>::type;
template <class T             >	using         counter_t = typename    counter<T>::type;

template <class U, class V=U  >	using        interval_t	= _xtd::ranges::iota_view<_std::remove_reference_t<U>, _std::remove_reference_t<V>>;
template <class T             >	concept      interval_q	=  fungible_q<T, interval_t<iteratee_t<T>>>;

template <class T             >	concept      iterable_q	=  requires (T &t) {t.begin();          };
template <class T             >	concept      iterated_q	=  requires (T &t) {t.begin(); t.size();};
template <class T             >	concept      iterator_q	=  requires (T &t) {*t; ++t;};
template <class T             >	concept      iteratee_q	=  true;
template <class T             >	concept      sentinel_q	=  iterator_q<T>;
template <class T             >	concept      distance_q	=  requires (T t) {{t - t} -> integral_variable_q;};
template <class T             >	concept       counter_q	=  integral_variable_q<T>;
template <class T             >	concept       counted_q	=  iterated_q<T> and _std::convertible_to<T, interval_t<_std::remove_reference_t<iteratee_t<T>>>>;

template <class T             >	using      deiteratee_t = _std::    remove_reference_t<iteratee_t<T>>;
template <class T             >	using      reiteratee_t = _std::add_lvalue_reference_t<iteratee_t<T>>;
template <class T             >	using      reiterated_t	= _xtd::ranges::subrange<iterator_t<T>, sentinel_t<T>>;
template <class T             >	concept    reiterated_q	=  fungible_q<T, reiterated_t<T>>;

template <class T>     	   concept sequential_iterable_q	=  iterable_q<T> and not indexed_q<T>;
template <class T>     	   concept sequential_iterator_q	=  iterator_q<T> and not requires (T t) {t + 1;};
template <class T>     	   concept sequential_q         	=  sequential_iterable_q<T> or sequential_iterator_q<T>;

template <class T             >	struct       iteratee     {using type =                   valued_u<T> ;};
template <iterable_q T        >	struct       iteratee<T>  {using type =       pointee_t<iterator_t<T>>;};
template <iterator_q T        >	struct       iteratee<T>  {using type =       pointee_t           <T> ;};
template < counter_q T        >	struct       iteratee<T>  {using type =   _std::remove_reference_t<T> ;};

template <iterated_q T        >	struct       iterated<T>  {using type =   _std::remove_reference_t<T> ;};
template <iterator_q T        >	struct       iterated<T>  {using type =                          void ;};
template < counter_q T        >	struct       iterated<T>  {using type =                 interval_t<T> ;};

template <iterable_q T        >	struct       iterator<T>  {using type = decltype(XTAL_ANY_(T).begin());};
template <iterator_q T        >	struct       iterator<T>  {using type =                            T  ;};
template < counter_q T        >	struct       iterator<T>  {using type =      iterator_t<interval_t<T>>;};

template <iterable_q T        >	struct       sentinel<T>  {using type = decltype(XTAL_ANY_(T).  end());};
template <iterator_q T        >	struct       sentinel<T>  {using type =                            T  ;};

template <class T             >	struct       distance     {using type =      distance_t<iterator_t<T>>;};
//\
template <iterator_q T        >	struct       distance<T>  {using type = XTAL_ALL_(XTAL_ANY_(T) - XTAL_ANY_(T));};
template <iterator_q T        >	struct       distance<T>  {using type = XTAL_ALL_(_std::distance(XTAL_ANY_(T), XTAL_ANY_(T)));};


template <counted_q  T        >	struct        counted<T>  {using type =    based_t<T>;};
template <counter_q  T        >	struct        counted<T>  {using type = iterated_t<T>;};

template <counted_q  T        >	struct        counter<T>  {using type = based_t<iteratee_t<T>>;};
template <counter_q  T        >	struct        counter<T>  {using type = based_t<           T >;};


////////////////////////////////////////////////////////////////////////////////

template <    iterated_q ...Ts>	struct     isomorphic	<Ts...> : isomorphic<deiteratee_t<Ts>...> {};
template <    iterator_q ...Ts>	struct     isomorphic	<Ts...> : isomorphic<deiteratee_t<Ts>...> {};

template <    iterated_q ...Ts>	struct     epimorphic	<Ts...> : epimorphic<deiteratee_t<Ts>...> {};
template <    iterator_q ...Ts>	struct     epimorphic	<Ts...> : epimorphic<deiteratee_t<Ts>...> {};


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
//\
Arithmetic...

template <       class   T>	struct              cedent;
template <    constant_q T>	struct              cedent<T> :             T {}  ;
template <array_shaped_q T>	struct              cedent<T> : constant_t<array_shaped<T>::extent()> {};
template <       class   T>   auto constexpr      cedent_v  = cedent<T>{}();
template <       class   T>   auto constexpr   precedent_v  = cedent_v<T> -  1;
template <       class   T>   auto constexpr   succedent_v  = cedent_v<T> +  1;
template <       class   T>   auto constexpr intercedent_v  = cedent_v<T> != 0;
template <       class   T>   auto constexpr    antedent_v  = cedent_v<T> == 0;
template <       class   T>	struct           precedent;
template <       class   T>	struct           succedent;
template <    constant_q T>	struct           precedent<T>  	{using type = constant_t<                   precedent_v<T>>;};
template <    constant_q T>	struct           succedent<T>  	{using type = constant_t<                   succedent_v<T>>;};
template <array_shaped_q T>	struct           precedent<T>  	{using type = instruct_t<array_valued_u<T>, precedent_v<T>>;};
template <array_shaped_q T>	struct           succedent<T>  	{using type = instruct_t<array_valued_u<T>, succedent_v<T>>;};

template <       class   T>	concept   intercedent_q	=  complete_q<cedent<T>> and requires {requires intercedent_v<T>;};
template <       class   T>	concept    antecedent_q	=  complete_q<cedent<T>> and requires {requires    antedent_v<T>;};
template <       class   T>	using       precedent_s	= typename precedent<T>::type;
template <       class   T>	using       succedent_s	= typename succedent<T>::type;


////////////////////////////////////////////////////////////////////////////////

template <int N, class T, class U=T> concept inequality_p = requires (based_t<T> t, based_t<U> u) {requires N == 2; t <=> u;};
template <int N, class T, class U=T> concept   equality_p = requires (based_t<T> t, based_t<U> u) {requires N == 2; t  == u;};
template <int N, class T, class U=T> concept    quality_p = equality_p<N, T> and inequality_p<N, T>;

template <int N, class T, class U=T>
concept          logical_group_p = requires (based_t<T> t, based_t<U> u) {
	requires N == 2 or requires {          not u;};
	requires N == 1 or requires {t or u; t and u;};
};
template <int N, class T, class U=T>
concept           binary_group_p = requires (based_t<T> t, based_t<U> u) {
	requires N == 2 or requires {    t ^=u; t |=u; t &=u;};
	requires N == 1 or requires {~t; t ^ u; t | u; t & u;};
};

template <int N, class T, class U=T>
concept   multiplicative_group_p = requires (based_t<T> t, based_t<U> u) {
	requires N == 2 or requires {    t *=u; t /=u;};
	requires N == 1 or requires {    t * u; t / u;};
};
template <int N, class T, class U=T>
concept         additive_group_p = requires (based_t<T> t, based_t<U> u) {
	requires N == 2 or requires {    t +=u; t -=u;};
	requires N == 1 or requires {-t; t +=u; t -=u;};
};
template <int N, class T, class U=T>
concept         quotient_group_p = requires (based_t<T> t, based_t<U> u) {
	requires N == 2 or requires {    t %=u;};
	requires N == 1 or requires {    t % u;};
};
template <int N, class T, class U=T>
concept         discrete_group_p = requires (based_t<T> t) {
	requires N == 2 or requires {t++; t--;};
};

template <int N, class T, class U=T> concept   integral_group_p = integral_q<T> or discrete_group_p<N, T, U> and quotient_group_p<N, T, U>;
template <int N, class T, class U=T> concept contiguous_group_p =            multiplicative_group_p<N, T, U>  or additive_group_p<N, T, U>;
template <int N, class T, class U=T> concept contiguous_field_p =            multiplicative_group_p<N, T, U> and additive_group_p<N, T, U>;
template <int N, class T, class U=T> concept continuous_field_p =            contiguous_field_p<N, T, U> and not integral_group_p<0, T, U>;

template <int N, class T, class U=T> concept complex_field_p = complex_q<T> or continuous_field_p<2, T, U> and requires (based_t<T> t) {{t.real()}; {t.imag()};};
template <int N, class T, class U=T> concept simplex_field_p = continuous_field_p<N, T, U> and not complex_field_p<N, T>;


////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
