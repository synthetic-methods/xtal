








namespace _detail
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

using namespace _retail::_detail;


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

template <class T>
struct define_super
{
	using superkind = _retail::define<T>;

	template <class S>
	class subtype : public bond::compose_s<S, superkind>
	{
		using S_ = bond::compose_s<S, superkind>;
	
	public:// CONSTRUCT
		using S_::S_;

		XTAL_NEW_(cast) (subtype, noexcept)

		XTAL_NEW_(explicit)
		subtype(auto &&...oo)
		noexcept
		requires make_p<S_, decltype(oo)...>
		:	S_{XTAL_REF_(oo)...}
		{}

	public:// ACCESS
		using S_::self;

		XTAL_FX4_(do) (template <fungible_q<subtype> Y=T>
		XTAL_DEF_(return,inline,let)
		self(auto &&...oo),
		noexcept -> decltype(auto)
		{
			auto  x = self<Y>();
			auto &y = self<Y>(); y.~ Y();
			return *new (&y) Y(XTAL_REF_(oo)..., XTAL_MOV_(x));
		})

		XTAL_DEF_(return,inline,let)
		pack() const
		{
			return bond::pack_f();
		}
		///<\returns a tuple representation of `this`. \

		using pack_size = cardinal_constant_t<0>;
		///< The `std::tuple_size` of `this`. \


	};
};


///////////////////////////////////////////////////////////////////////////////

template <class T>
struct refine_head
{
	template <class S>
	class subtype : public S
	{
	public:
		using S::S; static_assert(any_q<S>);

	};
	template <class S> requires (1 == typename S::pack_size{}())
	class subtype<S> : public S
	{
	public:
		using S::S; static_assert(any_q<S>);
		///\
		Implicit conversion to the singleton kernel-type. \

		XTAL_FX4_(to) (XTAL_DEF_(return,inline,implicit)
		operator typename S::head_type(), S::head())

	};
};
template <class T>
struct refine_tuple
{
	template <class S>
	class subtype : public S
	{
	public:
		using S::S; static_assert(any_q<S>);
		using typename S::pack_size;

		///\
		Tuple application. \

		XTAL_FX2_(do) (XTAL_DEF_(inline,let)
		apply(auto &&f),
		noexcept -> decltype(auto)
		{
			XTAL_IF0
			XTAL_0IF (0 == pack_size{}()) {
				return XTAL_REF_(f) ();
			}
			XTAL_0IF (1 <= pack_size{}()) {
				return [this, f=XTAL_REF_(f)] <auto ...I>(bond::seek_t<I...>)
					XTAL_0FN_(to) (f(S::template head<I>()...))
				(bond::seek_s<pack_size{}()> {});
			}
		})
		template <auto  f=[] XTAL_1FN_(call) (bond::pack_f)>
		XTAL_DEF_(return,inline,let)
		apply() const
		noexcept -> decltype(auto)
		{
			return apply(f);
		}
		template <class F>
		XTAL_DEF_(return,inline,let)
		apply() const
		noexcept -> decltype(auto)
		{
			return apply<bond::operate<F>{}>();
		}

		///\
		Sequence conversion. \

		XTAL_DEF_(return,inline,let)
		seek() const
		{
			return apply<[] XTAL_1FN_(call) (bond::seek_f)>();
		}
		
		///\
		Tuple conversion. \

		XTAL_DEF_(return,inline,implicit)
		operator bond::repack_t<S>() const {return pack();}

		XTAL_DEF_(return,inline,let)
		pack() const
		{
			return apply<[] XTAL_1FN_(call) (bond::pack_f)>();
		}
		
		XTAL_DEF_(return,inline,set)
		unpack_f(bond::pack_q auto const &tuple)
		noexcept -> T
		{
			return _std::apply([] XTAL_1FN_(call) (T), tuple);
		}

		template <size_type N> XTAL_DEF_(inline,met) get(subtype const &&s) noexcept -> decltype(auto) requires XTAL_TRY_(to) (XTAL_MOV_(s).template head<N>())
		template <size_type N> XTAL_DEF_(inline,met) get(subtype       &&s) noexcept -> decltype(auto) requires XTAL_TRY_(to) (XTAL_MOV_(s).template head<N>())
		template <size_type N> XTAL_DEF_(inline,met) get(subtype const  &s) noexcept -> decltype(auto) requires XTAL_TRY_(to) (          s .template head<N>())
		template <size_type N> XTAL_DEF_(inline,met) get(subtype        &s) noexcept -> decltype(auto) requires XTAL_TRY_(to) (          s .template head<N>())

	};
};


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

template <class U>
struct defer_field
{
	template <class S>
	class subtype : public bond::compose_s<S>
	{
		static_assert(any_q<S>);
		using S_ = bond::compose_s<S>;
		using U_ = initializer_t<U>;

	public:
		using head_type =  based_t<U>;
		using body_type = member_t<U>;

	public:
		//\
		Public visibility allows `auto` parameterization in templates.

		body_type body_part;

	public:
	//	using S_::S_;
		
		XTAL_NEW_(delete) (subtype, noexcept = default)
		XTAL_NEW_(create) (subtype, noexcept = default)
		XTAL_NEW_(move)   (subtype, noexcept = default)
		XTAL_NEW_(copy)   (subtype, noexcept = default)
		XTAL_NEW_(cast)   (subtype, noexcept)

		///\
		Constructs `this` using the default value. \

		XTAL_NEW_(implicit)
		subtype()
		noexcept
		requires make_p<body_type>
		:	body_part{}
		{}
		///\
		Constructs `this` using an `initializer_list` if supported. \

		XTAL_NEW_(implicit)
		subtype(_std::initializer_list<U_> o)
		noexcept
		requires initializer_q<body_type>
		:	body_part(o)
		{}
		///\
		Constructs `this` using the first argument, forwarding the rest to the parent. \

		XTAL_NEW_(explicit)
		subtype(make_q<head_type> auto &&o, auto &&...oo)
		noexcept
		:	S_{XTAL_REF_(oo)...}
		,	body_part{member_f<head_type>(XTAL_REF_(o))}
		{}

		///\returns the kernel-body (prior to reconstruction using the given arguments, if provided). \

		XTAL_DEF_(return,inline,let) head() const  & noexcept -> decltype(auto) {return remember_f(body_part);}
		XTAL_DEF_(return,inline,let) head()        & noexcept -> decltype(auto) {return remember_f(body_part);}
		XTAL_DEF_(return,inline,let) head() const && noexcept -> decltype(auto) {return remember_f(XTAL_MOV_(body_part));}
		XTAL_DEF_(return,inline,let) head()       && noexcept -> decltype(auto) {return remember_f(XTAL_MOV_(body_part));}
		
		XTAL_DEF_(inline,let)
		head(auto &&...oo)
		noexcept -> decltype(auto)
		requires same_q<body_type, head_type> and (0 < sizeof...(oo))
		{
			return dismember_f(body_part, XTAL_REF_(oo)...);
		}

		///\returns the underlying `cardinal` for indexing purposes. \

		XTAL_DEF_(return,inline,explicit)
		operator size_type() const
		noexcept requires cardinal_q<body_type> and different_q<size_type, head_type>
		{
			return body_part;
		}

		XTAL_DEF_(return,inline,set)
		cardinality()
		noexcept -> size_type
		requires XTAL_TRY_(to) (S_::cardinality())

		XTAL_DEF_(return,inline,set)
		cardinality()
		noexcept -> size_type
		requires in_n<typename S_::pack_size{}(), 0> and same_q<bool, U>
		{
			return 2;
		}

	};
};
template <constant_q U>
struct defer_field<U>
{
	template <class S>
	class subtype : public bond::compose_s<S>
	{
		static_assert(any_q<S>);
		using S_ = bond::compose_s<S>;

	public:
		using head_type =  based_t<U>;
		using body_type = member_t<U>;

	public:
		using S_::S_;
		using S_::self;
		body_type body_part{};

		template <constant_q K>
		XTAL_NEW_(explicit)
		subtype(K, auto &&...oo)
		noexcept
		:	S_{XTAL_REF_(oo)...}
		{
			static_assert(K{}() == U{}());
		}

		///\returns the kernel-body (prior to reconstruction using the given arguments, if provided). \

	//	static head_type constexpr head{};
		XTAL_DEF_(return,inline,let) head() const noexcept -> head_type const & requires    member_q<U> {return             body_part;}
		XTAL_DEF_(return,inline,let) head() const noexcept -> head_type         requires dismember_q<U> {return (head_type) body_part;}
		
	};
};
template <class I, auto ...Ns>
struct defer_field<_std::integer_sequence<I, Ns...>>
{
	static auto constexpr N_coordinate = bond::seek_value_t<_xtd::make_signed_f(Ns)...>{};
	static auto constexpr N_ordinate   = bond::seek_index_t<_xtd::make_signed_f(Ns)...>{};

	template <class S>
	class subtype : public bond::compose_s<S>
	{
		static_assert(any_q<S>);
		using S_ = bond::compose_s<S>;

	public:
		using head_type = _std::make_signed_t<I>;
		using body_type = size_type;

	public:
	//	using S_::S_;
		using S_::self;
		body_type body_part{};

		XTAL_NEW_(delete) (subtype, noexcept = default)
		XTAL_NEW_(create) (subtype, noexcept = default)
		XTAL_NEW_(move)   (subtype, noexcept = default)
		XTAL_NEW_(copy)   (subtype, noexcept = default)
		XTAL_NEW_(cast)   (subtype, noexcept)
		
		XTAL_NEW_(explicit)
		subtype( ordinal_q auto &&o, auto &&...oo)
		noexcept
		:	subtype{static_cast<body_type>(N_ordinate[XTAL_REF_(o)]), XTAL_REF_(oo)...}
		{}
		XTAL_NEW_(explicit)
		subtype(cardinal_q auto &&o, auto &&...oo)
		noexcept
		:	S_{XTAL_REF_(oo)...}
		,	body_part(XTAL_REF_(o))
		{}

		XTAL_DEF_(return,inline,set)
		cardinality()
		noexcept -> auto
		{
			return sizeof...(Ns);
		}
		
		XTAL_DEF_(return,inline,let)
		head() const
		noexcept -> auto
		{
			return N_coordinate[body_part];
		}
		
		XTAL_FX1_(to) (XTAL_DEF_(return,inline,explicit)
		operator size_type(), body_part)

	};
};
template <size_type N_width>
struct defer_field<unit_type[N_width]>
{
	static_assert(0 < N_width);
	using U = unit_type[N_width];

	static unsigned constexpr N_depth = _std::bit_width(N_width - one);
	static_assert(N_width == one << N_depth);

	using superkind = bond::word<N_width>;

	template <class S>
	class subtype : public bond::compose_s<S, superkind>
	{
		static_assert(any_q<S>);
		using S_ = bond::compose_s<S, superkind>;

	public:
		using head_type = unsigned;
		using body_type = unsigned;

	public:
		body_type body_part:N_depth{};

	public:
	//	using S_::S_;
		using S_::self;

		XTAL_NEW_(delete) (subtype, noexcept = default)
		XTAL_NEW_(create) (subtype, noexcept = default)
		XTAL_NEW_(move)   (subtype, noexcept = default)
		XTAL_NEW_(copy)   (subtype, noexcept = default)
		XTAL_NEW_(cast)   (subtype, noexcept)
		
		///\
		Constructs `this` using the first argument, forwarding the rest to the parent. \

		XTAL_NEW_(explicit)
		subtype(integral_q auto &&o)
		noexcept
		:	S_{head_type(XTAL_REF_(o)) >> N_depth}
		,	body_part(head_type(o)&(N_width - 1))
		{}
		XTAL_NEW_(explicit)
		subtype(make_p<head_type> auto &&o, auto &&...oo)
		noexcept
		:	S_{XTAL_REF_(oo)...}
		,	body_part(member_f<head_type>(XTAL_REF_(o)))
		{}

		///\returns the kernel-body (prior to reconstruction using the given arguments, if provided). \

		XTAL_FX2_(to) (XTAL_DEF_(return,inline,get)
		head(), head_type{body_part})

		///\returns the underlying index. \
		
		///\todo\
		Determine whether this is aggregated? \

		XTAL_FX1_(to) (XTAL_DEF_(return,inline,explicit)
		operator size_type(), body_part)

	};
};
template <size_type N_depth>
struct defer_field<null_type[N_depth]>
:	defer_field<unit_type[(one << N_depth)]>
{
};


///////////////////////////////////////////////////////////////////////////////

template <class U>
struct refer_iterators
{
	template <class S>
	class subtype : public S
	{
	public:
		using S::S; static_assert(any_q<S>);

	};
	template <class S> requires iterable_q<U>
	class subtype<S> : public S
	{
	public:
		using S::S; static_assert(any_q<S>);

		XTAL_DEF_(return,inline,let) begin() const noexcept requires requires (U const &u) {_xtd::ranges::begin(u);} {return _xtd::ranges::begin(S::head());}
		XTAL_DEF_(return,inline,let) begin()       noexcept requires requires (U       &u) {_xtd::ranges::begin(u);} {return _xtd::ranges::begin(S::head());}
		XTAL_DEF_(return,inline,let)   end() const noexcept requires requires (U const &u) {_xtd::ranges::  end(u);} {return _xtd::ranges::  end(S::head());}
		XTAL_DEF_(return,inline,let)   end()       noexcept requires requires (U       &u) {_xtd::ranges::  end(u);} {return _xtd::ranges::  end(S::head());}

		XTAL_FX2_(do) (template <counter_q V>
		XTAL_DEF_(return,inline,let)
		subhead(V &&v),
		noexcept -> decltype(auto)
		{
			return subhead(counted_f(0, XTAL_REF_(v)));
		})
		XTAL_FX2_(do) (template <counted_q W>
		XTAL_DEF_(return,let)
		subhead(W &&w),
		noexcept -> decltype(auto)
		{
			using _xtd::ranges::next;
			auto &u  = S::template head<U>();
			auto  u_ = begin();
			auto  w0 = w.front(), wN = w.back() + 1;
			if constexpr (interval_q<U>) {
				return typename S::head_type(u_[w0], u_[wN]);
			}
			else {
				return reiterated_t<decltype(u_)>{next(u_, w0), next(u_, wN)};
			}
		})

	};
};


///////////////////////////////////////////////////////////////////////////////

template <class U>
struct refer_equality
{
	template <class S>
	class subtype : public S
	{
		static_assert(any_q<S>);
	public:
		using S::S;
		
		XTAL_DEF_(return,inline,let)
		operator == (subtype const &t) const
		noexcept -> bool
		requires requires (U const &u)
			{       equivalent_f(u        , t.head());}
			{return equivalent_f(S::head(), t.head());}

	};
};
template <class U>
struct refer_inequality
{
	template <class S>
	class subtype : public S
	{
	public:
		using S::S; static_assert(any_q<S>);
		
		XTAL_DEF_(return,inline,let)
		operator <=> (subtype const &t) const
		noexcept -> auto
		requires requires (U const &u)
			{       u         <=> t.head();}
			{return S::head() <=> t.head();}

	};
};

template <class U>
struct refer_qualities
:	bond::compose<void
	,	refer_equality<U>
	,	refer_inequality<U>
	>
{
};


////////////////////////////////////////////////////////////////////////////////

template <class U, int N=0>
struct refer_digital_logic
:	bond::compose<void
	,	refer_digital_logic<U, 1>
	,	refer_digital_logic<U, 2>
	>
{
};
template <class U>
struct refer_digital_logic<U, 1>
{
	template <class S>
	class subtype : public S
	{
	public:
		using S::S; static_assert(any_q<S>);
		XTAL_DEF_(mutate,inline,get) operator ^=(auto const &o)       noexcept requires requires (U       &u) {u ^=o;} {return bond::seek_front_f(S::self(), S::head() ^=o);}
		XTAL_DEF_(mutate,inline,get) operator |=(auto const &o)       noexcept requires requires (U       &u) {u |=o;} {return bond::seek_front_f(S::self(), S::head() |=o);}
		XTAL_DEF_(mutate,inline,get) operator &=(auto const &o)       noexcept requires requires (U       &u) {u &=o;} {return bond::seek_front_f(S::self(), S::head() &=o);}

	};
};
template <class U>
struct refer_digital_logic<U, 2>
{
	template <class S>
	class subtype : public S
	{
	public:
		using S::S; static_assert(any_q<S>);
		XTAL_DEF_(return,inline,get) operator ^ (auto const &o) const noexcept requires requires (U const &u) {u ^ o;} {return typename S::self_type( S::head() ^ o);}
		XTAL_DEF_(return,inline,get) operator | (auto const &o) const noexcept requires requires (U const &u) {u | o;} {return typename S::self_type( S::head() | o);}
		XTAL_DEF_(return,inline,get) operator & (auto const &o) const noexcept requires requires (U const &u) {u & o;} {return typename S::self_type( S::head() & o);}

	};
};

template <class U, int N=0>
struct refer_logics
:	bond::compose<void
	,	refer_digital_logic<U, N>
	>
{
};


////////////////////////////////////////////////////////////////////////////////

template <class U, int N=0>
struct refer_multiplicative_group
:	bond::compose<void
	,	refer_multiplicative_group<U, 1>
	,	refer_multiplicative_group<U, 2>
	>
{
};
template <class U>
struct refer_multiplicative_group<U, 1>
{
	template <class S>
	class subtype : public S
	{
	public:
		using S::S; static_assert(any_q<S>);
		XTAL_DEF_(mutate,inline,get) operator *=(auto const &o) noexcept requires requires (U &u) {u *= o;} {return bond::seek_front_f(S::self(), S::head() *=o);}
		XTAL_DEF_(mutate,inline,get) operator /=(auto const &o) noexcept requires requires (U &u) {u /= o;} {return bond::seek_front_f(S::self(), S::head() /=o);}

	};
};
template <class U>
struct refer_multiplicative_group<U, 2>
{
	template <class S>
	class subtype : public S
	{
	public:
		using S::S; static_assert(any_q<S>);
		XTAL_DEF_(return,inline,get) operator * (auto const &o) const noexcept requires requires (U const &u) {u * o;} {return typename S::self_type( S::head() * o);}
		XTAL_DEF_(return,inline,get) operator / (auto const &o) const noexcept requires requires (U const &u) {u / o;} {return typename S::self_type( S::head() / o);}

	};
};


template <class U, int N=0>
struct refer_additive_group
:	bond::compose<void
	,	refer_additive_group<U, 1>
	,	refer_additive_group<U, 2>
	>
{
};
template <class U>
struct refer_additive_group<U, 1>
{
	template <class S>
	class subtype : public S
	{
	public:
		using S::S; static_assert(any_q<S>);
		XTAL_DEF_(mutate,inline,get) operator +=(auto const &o) noexcept requires requires (U &u) {u += o;} {return bond::seek_front_f(S::self(), S::head() +=o);}
		XTAL_DEF_(mutate,inline,get) operator -=(auto const &o) noexcept requires requires (U &u) {u -= o;} {return bond::seek_front_f(S::self(), S::head() -=o);}

	};
};
template <class U>
struct refer_additive_group<U, 2>
{
	template <class S>
	class subtype : public S
	{
	public:
		using S::S; static_assert(any_q<S>);
		XTAL_DEF_(return,inline,get) operator + (auto const &o) const noexcept requires requires (U const &u) { u + o;} {return typename S::self_type( S::head() + o);}
		XTAL_DEF_(return,inline,get) operator - (auto const &o) const noexcept requires requires (U const &u) { u - o;} {return typename S::self_type( S::head() - o);}
		XTAL_DEF_(return,inline,get) operator - (             ) const noexcept requires requires (U const &u) {-u    ;} {return typename S::self_type(-S::head());}

	};
};


template <class U, int N=0>
struct refer_discrete_group
:	bond::compose<void
	,	refer_discrete_group<U, 1>
	,	refer_discrete_group<U, 2>
	>
{
};
template <class U>
struct refer_discrete_group<U, 1>
{
	template <class S>
	class subtype : public S
	{
	public:
		using S::S; static_assert(any_q<S>);
		XTAL_DEF_(mutate,inline,get) operator ++(int) noexcept requires requires (U &u) {u++;} {return bond::seek_front_f(S::twin(), ++S::head());}
		XTAL_DEF_(mutate,inline,get) operator --(int) noexcept requires requires (U &u) {u++;} {return bond::seek_front_f(S::twin(), --S::head());}
		XTAL_DEF_(mutate,inline,get) operator ++(   ) noexcept requires requires (U &u) {++u;} {return bond::seek_front_f(S::self(), ++S::head());}
		XTAL_DEF_(mutate,inline,get) operator --(   ) noexcept requires requires (U &u) {++u;} {return bond::seek_front_f(S::self(), --S::head());}

	};
};
template <class U>
struct refer_discrete_group<U, 2>
{
	template <class S>
	using subtype = S;

};


template <class U, int N=0>
struct refer_groups
:	bond::compose<void
	,	refer_multiplicative_group<U, N>
	,	refer_additive_group<U, N>
	,	refer_discrete_group<U, N>
	>
{
};


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
