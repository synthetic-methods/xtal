








namespace _detail
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

using namespace _retail::_detail;


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
///\
Constructs/references the current value. \

template <class   ...Us>	XTAL_ASK         member_q = rebased_q<Us...>;
template <class      W >	XTAL_TYP         member            {using type = debased_t<W>;};
template <size_type  N >	XTAL_TYP         member<unit_type[N]> {using type =     unsigned;};
template <size_type  N >	XTAL_TYP         member<null_type[N]> {using type =     unsigned;};
template <class      W >	XTAL_USE         member_t = typename member<W>::type;
template <debased_q  W >	XTAL_DEF_(return,inline,static) XTAL_LET    member_f(auto &&   w)       noexcept -> decltype(auto) {return & XTAL_REF_(w)    ;}
template <class      W >	XTAL_DEF_(return,inline,static) XTAL_LET    member_f(auto &&...w)       noexcept -> decltype(auto) {return W(XTAL_REF_(w)...);}

///\
Resolves/dereferences the current value. \

template <class      W >	XTAL_TYP     remember            {using type =      W;};
template <size_type  N >	XTAL_TYP     remember<unit_type[N]> {using type = size_type;};
template <size_type  N >	XTAL_TYP     remember<null_type[N]> {using type = size_type;};
template <class      W >	XTAL_USE     remember_t = typename remember<W>::type;
template <pointer_q  M >	XTAL_DEF_(return,inline,static) XTAL_LET  remember_f(M &&m)             noexcept -> decltype(auto) {return *XTAL_REF_(m);}
template <class      M >	XTAL_DEF_(return,inline,static) XTAL_LET  remember_f(M &&m)             noexcept -> decltype(auto) {return  XTAL_REF_(m);}

///\
Replaces and returns the previous value. \

template <rebased_q  W >	XTAL_DEF_(return,inline,static) XTAL_LET dismember_f(W &m, W w)         noexcept -> decltype(auto) {return _std::exchange(m, XTAL_MOV_(w));}
template <rebased_q  W >	XTAL_DEF_(return,inline,static) XTAL_LET dismember_f(W &m, auto &&...w) noexcept -> decltype(auto) {return dismember_f<W>(m, member_f<W>(XTAL_REF_(w)...));}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

template <class T>
struct define_super
{
	using superkind = _retail::define<T>;

	template <class S>
	class subtype : public bond::compose_s<S, superkind>
	{
		using S_ = bond::compose_s<S, superkind>;
	
	public:
		using S_::S_;

	public:// TYPE
		template <class ...Is>
		struct super : bond::seek_back<Is...> {};

		using self_type = T;
		using head_type = void;

	};
};


///////////////////////////////////////////////////////////////////////////////

template <class T>
struct refine_head
{
	template <any_q S>
	class subtype : public S
	{
		using S_ = S;

	public:
		using S_::S_;

	};
	template <any_q S> requires (1 == S::pack_size::value)
	class subtype<S> : public S
	{
		using S_ = S;
		using U_ = typename S_::head_type;

	public:
		using S_::S_;
		using S_::twin;
		using S_::self;
		using S_::head;

		///\
		Implicit conversion to the singleton kernel-type. \

		XTAL_DO4_(XTAL_ION_(implicit) U_(), {return head();})
		
//		///\
//		\returns a copy of `this` with `head<Is...>(oo...)` applied. \
//
//		template <class  ...Is>
//		XTAL_LET alter(auto &&...oo) const
//		noexcept -> decltype(auto)
//		{
//			auto t = twin();
//			(void) t.template head<Is...>(XTAL_REF_(oo)...);
//			return t;
//		}

	};
};
template <class T>
struct refine_tuple
{
	template <any_q S>
	class subtype : public S
	{
		using S_ = S;

	public:
		using S_::S_;
		using typename S_::pack_size;

		///\
		Tuple application. \

		XTAL_DO2_(XTAL_DEF_(inline)
		XTAL_LET apply(auto &&f), -> decltype(auto)
		{
			XTAL_IF0
			XTAL_0IF (0 == pack_size::value) {
				return XTAL_REF_(f) ();
			}
			XTAL_0IF (1 <= pack_size::value) {
				return [this, f = XTAL_REF_(f)] <auto ...I>(bond::seek_t<I...>)
					XTAL_0FN_(f(S_::template head<I>()...))
				(bond::seek_s<pack_size::value> {});
			}
		})
		template <class F>
		XTAL_DEF_(return,inline)
		XTAL_LET apply() const
		noexcept -> decltype(auto)
		{
			return apply(invoke_f<F>);
		}

		///\
		Sequence conversion. \

		XTAL_DEF_(return,inline)
		XTAL_LET seek() const
		{
			return apply([] XTAL_1FN_(bond::seek_f));
		}
		
		///\
		Tuple conversion. \

		XTAL_DEF_(return,inline)
		XTAL_LET pack() const
		{
			return apply([] XTAL_1FN_(bond::pack_f));
		}
		XTAL_DEF_(return,inline)
		XTAL_ION_(implicit) bond::repack_t<S_>() const
		{
			return pack();
		}
		
		XTAL_DEF_(return,inline,static)
		XTAL_LET unpack_f(bond::pack_q auto const &tuple)
		noexcept -> T
		{
			return _std::apply([] XTAL_1FN_(T), tuple);
		}

	};
};


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

template <class U>
struct defer_field
{
	template <any_q S>
	class subtype : public bond::compose_s<S>
	{
		using S_ = bond::compose_s<S>;

	public:
		using head_type = remember_t<U>;
		using body_type =   member_t<U>;

	public:
		//\
		Public visibility allows `auto` parameterization in templates.

		body_type body_part;

	public:
	//	using S_::S_;
		
		XTAL_CO0_(subtype)
	//	XTAL_CO1_(subtype)
		XTAL_CO4_(subtype)
		
		template <fungible_q<subtype> O>
		XTAL_NEW_(explicit) subtype(O &&o)
		noexcept
		:	subtype(static_cast<subtype &&>(XTAL_REF_(o)))
		{}

		///\
		Constructs `this` using the default value. \

		XTAL_NEW_(implicit) subtype()
		noexcept
		:	subtype(body_type{})
		{}
		XTAL_NEW_(implicit) subtype(initializer_t<body_type> o)
		noexcept
		requires member_q<U> and initializer_q<body_type>
		:	body_part(o)
		{
		}
		///\
		Constructs `this` using the first argument, forwarding the rest to the parent. \

		XTAL_NEW_(explicit) subtype(auto &&o, auto &&...oo)
		noexcept
		:	S_(XTAL_REF_(oo)...)
		,	body_part(member_f<head_type>(XTAL_REF_(o)))
		{}

		///\returns the kernel-body (prior to reconstruction using the given arguments, if provided). \

		XTAL_DEF_(return,inline) XTAL_LET head() const  &noexcept -> decltype(auto) {return remember_f(body_part);}
		XTAL_DEF_(return,inline) XTAL_LET head()        &noexcept -> decltype(auto) {return remember_f(body_part);}
		XTAL_DEF_(return,inline) XTAL_LET head() const &&noexcept -> decltype(auto) {return remember_f(XTAL_MOV_(body_part));}
		XTAL_DEF_(return,inline) XTAL_LET head()       &&noexcept -> decltype(auto) {return remember_f(XTAL_MOV_(body_part));}
		
		XTAL_DEF_(inline)
		XTAL_LET head(auto &&...oo)
		noexcept -> decltype(auto)
			requires member_q<head_type> and (0 < sizeof...(oo))
		{
			return dismember_f(body_part, XTAL_REF_(oo)...);
		}

		XTAL_DEF_(return,inline,static)
		XTAL_LET cardinality()
		noexcept -> auto
		requires XTAL_TRY_TO_(S_::cardinality())

		XTAL_DEF_(return,inline,static)
		XTAL_LET cardinality()
		noexcept -> auto
		requires in_n<S_::pack_size::value, 0> and is_q<bool, U>
		{
			return size_2;
		}

	};
};
template <constant_q U>
struct defer_field<U>
{
	template <any_q S>
	class subtype : public bond::compose_s<S>
	{
		using S_ = bond::compose_s<S>;

	public:
		using head_type = remember_t<U>;
		using body_type =   member_t<U>;

	public:
		using S_::S_;
		using S_::self;
		body_type body_part{};

		template <constant_q A>
		XTAL_NEW_(explicit) subtype(A &&a, auto &&...oo)
		noexcept
		:	S_(XTAL_REF_(oo)...)
		{
			static_assert(A::value == U::value);
		}

		///\returns the kernel-body (prior to reconstruction using the given arguments, if provided). \

		XTAL_DEF_(return,inline) XTAL_LET head() const noexcept -> head_type const & requires      member_q<U>  {return             body_part;}
		XTAL_DEF_(return,inline) XTAL_LET head() const noexcept -> head_type         requires un_n<member_q<U>> {return (head_type) body_part;}
		
	};
};
template <class T, auto ...Ns>
struct defer_field<_std::integer_sequence<T, Ns...>>
{
	using _op = bond::operate<decltype(Ns)...>;

	XTAL_SET N_array =    _std::array{Ns...};
	XTAL_SET N_upper = _op::maximum_f(Ns...);
	XTAL_SET N_lower = _op::minimum_f(Ns...);
	
	XTAL_SET I_array = []<auto ...I> (bond::seek_t<I...>)
		XTAL_0FN_(_std::array{(size_type) bond::seek_index_of_n<I + N_lower, Ns...>...})
	(bond::seek_s<1 + N_upper - N_lower>{});

	template <any_q S>
	class subtype : public bond::compose_s<S>
	{
		using S_ = bond::compose_s<S>;

	public:
		using head_type = T;
		using body_type = size_type;

	public:
	//	using S_::S_;
		using S_::self;
		body_type body_part{};

		XTAL_CO0_(subtype);
		XTAL_CO1_(subtype);
		XTAL_CO4_(subtype);
		
		template <fungible_q<subtype> O>
		XTAL_NEW_(explicit) subtype(O &&o)
		noexcept
		:	subtype(static_cast<subtype &&>(XTAL_REF_(o)))
		{}
		template <infungible_q<subtype> O> requires (not integral_q<O>)
		XTAL_NEW_(explicit) subtype(O &&o, auto &&...oo)
		noexcept
		:	subtype(static_cast<head_type>(XTAL_REF_(o)), XTAL_REF_(oo)...)
		{
		}
		XTAL_NEW_(explicit) subtype(XTAL_ARG_(head_type) &&o, auto &&...oo)
		noexcept
		:	subtype(I_array[XTAL_REF_(o) - N_lower], XTAL_REF_(oo)...)
		{
		}
		XTAL_NEW_(explicit) subtype(XTAL_ARG_(body_type) &&o, auto &&...oo)
		noexcept
		:	S_(XTAL_REF_(oo)...)
		,	body_part(XTAL_REF_(o))
		{
		}

		XTAL_DEF_(return,inline,static)
		XTAL_LET cardinality()
		noexcept -> auto
		{
			return sizeof...(Ns);
		}
		
		XTAL_DEF_(return,inline)
		XTAL_LET head() const
		noexcept -> auto
		{
			return N_array[body_part];
		}
		
		XTAL_DEF_(inline) XTAL_ION_(explicit) size_type()       noexcept {return body_part;}
		XTAL_DEF_(inline) XTAL_ION_(explicit) size_type() const noexcept {return body_part;}
		

	};
};
template <size_type N_width>
struct defer_field<unit_type[N_width]>
{
	using U = unit_type[N_width];

	static constexpr size_type N_depth = bond::operating::bit_ceiling_f(N_width);
	static_assert(N_width == size_1 << N_depth);

	using superkind = bond::word<N_width>;

	template <any_q S>
	class subtype : public bond::compose_s<S, superkind>
	{
		using S_ = bond::compose_s<S, superkind>;

	public:
		using head_type = remember_t<U>;
		using body_type =   member_t<U>;

	public:
		body_type body_part:N_depth{};

	public:
	//	using S_::S_;
		using S_::self;

		XTAL_CO0_(subtype);
		XTAL_CO1_(subtype);
		XTAL_CO4_(subtype);
		
		template <fungible_q<subtype> O>
		XTAL_NEW_(explicit) subtype(O &&o)
		noexcept
		:	subtype(static_cast<subtype &&>(XTAL_REF_(o)))
		{}
		///\
		Constructs `this` using the first argument, forwarding the rest to the parent. \

		template <integral_q A>
		XTAL_NEW_(explicit) subtype(A &&a)
		noexcept
		:	S_(head_type(XTAL_REF_(a)) >> N_depth)
		,	body_part(head_type(a)&(N_width - 1))
		{
		}
		template <infungible_q<subtype> A>
		XTAL_NEW_(explicit) subtype(A &&a, auto &&...oo)
		noexcept
		:	S_(XTAL_REF_(oo)...)
		,	body_part(member_f<head_type>(XTAL_REF_(a)))
		{
		}

		///\returns the kernel-body (prior to reconstruction using the given arguments, if provided). \

		XTAL_DO2_(XTAL_DEF_(return,inline)
		XTAL_LET head(), -> decltype(auto)
		{
			return head_type(body_part);
		})
		
	};
};
template <size_type N_depth>
struct defer_field<null_type[N_depth]>
:	defer_field<unit_type[(size_1 << N_depth)]>
{
};


///////////////////////////////////////////////////////////////////////////////

template <class U>
struct refer_iterators
{
	template <any_q S>
	class subtype : public S
	{
		using S_ = S;
		using U_ = _std::remove_reference_t<U>;

	public:
		using S_::S_;

		XTAL_DEF_(return,inline) XTAL_LET begin() const noexcept -> decltype(auto) requires XTAL_TRY_(_xtd::ranges::begin(XTAL_ANY_(U_ const &))) {return _xtd::ranges::begin(S_::template head<U>());}
		XTAL_DEF_(return,inline) XTAL_LET begin()       noexcept -> decltype(auto) requires XTAL_TRY_(_xtd::ranges::begin(XTAL_ANY_(U_       &))) {return _xtd::ranges::begin(S_::template head<U>());}
		XTAL_DEF_(return,inline) XTAL_LET   end() const noexcept -> decltype(auto) requires XTAL_TRY_(_xtd::ranges::  end(XTAL_ANY_(U_ const &))) {return _xtd::ranges::  end(S_::template head<U>());}
		XTAL_DEF_(return,inline) XTAL_LET   end()       noexcept -> decltype(auto) requires XTAL_TRY_(_xtd::ranges::  end(XTAL_ANY_(U_       &))) {return _xtd::ranges::  end(S_::template head<U>());}

		XTAL_DO2_(template <counter_q V>
		XTAL_DEF_(return,inline)
		XTAL_LET subhead(V &&v), -> decltype(auto)
		{
			return subhead(counted_f(0, XTAL_REF_(v)));
		})
		XTAL_DO2_(template <counted_q W>
		XTAL_DEF_(return,inline)
		XTAL_LET subhead(W &&w), -> decltype(auto)
		{
			using _xtd::ranges::next;
			using _xtd::ranges::views::slice;

			auto &u  = S_::template head<U>();
			auto  u_ = begin();
			using W_ = deranged_t<decltype(u_)>;
			auto  w0 = w.front(), wN = w.back() + 1;
			/*/
			size_type const uN = count_f(u);
			w0 = _std::min(w0, uN);
			wN = _std::min(wN, uN);
			/***/

			XTAL_IF0
			XTAL_0IF (interval_q<U>) {
				return U_(u_[w0], u_[wN]);
			}
			XTAL_0IF (accessed_q<U>) {
				return W_(next(u_, w0), next(u_, wN));
			}
			XTAL_0IF_(else) {
				return u|slice(w0, wN);
			}
		})

	};
};

template <class U>
struct infer_iterators : bond::compose<> {};

template <class U> requires iterable_q<U>
struct infer_iterators<U> : refer_iterators<U> {};


///////////////////////////////////////////////////////////////////////////////

template <class U>
struct refer_equality
{
	template <any_q S>
	class subtype : public S
	{
	public:
		using S::S;
		XTAL_DEF_(return,inline) XTAL_LET operator == (subtype const &t) const noexcept -> bool {return S::head() == t.head();}
		XTAL_DEF_(return,inline) XTAL_LET operator != (subtype const &t) const noexcept -> bool {return S::head() != t.head();}

	};
};

template <class U>
struct infer_equality : bond::compose<> {};

template <class U> requires equality_q<U>
struct infer_equality<U> : refer_equality<U> {};


template <class U>
struct refer_inequality
{
	template <any_q S>
	class subtype : public S
	{
		using S_ = S;

	public:
		using S_::S_;
		
		XTAL_DEF_(return,inline)
		XTAL_LET operator <=> (subtype const &t) const
		noexcept -> auto
		{
			return S_::head() <=> t.head();
		}

	};
};

template <class U>
struct infer_inequality : bond::compose<> {};

template <class U> requires inequality_q<U>
struct infer_inequality<U> : refer_inequality<U> {};


template <class U>
struct refer_qualities
:	bond::compose<void
	,	refer_equality<U>
	,	refer_inequality<U>
	>
{};
template <class U>
struct infer_qualities
:	bond::compose<void
	,	infer_equality<U>
	,	infer_inequality<U>
	>
{};


////////////////////////////////////////////////////////////////////////////////

template <class U, size_type N=0>
struct refer_binary_logic
:	bond::compose<void
	,	refer_binary_logic<U, 1>
	,	refer_binary_logic<U, 2>
	>
{};
template <class U>
struct refer_binary_logic<U, 1>
{
	template <any_q S>
	class subtype : public S
	{
		using S_ = S;

	public:
		using S_::S_;
		XTAL_DEF_(inline) XTAL_LET operator ^=(auto &&o) noexcept -> decltype(auto) {S_::head() ^= XTAL_REF_(o); return S_::self();}
		XTAL_DEF_(inline) XTAL_LET operator |=(auto &&o) noexcept -> decltype(auto) {S_::head() |= XTAL_REF_(o); return S_::self();}
		XTAL_DEF_(inline) XTAL_LET operator &=(auto &&o) noexcept -> decltype(auto) {S_::head() &= XTAL_REF_(o); return S_::self();}

	};
};
template <class U>
struct refer_binary_logic<U, 2>
{
	template <any_q S>
	class subtype : public S
	{
		using S_ = S;
		using T_ = typename S_::self_type;

	public:
		using S_::S_;
		XTAL_DEF_(return,inline) XTAL_LET operator ^ (auto &&o) const noexcept -> T_{return T_(S_::head() ^ XTAL_REF_(o));}
		XTAL_DEF_(return,inline) XTAL_LET operator | (auto &&o) const noexcept -> T_{return T_(S_::head() | XTAL_REF_(o));}
		XTAL_DEF_(return,inline) XTAL_LET operator & (auto &&o) const noexcept -> T_{return T_(S_::head() & XTAL_REF_(o));}

	};
};

template <class U, size_type N=0>
struct infer_binary_logic : bond::compose<> {};

template <class U, size_type N> requires binary_quantity_p<N, U>
struct infer_binary_logic<U, N> : refer_binary_logic<U, N> {};



template <class U, size_type N=0>
struct refer_logics
:	bond::compose<void
	,	refer_binary_logic<U, N>
	>
{};
template <class U, size_type N=0>
struct infer_logics
:	bond::compose<void
	,	infer_binary_logic<U, N>
	>
{};


////////////////////////////////////////////////////////////////////////////////

template <class U, size_type N=0>
struct refer_multiplicative_group
:	bond::compose<void
	,	refer_multiplicative_group<U, 1>
	,	refer_multiplicative_group<U, 2>
	>
{};
template <class U>
struct refer_multiplicative_group<U, 1>
{
	template <any_q S>
	class subtype : public S
	{
	public:
		using S::S;
		XTAL_DEF_(inline) XTAL_LET operator *=(auto &&o) noexcept -> decltype(auto) {S::head() *= XTAL_REF_(o); return S::self();}
		XTAL_DEF_(inline) XTAL_LET operator /=(auto &&o) noexcept -> decltype(auto) {S::head() /= XTAL_REF_(o); return S::self();}

	};
};
template <class U>
struct refer_multiplicative_group<U, 2>
{
	template <any_q S>
	class subtype : public S
	{
		using S_ = S;
		using T_ = typename S_::self_type;

	public:
		using S_::S_;
		XTAL_DEF_(return,inline) XTAL_LET operator * (auto &&o) const noexcept -> T_{return T_(S_::head() * XTAL_REF_(o));}
		XTAL_DEF_(return,inline) XTAL_LET operator / (auto &&o) const noexcept -> T_{return T_(S_::head() / XTAL_REF_(o));}

	};
};

template <class U, size_type N=0>
struct infer_multiplicative_group : bond::compose<> {};

template <class U, size_type N> requires multiplicative_group_p<N, U>
struct infer_multiplicative_group<U, N> : refer_multiplicative_group<U, N> {};



template <class U, size_type N=0>
struct refer_additive_group
:	bond::compose<void
	,	refer_additive_group<U, 1>
	,	refer_additive_group<U, 2>
	>
{};
template <class U>
struct refer_additive_group<U, 1>
{
	template <any_q S>
	class subtype : public S
	{
	public:
		using S::S;
		XTAL_DEF_(inline) XTAL_LET operator +=(auto &&o) noexcept -> decltype(auto) {S::head() += XTAL_REF_(o); return S::self();}
		XTAL_DEF_(inline) XTAL_LET operator -=(auto &&o) noexcept -> decltype(auto) {S::head() -= XTAL_REF_(o); return S::self();}

	};
};
template <class U>
struct refer_additive_group<U, 2>
{
	template <any_q S>
	class subtype : public S
	{
		using S_ = S;
		using T_ = typename S_::self_type;

	public:
		using S_::S_;
		XTAL_DEF_(return,inline) XTAL_LET operator + (auto &&o) const noexcept -> T_{return T_( S_::head() + XTAL_REF_(o));}
		XTAL_DEF_(return,inline) XTAL_LET operator - (auto &&o) const noexcept -> T_{return T_( S_::head() - XTAL_REF_(o));}
		XTAL_DEF_(return,inline) XTAL_LET operator - (        ) const noexcept -> T_{return T_(-S_::head());}

	};
};

template <class U, size_type N=0>
struct infer_additive_group : bond::compose<> {};

template <class U, size_type N> requires additive_group_p<N, U>
struct infer_additive_group<U, N> : refer_additive_group<U, N> {};



template <class U, size_type N=0>
struct refer_discrete_group
:	bond::compose<void
	,	refer_discrete_group<U, 1>
	,	refer_discrete_group<U, 2>
	>
{};
template <class U>
struct refer_discrete_group<U, 1>
{
	template <any_q S>
	class subtype : public S
	{
	public:
		using S::S;
		XTAL_DEF_(inline) XTAL_LET operator ++(int) noexcept -> decltype(auto) {auto  t = S::self(); ++S::head(); return t;}
		XTAL_DEF_(inline) XTAL_LET operator --(int) noexcept -> decltype(auto) {auto  t = S::self(); --S::head(); return t;}
		XTAL_DEF_(inline) XTAL_LET operator ++()    noexcept -> decltype(auto) {auto &s = S::self(); ++S::head(); return s;}
		XTAL_DEF_(inline) XTAL_LET operator --()    noexcept -> decltype(auto) {auto &s = S::self(); --S::head(); return s;}

	};
};
template <class U>
struct refer_discrete_group<U, 2>
{
	template <any_q S>
	using subtype = S;

};

template <class U, size_type N=0>
struct infer_discrete_group : bond::compose<> {};

template <class U, size_type N> requires discrete_group_p<N, U>
struct infer_discrete_group<U, N> : refer_discrete_group<U, N> {};



template <class U, size_type N=0>
struct refer_groups
:	bond::compose<void
	,	refer_multiplicative_group<U, N>
	,	refer_additive_group<U, N>
	,	refer_discrete_group<U, N>
	>
{};
template <class U, size_type N=0>
struct infer_groups
:	bond::compose<void
	,	infer_multiplicative_group<U, N>
	,	infer_additive_group<U, N>
	,	infer_discrete_group<U, N>
	>
{};


}//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
