








namespace _detail
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

using namespace _retail::_detail;


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
///\
Constructs/references the current value. \

//\
template <class    ...Ws>	concept       dismember_q = not    atomic_q<Ws...>;
template <class    ...Ws>	concept       dismember_q = not molecular_q<Ws...>;
template <class    ...Ws>	concept          member_q = not dismember_q<Ws...>;
template <class       W >	struct           member;
template <class       W >	using            member_t = typename member<W>::type;

template <class       W >	struct           member               {using type = based_t<W>;};
template <auto        N >	struct           member<unit_type[N]> {using type = unsigned  ;};
template <auto        N >	struct           member<null_type[N]> {using type = unsigned  ;};
template <dismember_q W >	struct           member<W const &   > {using type = const   W*;};
template <dismember_q W >	struct           member<W       &   > {using type =         W*;};

template <dismember_q M >	XTAL_DEF_(let)   member_f(auto &&    o) noexcept {return & XTAL_REF_(o )    ;}
template <class       M >	XTAL_DEF_(let)   member_f(auto &&...oo) noexcept {return M(XTAL_REF_(oo)...);}

///\
Resolves/dereferences the current value. \

template <class       W >	struct         remember               {using type =         W ;};
template <auto        N >	struct         remember<unit_type[N]> {using type =  size_type;};
template <auto        N >	struct         remember<null_type[N]> {using type =  size_type;};
template <class       W >	using          remember_t = typename remember<W>::type;

template <pointed_q   M >	XTAL_DEF_(let) remember_f(M &&m) noexcept {return *XTAL_REF_(m);}
template <class       M >	XTAL_DEF_(let) remember_f(M &&m) noexcept {return  XTAL_REF_(m);}

///\
Replaces and returns the previous value. \

template <member_q    W >	XTAL_DEF_(let) dismember_f(W &m,         W w) noexcept {return                 _std::exchange(m, XTAL_MOV_(w));}
template <member_q    W >	XTAL_DEF_(let) dismember_f(W &m, auto &&...w) noexcept {return dismember_f<W>(m, member_f<W>(XTAL_REF_(w)...));}


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

template <class T>
struct define_super
{
	using superkind = _retail::define<T>;

	template <class S>
	class subtype : public bond::compose_s<S, superkind>
	{
		using S_ = bond::compose_s<S, superkind>;
	
	public:// CONSTRUCT
		using S_::S_;

		XTAL_NEW_(explicit) subtype(fungible_q<subtype> auto &&o)
		noexcept
		:	subtype(static_cast<subtype &&>(XTAL_REF_(o)))
		{}
		XTAL_NEW_(explicit) subtype(auto &&...oo)
		noexcept
		:	S_(XTAL_REF_(oo)...)
		{}


	public:// TYPE
		using S_::self;

		using self_type = T;

		XTAL_DO4_(template <fungible_q<subtype> Y=T>
		XTAL_DEF_(short)
		XTAL_LET self(auto &&...oo),
		noexcept -> decltype(auto)
		{
			auto  x = self<Y>();
			auto &y = self<Y>(); y.~ Y();
			return *new (&y) Y(XTAL_REF_(oo)..., XTAL_MOV_(x));
		})

		template <class ...Is>
		struct super : bond::seek_back<Is...> {};

		XTAL_DEF_(short)
		XTAL_LET pack() const
		{
			return bond::pack_f();
		}
		///<\returns a tuple representation of `this`. \

		using pack_size = constant_t<0>;
		///< The `std::tuple_size` of `this`. \


	};
};


///////////////////////////////////////////////////////////////////////////////

template <class T>
struct refine_head
{
	template <class S>
	class subtype : public S
	{
		static_assert(any_q<S>);
		using S_ = S;

	public:
		using S_::S_;

	};
	template <class S> requires (1 == S::pack_size::value)
	class subtype<S> : public S
	{
		static_assert(any_q<S>);
		using S_ = S;
		using U_ = typename S_::head_type;

	public:
		using S_::S_;
		using S_::twin;
		using S_::self;
		using S_::head;

		///\
		Implicit conversion to the singleton kernel-type. \

		XTAL_TO4_(XTAL_DEF_(implicit operator) U_(), head())
		
//		///\
//		\returns a copy of `this` with `head<Is...>(oo...)` applied. \
//
//		template <class  ...Is>
//		XTAL_LET alter(auto &&...oo) const
//		noexcept -> decltype(auto)
//		{
//			auto t = twin();
//			(void) t.template head<Is...>(XTAL_REF_(oo)...);
//			return t;
//		}

	};
};
template <class T>
struct refine_tuple
{
	template <class S>
	class subtype : public S
	{
		static_assert(any_q<S>);
		using S_ = S;

	public:
		using S_::S_;
		using typename S_::pack_size;

		///\
		Tuple application. \

		XTAL_DO2_(XTAL_DEF_(inline)
		XTAL_LET apply(auto &&f),
		noexcept -> decltype(auto)
		{
			XTAL_IF0
			XTAL_0IF (0 == pack_size::value) {
				return XTAL_REF_(f) ();
			}
			XTAL_0IF (1 <= pack_size::value) {
				return [this, f = XTAL_REF_(f)] <auto ...I>(bond::seek_t<I...>)
					XTAL_0FN_(f(S_::template head<I>()...))
				(bond::seek_s<pack_size::value> {});
			}
		})
		template <class F>
		XTAL_DEF_(short)
		XTAL_LET apply() const
		noexcept -> decltype(auto)
		{
			return apply(invoke_f<F>);
		}

		///\
		Sequence conversion. \

		XTAL_DEF_(short)
		XTAL_LET seek() const
		{
			return apply(XTAL_FUN_(bond::seek_f));
		}
		
		///\
		Tuple conversion. \

		XTAL_DEF_(implicit operator)
		bond::repack_t<S_>() const {return pack();}

		XTAL_DEF_(short)
		XTAL_LET pack() const
		{
			return apply(XTAL_FUN_(bond::pack_f));
		}
		
		XTAL_DEF_(short,static)
		XTAL_LET unpack_f(bond::pack_q auto const &tuple)
		noexcept -> T
		{
			return _std::apply(XTAL_FUN_(T), tuple);
		}

	};
};


///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

template <class U>
struct defer_field
{
	template <class S>
	class subtype : public bond::compose_s<S>
	{
		static_assert(any_q<S>);
		using S_ = bond::compose_s<S>;

	public:
		using head_type = remember_t<U>;
		using body_type =   member_t<U>;

	public:
		//\
		Public visibility allows `auto` parameterization in templates.

		body_type body_part;

	public:
	//	using S_::S_;
		
	~	subtype()                noexcept=default;
	//	subtype()                noexcept=default;
		XTAL_NEW_(copy, subtype, noexcept=default)
		XTAL_NEW_(move, subtype, noexcept=default)
		
		XTAL_NEW_(explicit) subtype(fungible_q<subtype> auto &&o)
		noexcept
		:	subtype(static_cast<subtype &&>(XTAL_REF_(o)))
		{}

		///\
		Constructs `this` using the default value. \

		XTAL_NEW_(implicit) subtype()
		noexcept
		:	subtype(body_type{})
		{}
		XTAL_NEW_(implicit) subtype(initializer_t<body_type> o)
		noexcept
		requires member_q<U> and initializer_q<body_type>
		:	body_part(o)
		{
		}
		///\
		Constructs `this` using the first argument, forwarding the rest to the parent. \

		XTAL_NEW_(explicit) subtype(auto &&o, auto &&...oo)
		noexcept
		:	S_(XTAL_REF_(oo)...)
		,	body_part(member_f<head_type>(XTAL_REF_(o)))
		{}

		///\returns the kernel-body (prior to reconstruction using the given arguments, if provided). \

		XTAL_DEF_(let) head() const  & noexcept {return remember_f(body_part);}
		XTAL_DEF_(let) head()        & noexcept {return remember_f(body_part);}
		XTAL_DEF_(let) head() const && noexcept {return remember_f(XTAL_MOV_(body_part));}
		XTAL_DEF_(let) head()       && noexcept {return remember_f(XTAL_MOV_(body_part));}
		
		XTAL_DEF_(inline)
		XTAL_LET head(auto &&...oo)
		noexcept -> decltype(auto)
			requires member_q<head_type> and (0 < sizeof...(oo))
		{
			return dismember_f(body_part, XTAL_REF_(oo)...);
		}

		XTAL_DEF_(short,static)
		XTAL_LET cardinality()
		noexcept -> size_type
		requires XTAL_TRY_TO_(S_::cardinality())

		XTAL_DEF_(short,static)
		XTAL_LET cardinality()
		noexcept -> size_type
		requires in_n<S_::pack_size::value, 0> and same_q<bool, U>
		{
			return 2;
		}

	};
};
template <constant_q U>
struct defer_field<U>
{
	template <class S>
	class subtype : public bond::compose_s<S>
	{
		static_assert(any_q<S>);
		using S_ = bond::compose_s<S>;

	public:
		using head_type = remember_t<U>;
		using body_type =   member_t<U>;

	public:
		using S_::S_;
		using S_::self;
		body_type body_part{};

		template <constant_q A>
		XTAL_NEW_(explicit) subtype(A &&a, auto &&...oo)
		noexcept
		:	S_(XTAL_REF_(oo)...)
		{
			static_assert(A::value == U::value);
		}

		///\returns the kernel-body (prior to reconstruction using the given arguments, if provided). \

		XTAL_DEF_(short) XTAL_LET head() const noexcept -> head_type const & requires      member_q<U>  {return             body_part;}
		XTAL_DEF_(short) XTAL_LET head() const noexcept -> head_type         requires un_n<member_q<U>> {return (head_type) body_part;}
		
	};
};
template <class T, auto ...Ns>
struct defer_field<_std::integer_sequence<T, Ns...>>
{
	using _op = bond::operate<decltype(Ns)...>;

	XTAL_SET N_coordinate = bond::seek_value_t<Ns...>{};
	XTAL_SET N_ordinate   = bond::seek_index_t<Ns...>{};

	template <class S>
	class subtype : public bond::compose_s<S>
	{
		static_assert(any_q<S>);
		using S_ = bond::compose_s<S>;

	public:
		using head_type = _std::make_signed_t<T>;
		using body_type = size_type;

	public:
	//	using S_::S_;
		using S_::self;
		body_type body_part{};

	~	subtype()                noexcept=default;
		subtype()                noexcept=default;
		XTAL_NEW_(copy, subtype, noexcept=default)
		XTAL_NEW_(move, subtype, noexcept=default)
		
		XTAL_NEW_(explicit) subtype(fungible_q<subtype> auto &&o)
		noexcept
		:	subtype(static_cast<subtype &&>(XTAL_REF_(o)))
		{}
		XTAL_NEW_(explicit) subtype(infungible_q<subtype> auto &&o, auto &&...oo)
		noexcept
		requires un_n<integral_q<decltype(o)>>
		:	subtype(static_cast<head_type>(XTAL_REF_(o)), XTAL_REF_(oo)...)
		{
		}
		XTAL_NEW_(explicit) subtype(XTAL_SYN_(head_type) auto &&o, auto &&...oo)
		noexcept
		:	subtype(static_cast<body_type>(N_ordinate[XTAL_REF_(o)]), XTAL_REF_(oo)...)
		{
		}
		XTAL_NEW_(explicit) subtype(XTAL_SYN_(body_type) auto &&o, auto &&...oo)
		noexcept
		:	S_(XTAL_REF_(oo)...)
		,	body_part(XTAL_REF_(o))
		{
		}

		XTAL_DEF_(short,static)
		XTAL_LET cardinality()
		noexcept -> auto
		{
			return sizeof...(Ns);
		}
		
		XTAL_DEF_(short)
		XTAL_LET head() const
		noexcept -> auto
		{
			return N_coordinate[body_part];
		}
		
		XTAL_DEF_(explicit operator) size_type()       noexcept {return body_part;}
		XTAL_DEF_(explicit operator) size_type() const noexcept {return body_part;}
		

	};
};
template <size_type N_width>
struct defer_field<unit_type[N_width]>
{
	using U = unit_type[N_width];

	XTAL_SET_(unsigned) N_depth = bond::bit_ceiling_f(N_width);
	static_assert(N_width == one << N_depth);

	using superkind = bond::word<N_width>;

	template <class S>
	class subtype : public bond::compose_s<S, superkind>
	{
		static_assert(any_q<S>);
		using S_ = bond::compose_s<S, superkind>;

	public:
		using head_type = remember_t<U>;
		using body_type =   member_t<U>;

	public:
		body_type body_part:N_depth{};

	public:
	//	using S_::S_;
		using S_::self;

	~	subtype()                noexcept=default;
		subtype()                noexcept=default;
		XTAL_NEW_(copy, subtype, noexcept=default)
		XTAL_NEW_(move, subtype, noexcept=default)
		
		XTAL_NEW_(explicit) subtype(fungible_q<subtype> auto &&o)
		noexcept
		:	subtype(static_cast<subtype &&>(XTAL_REF_(o)))
		{}
		///\
		Constructs `this` using the first argument, forwarding the rest to the parent. \

		XTAL_NEW_(explicit) subtype(integral_q auto &&a)
		noexcept
		:	S_(head_type(XTAL_REF_(a)) >> N_depth)
		,	body_part(head_type(a)&(N_width - 1))
		{
		}
		XTAL_NEW_(explicit) subtype(infungible_q<subtype> auto &&a, auto &&...oo)
		noexcept
		:	S_(XTAL_REF_(oo)...)
		,	body_part(member_f<head_type>(XTAL_REF_(a)))
		{
		}

		///\returns the kernel-body (prior to reconstruction using the given arguments, if provided). \

		XTAL_TO2_(XTAL_DEF_(let) head(), head_type{body_part})
		
	};
};
template <size_type N_depth>
struct defer_field<null_type[N_depth]>
:	defer_field<unit_type[(one << N_depth)]>
{
};


///////////////////////////////////////////////////////////////////////////////

template <class U>
struct refer_iterators
{
	template <class S>
	class subtype : public S
	{
		static_assert(any_q<S>);
		using S_ = S;
		using U_ = _std::remove_reference_t<U>;

	public:
		using S_::S_;

		XTAL_DEF_(let) begin() const noexcept requires XTAL_TRY_(_xtd::ranges::begin(XTAL_ANY_(U_ const &))) {return _xtd::ranges::begin(S_::template head<U>());}
		XTAL_DEF_(let) begin()       noexcept requires XTAL_TRY_(_xtd::ranges::begin(XTAL_ANY_(U_       &))) {return _xtd::ranges::begin(S_::template head<U>());}
		XTAL_DEF_(let)   end() const noexcept requires XTAL_TRY_(_xtd::ranges::  end(XTAL_ANY_(U_ const &))) {return _xtd::ranges::  end(S_::template head<U>());}
		XTAL_DEF_(let)   end()       noexcept requires XTAL_TRY_(_xtd::ranges::  end(XTAL_ANY_(U_       &))) {return _xtd::ranges::  end(S_::template head<U>());}

		XTAL_DO2_(template <counter_q V>
		XTAL_DEF_(short)
		XTAL_LET subhead(V &&v),
		noexcept -> decltype(auto)
		{
			return subhead(counted_f(0, XTAL_REF_(v)));
		})
		XTAL_DO2_(template <counted_q W>
		XTAL_DEF_(short)
		XTAL_LET subhead(W &&w),
		noexcept -> decltype(auto)
		{
			using _xtd::ranges::next;
			using _xtd::ranges::views::slice;

			auto &u  = S_::template head<U>();
			auto  u_ = begin();
			using W_ = reiterated_t<decltype(u_)>;
			auto  w0 = w.front(), wN = w.back() + 1;
			/*/
			size_type const uN = count_f(u);
			w0 = _std::min(w0, uN);
			wN = _std::min(wN, uN);
			/***/

			XTAL_IF0
			XTAL_0IF (interval_q<U>) {
				return U_(u_[w0], u_[wN]);
			}
			XTAL_0IF (indexed_q<U>) {
				return W_(next(u_, w0), next(u_, wN));
			}
			XTAL_0IF_(else) {
				return u|slice(w0, wN);
			}
		})

	};
};

template <class U>
struct infer_iterators : bond::compose<> {};

template <class U> requires iterable_q<U>
struct infer_iterators<U> : refer_iterators<U> {};


///////////////////////////////////////////////////////////////////////////////

template <class U>
struct refer_equality
{
	template <class S>
	class subtype : public S
	{
		static_assert(any_q<S>);
	public:
		using S::S;
		XTAL_DEF_(short) XTAL_LET operator == (subtype const &t) const noexcept -> bool {return S::head() == t.head();}
		XTAL_DEF_(short) XTAL_LET operator != (subtype const &t) const noexcept -> bool {return S::head() != t.head();}

	};
};

template <class U>
struct infer_equality : bond::compose<> {};

template <class U> requires equality_q<U>
struct infer_equality<U> : refer_equality<U> {};


template <class U>
struct refer_inequality
{
	template <class S>
	class subtype : public S
	{
		static_assert(any_q<S>);
		using S_ = S;

	public:
		using S_::S_;
		
		XTAL_DEF_(short)
		XTAL_LET operator <=> (subtype const &t) const
		noexcept -> auto
		{
			return S_::head() <=> t.head();
		}

	};
};

template <class U>
struct infer_inequality : bond::compose<> {};

template <class U> requires inequality_q<U>
struct infer_inequality<U> : refer_inequality<U> {};


template <class U>
struct refer_qualities
:	bond::compose<void
	,	refer_equality<U>
	,	refer_inequality<U>
	>
{};
template <class U>
struct infer_qualities
:	bond::compose<void
	,	infer_equality<U>
	,	infer_inequality<U>
	>
{};


////////////////////////////////////////////////////////////////////////////////

template <class U, int N=0>
struct refer_binary_logic
:	bond::compose<void
	,	refer_binary_logic<U, 1>
	,	refer_binary_logic<U, 2>
	>
{};
template <class U>
struct refer_binary_logic<U, 1>
{
	template <class S>
	class subtype : public S
	{
		static_assert(any_q<S>);
		using S_ = S;

	public:
		using S_::S_;
		XTAL_DEF_(inline) XTAL_LET operator ^=(auto &&o) noexcept -> decltype(auto) {S_::head() ^= XTAL_REF_(o); return S_::self();}
		XTAL_DEF_(inline) XTAL_LET operator |=(auto &&o) noexcept -> decltype(auto) {S_::head() |= XTAL_REF_(o); return S_::self();}
		XTAL_DEF_(inline) XTAL_LET operator &=(auto &&o) noexcept -> decltype(auto) {S_::head() &= XTAL_REF_(o); return S_::self();}

	};
};
template <class U>
struct refer_binary_logic<U, 2>
{
	template <class S>
	class subtype : public S
	{
		static_assert(any_q<S>);
		using S_ = S;
		using T_ = typename S_::self_type;

	public:
		using S_::S_;
		XTAL_DEF_(short) XTAL_LET operator ^ (auto &&o) const noexcept -> T_{return T_(S_::head() ^ XTAL_REF_(o));}
		XTAL_DEF_(short) XTAL_LET operator | (auto &&o) const noexcept -> T_{return T_(S_::head() | XTAL_REF_(o));}
		XTAL_DEF_(short) XTAL_LET operator & (auto &&o) const noexcept -> T_{return T_(S_::head() & XTAL_REF_(o));}

	};
};

template <class U, int N=0>
struct infer_binary_logic : bond::compose<> {};

template <class U, int N  > requires binary_group_p<N, U>
struct infer_binary_logic<U, N> : refer_binary_logic<U, N> {};



template <class U, int N=0>
struct refer_logics
:	bond::compose<void
	,	refer_binary_logic<U, N>
	>
{};
template <class U, int N=0>
struct infer_logics
:	bond::compose<void
	,	infer_binary_logic<U, N>
	>
{};


////////////////////////////////////////////////////////////////////////////////

template <class U, int N=0>
struct refer_multiplicative_group
:	bond::compose<void
	,	refer_multiplicative_group<U, 1>
	,	refer_multiplicative_group<U, 2>
	>
{};
template <class U>
struct refer_multiplicative_group<U, 1>
{
	template <class S>
	class subtype : public S
	{
		static_assert(any_q<S>);
	public:
		using S::S;
		XTAL_DEF_(inline) XTAL_LET operator *=(auto &&o) noexcept -> decltype(auto) {S::head() *= XTAL_REF_(o); return S::self();}
		XTAL_DEF_(inline) XTAL_LET operator /=(auto &&o) noexcept -> decltype(auto) {S::head() /= XTAL_REF_(o); return S::self();}

	};
};
template <class U>
struct refer_multiplicative_group<U, 2>
{
	template <class S>
	class subtype : public S
	{
		static_assert(any_q<S>);
		using S_ = S;
		using T_ = typename S_::self_type;

	public:
		using S_::S_;
		XTAL_DEF_(short) XTAL_LET operator * (auto &&o) const noexcept -> T_{return T_(S_::head() * XTAL_REF_(o));}
		XTAL_DEF_(short) XTAL_LET operator / (auto &&o) const noexcept -> T_{return T_(S_::head() / XTAL_REF_(o));}

	};
};

template <class U, int N=0>
struct infer_multiplicative_group : bond::compose<> {};

template <class U, int N  > requires multiplicative_group_p<N, U>
struct infer_multiplicative_group<U, N> : refer_multiplicative_group<U, N> {};



template <class U, int N=0>
struct refer_additive_group
:	bond::compose<void
	,	refer_additive_group<U, 1>
	,	refer_additive_group<U, 2>
	>
{};
template <class U>
struct refer_additive_group<U, 1>
{
	template <class S>
	class subtype : public S
	{
		static_assert(any_q<S>);
	public:
		using S::S;
		XTAL_DEF_(inline) XTAL_LET operator +=(auto &&o) noexcept -> decltype(auto) {S::head() += XTAL_REF_(o); return S::self();}
		XTAL_DEF_(inline) XTAL_LET operator -=(auto &&o) noexcept -> decltype(auto) {S::head() -= XTAL_REF_(o); return S::self();}

	};
};
template <class U>
struct refer_additive_group<U, 2>
{
	template <class S>
	class subtype : public S
	{
		static_assert(any_q<S>);
		using S_ = S;
		using T_ = typename S_::self_type;

	public:
		using S_::S_;
		XTAL_DEF_(short) XTAL_LET operator + (auto &&o) const noexcept -> T_ {return T_( S_::head() + XTAL_REF_(o));}
		XTAL_DEF_(short) XTAL_LET operator - (auto &&o) const noexcept -> T_ {return T_( S_::head() - XTAL_REF_(o));}
		XTAL_DEF_(short) XTAL_LET operator - (        ) const noexcept -> T_ {return T_(-S_::head());}

	};
};

template <class U, int N=0>
struct infer_additive_group : bond::compose<> {};

template <class U, int N  > requires additive_group_p<N, U>
struct infer_additive_group<U, N> : refer_additive_group<U, N> {};



template <class U, int N=0>
struct refer_discrete_group
:	bond::compose<void
	,	refer_discrete_group<U, 1>
	,	refer_discrete_group<U, 2>
	>
{};
template <class U>
struct refer_discrete_group<U, 1>
{
	template <class S>
	class subtype : public S
	{
		static_assert(any_q<S>);
	public:
		using S::S;
		XTAL_DEF_(inline) XTAL_LET operator ++(int) noexcept -> decltype(auto) {auto  t = S::self(); ++S::head(); return t;}
		XTAL_DEF_(inline) XTAL_LET operator --(int) noexcept -> decltype(auto) {auto  t = S::self(); --S::head(); return t;}
		XTAL_DEF_(inline) XTAL_LET operator ++()    noexcept -> decltype(auto) {auto &s = S::self(); ++S::head(); return s;}
		XTAL_DEF_(inline) XTAL_LET operator --()    noexcept -> decltype(auto) {auto &s = S::self(); --S::head(); return s;}

	};
};
template <class U>
struct refer_discrete_group<U, 2>
{
	template <class S>
	using subtype = S;

};

template <class U, int N=0>
struct infer_discrete_group : bond::compose<> {};

template <class U, int N  > requires discrete_group_p<N, U>
struct infer_discrete_group<U, N> : refer_discrete_group<U, N> {};



template <class U, int N=0>
struct refer_groups
:	bond::compose<void
	,	refer_multiplicative_group<U, N>
	,	refer_additive_group<U, N>
	,	refer_discrete_group<U, N>
	>
{};
template <class U, int N=0>
struct infer_groups
:	bond::compose<void
	,	infer_multiplicative_group<U, N>
	,	infer_additive_group<U, N>
	,	infer_discrete_group<U, N>
	>
{};


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
