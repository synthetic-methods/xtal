//////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////
//\
This naked header is intended for inclusion within a `namespace` providing the decorators: \

template <class U> XTAL_TYP  defer;///<     Proxies `U`.
template <class U> XTAL_TYP  refer;///<   Delegates `U`.

template <class T> XTAL_TYP define;///< Initializes `T`.
template <class T> XTAL_TYP refine;///<   Finalizes `T`.


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
///\
Associates the internal `subtype` both with the current namespace, \
the parent namespace, and with the decorators `As...` if provided. \

template <            typename ...As> XTAL_TYP any   : bond::compose<_retail::any<As...>, bond::tag<any>> {};
template <class    S, typename ...As> XTAL_USE any_s = bond::compose_s<     S, any<As...>>;
template <class    T, typename ...As> XTAL_ASK any_p = bond::any_tag_p<any, T> and complete_q<typename T::template self_s<As...>>;
template <class ...Ts               > XTAL_ASK any_q = bond::any_tag_p<any, Ts...>;

using any_type = any_s<unit_type>;

template <::std::size_t N, fungible_q<any_type> T> XTAL_DEF_(inline) XTAL_LET get(T const &&t) noexcept -> decltype(auto) {return XTAL_MOV_(t).template head<N>();};
template <::std::size_t N, fungible_q<any_type> T> XTAL_DEF_(inline) XTAL_LET get(T       &&t) noexcept -> decltype(auto) {return XTAL_MOV_(t).template head<N>();};
template <::std::size_t N, fungible_q<any_type> T> XTAL_DEF_(inline) XTAL_LET get(T const  &t) noexcept -> decltype(auto) {return           t .template head<N>();};
template <::std::size_t N, fungible_q<any_type> T> XTAL_DEF_(inline) XTAL_LET get(T        &t) noexcept -> decltype(auto) {return           t .template head<N>();};


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
///\
Combines `define` and `refine` to materialize the curiously recursive type `T`, \
sandwiching the decorators `As...`. \

template <class T, typename ...As>
struct confine
{
	using superkind = bond::compose<refine<T>, As..., define<T>>;

	template <class S>
	using subtype = bond::compose_s<S, superkind>;
	using    type = subtype<any_type>;
	
};
template <class T, typename ...As>
using confine_t = typename confine<T, As...>::type;

///\
Creates the `confine`d _decorator_ with `As...`. \

template <typename ...As>
struct confined
{
	template <class T>
	//\
	using homokind = confine<T, As...>;
	using homokind = bond::compose<refine<T>, As..., define<T>>;
	
	using superkind = bond::isokind<homokind>;

	template <class S>
	using subtype = bond::compose_s<S, superkind>;
	using    type = subtype<any_type>;
	
};
template <typename ...As>
using confined_t = typename confined<As...>::type;


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
///\
Combines `defer` and `refer` to lift `U`, sandwiching the decorators `As...`. \

template <class U, typename ...As> XTAL_TYP confer      : bond::compose<refer<U>, As..., defer<U>> {};
template <class U, typename ...As> XTAL_USE conferred   = confined<confer<U, As...>>;
template <class U, typename ...As> XTAL_USE conferred_t = typename conferred<U, As...>::type;


////////////////////////////////////////////////////////////////////////////////
///\
Applies `refer` to the outermost `head_t`. \

struct referree
{
	struct superkind
	{
		template <any_q S>
		using subtype = bond::compose_s<S, refer<typename S::head_type>>;

	};
	template <any_q S>
	using subtype = bond::compose_s<S, superkind>;
	
};
///\
Unless `A` is already a decorator, \
provides `defer<A>` or `any<A>` depending on whether `complete_q<A>`. \

template <class           A             >	struct infer       :             defer<A>                       {};
template <bond::compose_q A             >	struct infer<A   > :                   A                        {};
template <incomplete_q    A             >	struct infer<A   > :               any<A>                       {};
template <incomplete_q    A, size_type N>	struct infer<A[N]> : bond::compose<any<A>, defer<unit_type[N]>> {};
template <                              >	struct infer<void> : bond::compose<                           > {};

template <class   ...As>	XTAL_USE   infers     = bond::compose<          infer   <As>...>;
template <class   ...As>	XTAL_USE reinfers     = bond::compose<referree, infer   <As>...>;
template <class   ...As>	XTAL_USE   inferred   = confined<               infers  <As...>>;
template <class   ...As>	XTAL_USE reinferred   = confined<             reinfers  <As...>>;
template <class   ...As>	XTAL_USE   inferred_t = typename                inferred<As...>::type;
template <class   ...As>	XTAL_USE reinferred_t = typename              reinferred<As...>::type;
///<\
Creates a `confined` `infers<As...>`, delegating to the outermost `complete_q<head_type>`. \



////////////////////////////////////////////////////////////////////////////////
///\
Defines an `inferred` tuple from `...As`. \

template <class   ...Ts>	XTAL_TYP packed   : inferred<Ts..., bond::tag<bond::pack_t>> {};
template <class   ...Ts>	XTAL_USE packed_t = typename packed<Ts...>::type;
template <class   ...Ts>	XTAL_ASK packed_q = bond::any_tag_p<packed, Ts...>;
template <class   ...Ts>
XTAL_DEF_(return,inline)
XTAL_LET packed_f(Ts &&...as)
noexcept -> auto
{
	return packed_t<Ts...>(XTAL_REF_(as)...);
}

///\
Defines an `inferred` tuple from `...Ts`, \
or `bond::seek_front_t<Ts...>` if `any_q<Ts...>` and `1 == sizeof...(Ts)`. \

template <class   ...Ts>	XTAL_TYP packet     {using type =   packed_t<Ts...>;};
template <any_q      T >	XTAL_TYP packet<T>  {using type =            T     ;};
template <             >	XTAL_TYP packet< >  {using type = confined_t<     >;};
template <class   ...Ts>	XTAL_USE packet_t = typename packet<Ts...>::type;
template <class   ...Ts>
XTAL_DEF_(return,inline)
XTAL_LET packet_f(Ts &&...as)
noexcept -> auto
{
	return packet_t<Ts...>(XTAL_REF_(as)...);
}

///\
Defines a `conferred` value from `T`, \
or `T` if `any_q<T>`. \

template <class      T >	XTAL_TYP let        {using type = conferred_t<T>;};
template <any_q      T >	XTAL_TYP let<T>     {using type =             T ;};
template <class      T >	XTAL_USE let_t    = typename let<T>::type;
template <class      T >
XTAL_DEF_(return,inline)
XTAL_LET let_f(T &&t)
noexcept -> decltype(auto)
{
	return let_t<T>(XTAL_REF_(t));
}
///<\
\returns `w` if `any_q<decltype(w)>`, otherwise proxies `w` using `conferred_t`. \


///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
