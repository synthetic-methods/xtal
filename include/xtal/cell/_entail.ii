#include "../bond/_entail.ii"









//////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
/*!
\brief   Associates `subtype` with the current namespace.

Used to check membership via `any_q`,
and to obtain the nearest `subtype` by `self<As...>` and `head<As...>()`.

Already applied by `confine(?:d)?`, `(?:con|in)ferred`, and related definitions,
but can be used to further specialize a given decorator.

\note    The sequence `As...` is linearized such that
        `std::derived_from<any_t<A, As...>, any_t<As...>>`,
         therefore extensions of the current namespace also satisfy `any_q`.
*/
template <            typename ...As> struct   any   : bond::compose<_retail::any<As...>, bond::tag<any>> {};
template <class    S, typename ...As> using    any_s = bond::compose_s<        S, any<As...>>;///<\brief Produces a subtype of `S` labelled with `any<As...>`.
template <            typename ...As> using    any_t = bond::compose_s<unit_type, any<As...>>;///<\brief Produces a    type        labelled with `any<As...>`.
template <class    T, typename ...As> concept  any_p = bond::tag_in_p<any, T> and complete_q<typename T::template self_s<As...>>;
///<\brief Determines whether `T` has been labelled with `any<As>...`.

template <class ...Ts               > concept  any_q = bond::tag_in_p<any, Ts...>;
///<\brief Determines whether `Ts...` have been labelled with `any<>`.


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/*!
\brief   Aliases `bond::compose<refine<T>, As..., define<T>>`.
*/
template <class T, typename ...As>
struct confine
{
private:
	using superkind = bond::compose<refine<T>, As..., define<T>>;

public:
	template <class S>
	using subtype = bond::compose_s<S, superkind>;
	using    type = subtype<any_t<>>;
	
};
template <class T, typename ...As>
using confine_t = typename confine<T, As...>::type;

/*!
\brief   Binds `confine<T, As...>` to the member-`subtype<S>`.
*/
template <typename ...As>
struct confined
{
private:
	template <class T>
	using homokind = confine<T, As...>;

public:
	template <class S>
	using subtype = bond::derive_s<S, homokind>;
	using    type = subtype<any_t<>>;
	
};
template <typename ...As>
using confined_t = typename confined<As...>::type;


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
/*!
\brief   Aliases `bond::compose<refer<U>, As..., defer<U>>`.
*/
template <class U, typename ...As> struct   confer      : bond::compose<refer<U>, As..., defer<U>> {};
/*!
\brief   Aliases `confined<refer<U>, As..., defer<U>>`.
*/
template <class U, typename ...As> struct   conferred   : confined<confer<U, As...>> {};
template <class U, typename ...As> using    conferred_t = typename conferred<U, As...>::type;


////////////////////////////////////////////////////////////////////////////////
#ifndef XTAL_DOC
/*!
\brief   Applies `refer` to the outermost `head_t`.
*/
struct referee
{
	struct superkind
	{
		template <class S>
		using subtype = bond::compose_s<S, refer<typename S::head_type>>;

	};
	template <class S>
	using subtype = bond::compose_s<S, superkind>;
	
};
#endif
/*!
\brief   Provides a decorator of `any_q` determined by `A`.
*/
template <class           A         >	struct infer;
template <class           A         >	struct infer       :             defer<A>                       {};///<\brief `defer`s `A` unless otherwise specified.
template <bond::compose_q A         >	struct infer<A   > :                   A                        {};///<\brief Uses `A` if `bond::compose_q<A>`.
template <incomplete_q    A         >	struct infer<A   > :               any<A>                       {};///<\brief Uses `any<A>` if `incomplete_q<A>`.
template <incomplete_q    A, auto  N>	struct infer<A[N]> : bond::compose<any<A>, defer<unit_type[N]>> {};///<\brief Uses `any<A>` and `defer<unit_type[N]>` if `incomplete_q<A>`.
template <                          >	struct infer<void> : bond::compose<                           > {};///<\brief Uses the identity `bond::compose<>`.
template <class   ...As>	struct     infers     : bond::compose<         infer   <As>...>   {};///<\brief Produces the composition of `infer<As>...`.
template <class   ...As>	struct   reinfers     : bond::compose<referee, infer   <As>...>   {};///<\brief Produces the composition of `infer<As>...`, delegating to the outer-most `As...`.
template <class   ...As>	struct     inferred   : confined<              infers  <As...>>   {};///<\brief Produces the `confined` decorator for   `infers<As...>`.
template <class   ...As>	struct   reinferred   : confined<            reinfers  <As...>>   {};///<\brief Produces the `confined` decorator for `reinfers<As...>`.
template <class   ...As>	using      inferred_t = typename               inferred<As...>::type;///<\brief Produces the `confined_t` type for   `infers<As...>`.
template <class   ...As>	using    reinferred_t = typename             reinferred<As...>::type;///<\brief Produces the `confined_t` type for `reinfers<As...>`.

/**/
////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
