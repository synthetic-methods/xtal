#include "../bond/_entail.ii"








//line namespace _entail
//////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
//\
This naked header is intended for inclusion within a `namespace` providing the decorators: \

template <class U> struct    defer;///<     Proxies `U`.
template <class U> struct    refer;///<   Delegates `U`.

template <class T> struct   define;///< Initializes `T`.
template <class T> struct   refine;///<   Finalizes `T`.


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
///\
Associates `subtype` both with the current namespace, \
the parent namespace, and with the decorators `As...` if provided. \

template <            typename ...As> struct   any   : bond::compose<_retail::any<As...>, bond::tag<any>> {};
template <class    S, typename ...As> using    any_s = bond::compose_s<     S, any<As...>>;
template <class    T, typename ...As> concept  any_p = bond::tagged_with_p<any, T> and complete_q<typename T::template self_s<As...>>;
template <class ...Ts               > concept  any_q = bond::tagged_with_p<any, Ts...>;

using any_type = any_s<unit_type>;


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
///\
Combines `define` and `refine` to materialize the curiously recursive type `T`, \
sandwiching the decorators `As...`. \

template <class T, typename ...As>
struct confine
{
	using superkind = bond::compose<refine<T>, As..., define<T>>;

	template <class S>
	using subtype = bond::compose_s<S, superkind>;
	using    type = subtype<any_type>;
	
};
template <class T, typename ...As>
using confine_t = typename confine<T, As...>::type;

///\
Creates the `confine`d _decorator_ with `As...`. \

template <typename ...As>
struct confined
{
	template <class T>
	using homokind = confine<T, As...>;

	template <class S>
	using subtype = bond::derive_s<S, homokind>;
	using    type = subtype<any_type>;
	
};
template <typename ...As>
using confined_t = typename confined<As...>::type;


////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
///\
Combines `defer` and `refer` to lift `U`, sandwiching the decorators `As...`. \

template <class U, typename ...As> struct   confer      : bond::compose<refer<U>, As..., defer<U>> {};
template <class U, typename ...As> using    conferred   = confined<confer<U, As...>>;
template <class U, typename ...As> using    conferred_t = typename conferred<U, As...>::type;


////////////////////////////////////////////////////////////////////////////////
///\
Applies `refer` to the outermost `head_t`. \

struct referree
{
	struct superkind
	{
		template <class S>
		using subtype = bond::compose_s<S, refer<typename S::head_type>>;

	};
	template <class S>
	using subtype = bond::compose_s<S, superkind>;
	
};
///\
Unless `A` is already a decorator, \
provides `defer<A>` or `any<A>` depending on whether `complete_q<A>`. \

template <class           A         >	struct infer       :             defer<A>                       {};
template <bond::compose_q A         >	struct infer<A   > :                   A                        {};
template <incomplete_q    A         >	struct infer<A   > :               any<A>                       {};
template <incomplete_q    A, auto  N>	struct infer<A[N]> : bond::compose<any<A>, defer<unit_type[N]>> {};
template <                          >	struct infer<void> : bond::compose<                           > {};

template <class   ...As>	using      infers     = bond::compose<          infer   <As>...>;
template <class   ...As>	using    reinfers     = bond::compose<referree, infer   <As>...>;
template <class   ...As>	using      inferred   = confined<               infers  <As...>>;
template <class   ...As>	using    reinferred   = confined<             reinfers  <As...>>;
template <class   ...As>	using      inferred_t = typename                inferred<As...>::type;
template <class   ...As>	using    reinferred_t = typename              reinferred<As...>::type;
///<\
Creates a `confined` `infers<As...>`, delegating to the outermost `complete_q<head_type>`. \


////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
