namespace _retail
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

using namespace xtal::bond;


////////////////////////////////////////////////////////////////////////////////

///\
Creates a unique `subtype` tagged by the given `As...`, \
such that e.g. `std::derives_from<any<struct x, struct xs...>, any<struct xs...>>`. \

template <typename ...As>
struct any
{
	using superkind = bond::compose<any<As>...>;
	
	template <class S>
	using subtype = bond::compose_s<S, superkind>;
	
};
template <>
struct any<void>
{	
	template <class S>
	using subtype = S;

};
template <typename A>
struct any<A>
{	
	template <class S>
	class subtype : public bond::compose_s<S, _detail::query<subtype<S>, A>>
	{
		using S_ = bond::compose_s<S, _detail::query<subtype<S>, A>>;

	public:
		/**/
		using S_::S_;
		/*/
	~	subtype() noexcept=default;
		subtype() noexcept=default;

		XTAL_NEW_(copy, subtype, noexcept=default)
		XTAL_NEW_(move, subtype, noexcept=default)

		template <fungible_q<subtype> O>
		XTAL_NEW_(explicit) subtype(O &&o)
		noexcept
		:	subtype(static_cast<subtype &&>(XTAL_REF_(o)))
		{}
		XTAL_NEW_(explicit) subtype(auto &&...oo)
		noexcept
		:	S_(XTAL_REF_(oo)...)
		{}
		///\
		Attempts construction from infungible-but-compatible types via inspection. \
		
		template <infungible_q<subtype> W>
		XTAL_NEW_(explicit) subtype(W &&w, auto &&...oo)
		noexcept
		requires XTAL_TRY_(typename W::template self_s<A>)
		:	S_(w.template head<A>(), XTAL_REF_(w), XTAL_REF_(oo)...)
		{};
		/***/

	};
};


}//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

#include "../cell/any.ii"
