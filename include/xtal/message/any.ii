#pragma once
#include "./any.hh"

#include "../compound/all.ii"
#include "../conflux/all.ii"
#include "../process/any.hh"
#include "../resource/enumerated.ii"


XTAL_ENV_(push)
namespace xtal::message
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////

template <class T>
struct define
{
	using subkind = _retail::define<T>;

	template <any_q S>
	class subtype: public atom::compose_s<S, subkind>
	{
		friend T;
		using S_ = atom::compose_s<S, subkind>;
	
	public:
		using S_::S_;

		XTAL_CON subtype(size_t u)
		XTAL_0EX
		{
			assert(0 == u);
		};
		template <cardinal_q U>
		XTAL_CON subtype(U &&u)
		XTAL_0EX
		{
			assert(0 == u);
		};

		///\
		Forwards any message prefixed with `N_mask`. \

		template <int N_mask=-1>
		struct address
		{
			XTAL_LET_(size_t) M_mask =  N_mask;
			XTAL_LET_(size_t) W_mask = ~M_mask;
			
			template <conflux::any_q R>
			class subtype: public atom::compose_s<R>
			{
				using R_ = atom::compose_s<R>;
			
			public:
				using R_::R_;
				using R_::self;
				using R_::influx;

				XTAL_TLX influx(compound::mark_s<T> o, XTAL_DEF ...oo)
				XTAL_0EX
				{
					return self().influx(o.head(), o.core(), XTAL_REF_(oo)...);
				}
				XTAL_TLX influx(compound::mark_s<> m, XTAL_DEF ...oo)
				XTAL_0EX
				{
					if (~m & M_mask) {
						return R_::influx();
					}
					else if (m &= W_mask) {
						return R_::influx(m, XTAL_REF_(oo)...);
					}
					else {
						return R_::influx(XTAL_REF_(oo)...);
					}
				}

			};
		};
		///\
		Attaches `T` as a member of `this`. \

		template <int N_mask=-1>
		struct attach
		:	atom::compose<address<N_mask>, typename S_::template afflux<>>
		{
		};
		///\
		Attaches `T` as a member of `this`, appending it to the arguments used to resolve `method<auto ...>`. \

		template <int N_mask=-1>
		struct dispatch
		{
			using subkind = attach<N_mask>;
			
			template <process::any_q R> requires resource::enumerated_q<T>
			class subtype: public atom::compose_s<R, subkind>
			{
				using R_ = atom::compose_s<R, subkind>;
				using K_ = typename R_::template head_t<>;
			
			public:
			//	using R_::R_;
				using R_::self;
				using R_::head;

				XTAL_CO0_(subtype);
				XTAL_CO4_(subtype);

				XTAL_CXN subtype(size_t const &n)
				:	R_(n)
				{
					assert(0 <= n and n < T::enumerate());
				}

				XTAL_TO2_(
				XTAL_OP2() (XTAL_DEF ...xs),
					(self().*deify<decltype(xs)...>()) (XTAL_REF_(xs)...)
				)

				XTAL_TO4_(template <class ...Xs>
				XTAL_TN2 reify(integral_q auto const ...ks),
					_std::bind_front(deify<Xs...>(ks...), &self())
				)

				template <class ...Xs>
				XTAL_TN2 deify(integral_q auto const ...ks)
				XTAL_0FX
				{
					return deify_(being<Xs...>::template m_method<ks...>);
				}
				XTAL_TN2 deify_(array_q auto const &fs)
				XTAL_0FX
				{
					return R_::deify_(fs[head()]);
				}

			protected:
				template <class ...Xs>
				struct being
				{
					template <auto ...Is>
					class resolve
					{
						template <size_t ...I>
						XTAL_FN2 method_f(atom::seek_t<I...>)
						XTAL_0EX
						{
							using doing = typename R_::template being<Xs...>;
							return _std::array{(doing::template m_method<Is..., I>)...};
						}
					
					public:
						XTAL_LET m_method = method_f(atom::seek_f<T::enumerate()> {});
					
					};
					template <auto ...Is> XTAL_LET m_method = resolve<Is...>::m_method;
					template <auto ...Is> XTAL_USE Y_method = decltype(m_method<Is...>);
				
				};

			};
		};
		///\
		Assigns `T`, allowing update via `influx` and aggregated inspection via `efflux`. \
		
		template <int N_mask=-1>
		struct expect
		{
			using subkind = attach<N_mask>;
			
			template <conflux::any_q R>
			class subtype: public atom::compose_s<R, subkind>
			{
				using R_ = atom::compose_s<R, subkind>;
			
			public:
				using R_::R_;
				
				XTAL_TLX effuse(XTAL_DEF o)
				XTAL_0EX
				{
					if constexpr (is_q<T, XTAL_TYP_(o)>) {
						return R_::heading(XTAL_REF_(o));
					}
					else {
						return R_::effuse(XTAL_REF_(o));
					}
				}

			};
		};
		///\
		Assigns `T`, allowing update via `efflux` aggregated inspection via `influx`. \

		template <int N_mask=-1>
		struct inspect
		{
			using subkind = attach<N_mask>;
			
			template <conflux::any_q R>
			class subtype: public atom::compose_s<R, subkind>
			{
				using R_ = atom::compose_s<R, subkind>;
			
			public:
				using R_::R_;

				XTAL_TLX infuse(XTAL_DEF o)
				XTAL_0EX
				{
					if constexpr (is_q<T, XTAL_TYP_(o)>) {
						return R_::heading(XTAL_REF_(o));
					}
					else {
						return R_::infuse(XTAL_REF_(o));
					}
				}

			};
		};
		///\
		Uses the current `T` as the return value of `method`. \
		
		template <int N_mask=-1>
		struct poll
		{
			using subkind = attach<N_mask>;
			
			template <process::any_q R>
			class subtype: public atom::compose_s<R, subkind>
			{
				using R_ = atom::compose_s<R, subkind>;
			
			public:
				using R_::R_;
				using R_::head;

				XTAL_TN2_(T) method()
				XTAL_0FX
				{
					return head();
				}

			};
		};

	};
};
template <class T>
struct refine
:	_retail::refine<T>
{
};


////////////////////////////////////////////////////////////////////////////////

template <class U>
struct defer
:	_retail::defer<U>
{
};
template <class U>
struct refer
:	_retail::refer<U>
{
};


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
XTAL_ENV_(pop)
