#pragma once
#include "./any.hh"

#include "../context/all.ii"
#include "../process/any.hh"
#include "../processor/any.hh"


XTAL_ENV_(push)
namespace xtal::message
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////

template <class T>
struct define
{
	using subkind = _retail::define<T>;

	template <any_q S>
	class subtype: public common::compose_s<S, subkind>
	{
		friend T;
		using S_ = common::compose_s<S, subkind>;
	
	public:
		using S_::S_;
		using cardinality = cardinal_t<0>;

		XTAL_CON subtype(size_t u)
		XTAL_0EX
		{
			assert(0 == u);
		};
		template <cardinal_q U>
		XTAL_CON subtype(U &&u)
		XTAL_0EX
		{
			assert(0 == u);
		};

		///\
		Forwards `T` (or really, any message) if prefixed by a match for `N_mask`. \

		template <int N_mask=-1>
		struct forward
		{
			XTAL_LET_(size_t) M_mask =  N_mask;
			XTAL_LET_(size_t) W_mask = ~M_mask;
			
			template <conflux::any_q R>
			class subtype: public common::compose_s<R>
			{
				using R_ = common::compose_s<R>;
			
			public:
				using R_::R_;
				using R_::self;
				using R_::influx;

				XTAL_TLX influx(context::match_s<> i, XTAL_DEF ...oo)
				XTAL_0EX
				{
					size_t m =  i;
					size_t w = ~m;
					if (w & M_mask) {
						return R_::influx();
					}
					else if (m &= W_mask) {
						return R_::influx(context::match_s<>(m), XTAL_REF_(oo)...);
					}
					else {
						return R_::influx(XTAL_REF_(oo)...);
					}
				}
				XTAL_TLX influx(context::match_s<T> io, XTAL_DEF ...oo)
				XTAL_0EX
				{
					return self().influx(io.valve(), io.core(), XTAL_REF_(oo)...);
				}

			};
		};
		///\
		Attaches `T` as a member of `this`. \

		template <int N_mask=-1>
		struct attach
		{
			using subkind = common::compose<forward<N_mask>, conflux::defer<T>>;

			template <conflux::any_q R>
			class subtype: public common::compose_s<R, subkind>
			{
				using R_ = common::compose_s<R, subkind>;
			
			public:
			//	using R_::R_;
				using R_::self;
				using R_::influx;

				XTAL_CO0_(subtype);
				XTAL_CO4_(subtype);

				///\
				Constructs the `attach`ed `message` using its default, \
				before `forward`ing the arguments to `this`. \

				XTAL_CXN subtype(XTAL_DEF ...xs)
				XTAL_0EX
				:	R_(T{}, XTAL_REF_(xs)...)
				{}

				///\
				Processes a scheduled `occur`rence. \
				Override the default to prevent overprocessing of non-idempotent events. \

				///\todo\
				Allow `context`ual `attach`ment that compares `valve`s.

				XTAL_TLX influx(context::occur_s<> o, XTAL_DEF ...oo)
				XTAL_0EX
				{
					return R_::influx(XTAL_REF_(oo)...);
				}
				XTAL_TLX influx(context::occur_s<T> o, XTAL_DEF ...oo)
				XTAL_0EX
				{
					return self().influx(XTAL_MOV_(o.valve()), XTAL_MOV_(o.core()), XTAL_REF_(oo)...);
				}

			};
		};
		///\
		Attaches `T` as a member of `this`, appending it to the arguments used to resolve `method<auto ...>`. \

		template <int N_mask=-1>
		struct dispatch
		{
			static_assert(cardinal_q<typename T::cardinality>);
			XTAL_LET N_cardinality = T::cardinality::value;
			
			template <process::any_q R>
			class subtype: public common::compose_s<R, attach<N_mask>>
			{
				using R_ = common::compose_s<R, attach<N_mask>>;
				using K_ = typename R_::valve_type;
			
			public:
			//	using R_::R_;
				using R_::self;
				using R_::valve;

				XTAL_CO0_(subtype);
				XTAL_CO4_(subtype);

				XTAL_CXN subtype(size_t const &n)
				:	R_(n)
				{
					assert(0 <= n and n < N_cardinality);
				}

				XTAL_TO2_(
				XTAL_OP2() (XTAL_DEF ...xs),
					(self().*deify<decltype(xs)...>()) (XTAL_REF_(xs)...)
				)

				XTAL_TO4_(template <class ...Xs>
				XTAL_TN2 reify(nominal_q auto const ...ks),
					_std::bind_front(deify<Xs...>(ks...), &self())
				)

				template <class ...Xs>
				XTAL_TN2 deify(nominal_q auto const ...ks)
				XTAL_0FX
				{
					return deify_(being<Xs...>::template m_method<valued_f(ks)...>);
				}
				XTAL_TN2 deify_(array_q auto const &fs)
				XTAL_0FX
				{
					return R_::deify_(fs[valve()]);
				}

			protected:
				template <class ...Xs>
				struct being
				{
					template <auto ...Ks>
					class resolve
					{
						template <size_t ...I>
						XTAL_FN2 method_f(common::seek_t<I...>)
						XTAL_0EX
						{
							using doing = typename R_::template being<Xs...>;
							return _std::array{(doing::template m_method<Ks..., I>)...};
						}
					
					public:
						XTAL_LET m_method = method_f(common::seek_f<N_cardinality> {});
					
					};
					template <auto ...Ks> XTAL_LET m_method = resolve<Ks...>::m_method;
					template <auto ...Ks> XTAL_USE method_t = decltype(m_method<Ks...>);
				
				};

			};
		};
		///\
		Attaches `T` as a namespace, \
		forwarding on `influx` only when prefixed by a matching type/instance. \

		template <int N_mask=-1>
		struct guard
		{
			template <conflux::any_q R>
			class subtype: public common::compose_s<R, attach<N_mask>>
			{
				using R_ = common::compose_s<R, attach<N_mask>>;
			
			public:
				using R_::R_;

				XTAL_TLX infuse(XTAL_DEF o)
				XTAL_0EX
				{
					if constexpr (is_q<T, XTAL_TYP_(o)>) {
						return R_::heading(XTAL_REF_(o));
					}
					else {
						return R_::infuse(XTAL_REF_(o));
					}
				}

			};
		};
		///\
		Attaches `T`, allowing aggregated inspection via `efflux`. \
		
		template <int N_mask=-1>
		struct gauge
		{
			template <conflux::any_q R>
			class subtype: public common::compose_s<R, attach<N_mask>>
			{
				using R_ = common::compose_s<R, attach<N_mask>>;
			
			public:
				using R_::R_;
				
				XTAL_TLX effuse(XTAL_DEF o)
				XTAL_0EX
				{
					if constexpr (is_q<T, XTAL_TYP_(o)>) {
						return R_::heading(XTAL_REF_(o));
					}
					else {
						return R_::effuse(XTAL_REF_(o));
					}
				}

			};
		};
		///\
		Uses the current `T` as the return value of `method`. \
		
		template <int N_mask=-1>
		struct poll
		{
			template <process::any_q R>
			class subtype: public common::compose_s<R, attach<N_mask>>
			{
				using R_ = common::compose_s<R, attach<N_mask>>;
			
			public:
				using R_::R_;
				using R_::valve;

				XTAL_TN2_(T) method()
				XTAL_0FX
				{
					return valve();
				}

			};
		};
		///\
		Wraps all `influx`ed `message`s prefixed by a context-free `voice`. \

		///\note\
		Defined independently of `T`!

		struct rend
		{
			template <conflux::any_q R>
			class subtype: public common::compose_s<R>
			{
				using R_ = common::compose_s<R>;
				
			public:
				using R_::R_;
				using R_::self;
				using R_::influx;
				///\returns the aggregated result of queuing the `message`s with the given delay. \

				XTAL_TLX influx(context::voice_s<> io, XTAL_DEF ...oo)
				XTAL_0EX
				{
					return self().influx_apart(context::voice_s<XTAL_TYP_(oo)>(io.valve(), XTAL_REF_(oo))...);
				}

			};
		};
		///\
		Wraps all `influx`ed `message`s prefixed by a context-free `cue`. \

		///\note\
		Defined independently of `T`!

		struct pend
		{
			template <conflux::any_q R>
			class subtype: public common::compose_s<R, rend>
			{
				using R_ = common::compose_s<R, rend>;
				
			public:
				using R_::R_;
				using R_::self;
				using R_::influx;
				///\returns the aggregated result of influxing the given `message`s. \

				XTAL_TLX influx(context::cue_s<> io, XTAL_DEF ...oo)
				XTAL_0EX
				{
					return self().influx_apart(context::cue_s<XTAL_TYP_(oo)>(io.valve(), XTAL_REF_(oo))...);
				}

			};
		};
		///\
		Provides a queue for `T` on the target object, \
		which is converted to a signal by successive calls to `method`. \

		template <int N_event=-1>
		struct hold
		{
			using event_u = context::cue_s<T>;
			using delay_u = typename event_u::valve_type;
			using spool_u = compound::fluid::siphon_t<event_u[N_event]>;

			template <int N>
			XTAL_LET sentry_v = event_u::template sentry<N>();

			template <process::any_q R> requires (2 <= size_t(N_event))
			class subtype: public common::compose_s<R, pend>
			{
				using R_ = common::compose_s<R, pend>;
				
				delay_u d_{0};
				spool_u q_{sentry_v<-1>, sentry_v<1>};

			public:
				using R_::R_;
				using R_::influx;

				XTAL_TLX influx(event_u dot, XTAL_DEF ...oo)
				XTAL_0EX
				{
					if (dot.valve() < d_ and q_.empty()) {
						q_.abandon().valve(d_ = 0);
					}
					q_.push(XTAL_MOV_(dot));
					return R_::influx(oo...);
				}

				XTAL_TN2_(T) method()
				XTAL_0EX
				{
					return q_.advance(d_++ == q_.peek(1).valve()).core();
				}
			//	TODO: Once the phasor-type is settled, define a `method` that updates only on reset. \

			};
		};
		///\
		Provides a queue for `T` on the target object, \
		scheduled via `influx` and processed in segments via `reflux`. \

		///\todo\
		Allow for scheduling beyond the current window, \
		possibly using `message::sequel` to convert between absolute and relative delays. \

		template <int N_event=-1>
		struct intermit
		{
			using occurrence_u = context::occur_s<T>;
			using event_u = context::cue_s<T>;
			using delay_u = typename event_u::valve_type;
			using spool_u = compound::fluid::siphon_t<event_u[N_event]>;

			template <int N>
			XTAL_LET sentry_v = event_u::template sentry<N>();

			template <processor::any_q R>
			class subtype: public common::compose_s<R, pend>
			{
				using R_ = common::compose_s<R, pend>;
				spool_u q_{sentry_v<1>};
				typename occurrence_u::valve_type next_m;

				XTAL_TO4_(XTAL_TN2 next_tail(), q_.peek().core())
				XTAL_TO4_(XTAL_TN2 next_head(), q_.peek().valve())

			public:
				using R_::R_;
				using R_::self;
				using R_::influx;
				///\
				Invokes `influx` if the given delay `i == 0`, \
				otherwise enqueues the events `o, o...` at the specified index. \
				
				XTAL_TLX influx(event_u dot, XTAL_DEF ...oo)
				XTAL_0EX
				{
					if (0 == dot.valve()) {
						return influx(dot.core(), XTAL_REF_(oo)...);
					}
					else {
						q_.push(XTAL_MOV_(dot));
						return influx(XTAL_REF_(oo)...);
					}
				}

				///\returns The delay until the next event to be processed. \

				XTAL_TN1_(delay_u) delay()
				XTAL_0EX
				{
					return _std::min<delay_u>({R_::delay(), next_head()});
				//	NOTE: The `std::initializer_list` syntax voids segfaulting in `RELEASE`. \
				
				}
				///\
				Invokes `influx` for all events up-to the supplied delay `i`. \
				
				///\returns the delay until the next event. \

				XTAL_TN1_(delay_u) relay(delay_u i)
				XTAL_0EX
				{
					R_::relay(i);
					for (; 0 < q_.size() and next_head() <= i; q_.pop()) {
					//	(void) R_::influx(next_tail());
						(void) R_::influx(occurrence_u(next_m ^= 1, next_tail()));
					}
					return delay();
				}

			};
		};

	};
};
template <class T>
struct refine
:	_retail::refine<T>
{
};


////////////////////////////////////////////////////////////////////////////////

template <class U>
struct defer
:	_retail::defer<U>
{
};
template <class U>
struct refer
:	_retail::refer<U>
{
};


////////////////////////////////////////////////////////////////////////////////

template <typename ...As>
struct opt;

template <cardinal_q U>
struct infer<U>
:	defer<confined_t<opt<U>>>
{
};


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
XTAL_ENV_(pop)

#include "./opt.ii"
