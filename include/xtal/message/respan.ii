#pragma once
#include "./any.ii"






XTAL_ENV_(push)
namespace xtal::message
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

template <typename ..._s> XTAL_NYM respan;
template <typename ..._s> XTAL_ASK respan_q = bond::tag_p<respan, _s...>;
template <iterated_q   U> XTAL_USE respan_t = confined_t<refer<U>, respan<U>, bond::tag<respan>>;
/**/
template <class S, iterated_q U>
XTAL_USE respan_s = bond::compose_s<S, confined<bond::tag<respan>, refer<U>, respan<U>>>;
/***/

template <iterated_q U>
struct respan<U>
{
private:
	using V = distance_t<U>;

public:
	using subkind = defer<U>;

	template <any_q S>
	class subtype: public bond::compose_s<S, subkind>
	{
		using S_ = bond::compose_s<S, subkind>;
	
	public:
	//	using S_::S_;
		using S_::self;
		using S_::twin;
		using S_::head;
		
		using U_span = U;

		XTAL_CO0_(subtype);
		XTAL_CO4_(subtype);

		template <iterated_q W>
		XTAL_CXN subtype(W &&w, auto &&...oo)
		XTAL_0EX
		:	S_(visor_t<W>(XTAL_FWD_(w)), XTAL_FWD_(oo)...)
		{}

		XTAL_TO4_(XTAL_TN2 span(auto &&...oo), head(XTAL_FWD_(oo)...))
		XTAL_TO4_(XTAL_TN2 size(), head().size())

		XTAL_TN2 slice(counted_q auto &&w)
		XTAL_0FX
		{
			auto i = w.front(), j = w.back() + 1;
			auto t = twin(); (void) t.span(t.span()|_v3::views::slice(i, j)); return t;
		}

	};
};


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
XTAL_ENV_(pop)
