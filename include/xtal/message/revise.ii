#pragma once
#include "./any.ii"






XTAL_ENV_(push)
namespace xtal::message
{/////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
///\
Represents a local `{store,serve}` pair, \
used as e.g. a buffer and its abstract/copyable `std::span`. \

template <typename ..._s> XTAL_NYM revise;
template <typename ..._s> XTAL_USE revise_t = confined_t<revise<_s...>>;
template <bracket_q U>
struct revise<U>
{
	using store_u =    based_t<U>;
	using serve_u = deranged_t<U>;
	using subkind = common::compose<void
	,	compound::defer<serve_u>
	,	compound::defer<store_u>
	>;

	template <class S>
	class subtype: public common::compose_s<S, subkind>
	{
		using _S = common::compose_s<S, subkind>;

	public:
	//	using _S::_S;
		using _S::self;
		
		~subtype() = default;
	
	//	XTAL_CO0_(subtype)
		XTAL_CO4_(subtype)
	
		XTAL_CON subtype()
		XTAL_0EX
		:	subtype(store_u())
		{}
		XTAL_CXN subtype(XTAL_DEF ...oo)
		XTAL_0EX
		:	subtype(store_u(), XTAL_REF_(oo)...)
		{}
		
		XTAL_CXN subtype(store_u o, XTAL_DEF ...oo)
		XTAL_0EX
		:	_S(serve_u(o), XTAL_MOV_(o), XTAL_REF_(oo)...)
		{}
		XTAL_TN0 store(store_u o, XTAL_DEF... oo)
		XTAL_0EX
		{
			self(serve_u(o), XTAL_MOV_(o), XTAL_REF_(oo)...);
		}
		XTAL_TO4_(XTAL_TN2 store(), _S::template head<1>())
		XTAL_TO4_(XTAL_TN2 serve(XTAL_DEF... oo), _S::template head<0>(XTAL_REF_(oo)...))

	};
};


///////////////////////////////////////////////////////////////////////////////
}/////////////////////////////////////////////////////////////////////////////
XTAL_ENV_(pop)
